{"version":3,"file":"bundle.tracing.es5.min.js","sources":["../../../utils/src/global.ts","../../../utils/src/is.ts","../../../utils/src/browser.ts","../../../utils/src/error.ts","../../../utils/src/dsn.ts","../../../utils/src/logger.ts","../../../utils/src/string.ts","../../../utils/src/object.ts","../../../utils/src/stacktrace.ts","../../../utils/src/supports.ts","../../../utils/src/instrument.ts","../../../utils/src/syncpromise.ts","../../../utils/src/misc.ts","../../../utils/src/normalize.ts","../../../utils/src/memo.ts","../../../utils/src/promisebuffer.ts","../../../utils/src/severity.ts","../../../utils/src/time.ts","../../../utils/src/tracing.ts","../../../utils/src/envelope.ts","../../../utils/src/ratelimit.ts","../../../utils/src/baggage.ts","../../../hub/src/session.ts","../../../hub/src/scope.ts","../../../hub/src/hub.ts","../../../hub/src/exports.ts","../../../core/src/api.ts","../../../core/src/envelope.ts","../../../core/src/integration.ts","../../../core/src/baseclient.ts","../../../core/src/transports/base.ts","../../../core/src/integrations/functiontostring.ts","../../../core/src/version.ts","../../../core/src/integrations/inboundfilters.ts","../../../browser/src/eventbuilder.ts","../../../browser/src/integrations/breadcrumbs.ts","../../../browser/src/transports/utils.ts","../../../browser/src/client.ts","../../../utils/src/clientreport.ts","../../../browser/src/transports/fetch.ts","../../../browser/src/transports/xhr.ts","../../../browser/src/stack-parsers.ts","../../../browser/src/helpers.ts","../../../browser/src/integrations/globalhandlers.ts","../../../browser/src/integrations/trycatch.ts","../../../browser/src/integrations/linkederrors.ts","../../../browser/src/integrations/httpcontext.ts","../../../browser/src/integrations/dedupe.ts","../../../browser/src/sdk.ts","../../../browser/src/index.ts","../../src/utils.ts","../../src/errors.ts","../../src/span.ts","../../src/transaction.ts","../../src/idletransaction.ts","../../src/hubextensions.ts","../../src/browser/backgroundtab.ts","../../src/browser/web-vitals/lib/bindReporter.ts","../../src/browser/web-vitals/lib/initMetric.ts","../../src/browser/web-vitals/lib/generateUniqueID.ts","../../src/browser/web-vitals/lib/observe.ts","../../src/browser/web-vitals/lib/onHidden.ts","../../src/browser/web-vitals/lib/getVisibilityWatcher.ts","../../src/browser/web-vitals/getLCP.ts","../../src/browser/metrics/utils.ts","../../src/browser/metrics/index.ts","../../src/browser/web-vitals/getCLS.ts","../../src/browser/web-vitals/getFID.ts","../../src/browser/request.ts","../../src/browser/router.ts","../../src/browser/browsertracing.ts","../../src/index.bundle.ts","../../../core/src/sdk.ts"],"sourcesContent":["/**\n * NOTE: In order to avoid circular dependencies, if you add a function to this module and it needs to print something,\n * you must either a) use `console.log` rather than the logger, or b) put your function elsewhere.\n */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { Integration } from '@sentry/types';\n\nimport { isNodeEnv } from './node';\n\n/** Internal */\ninterface SentryGlobal {\n  Sentry?: {\n    Integrations?: Integration[];\n  };\n  SENTRY_ENVIRONMENT?: string;\n  SENTRY_DSN?: string;\n  SENTRY_RELEASE?: {\n    id?: string;\n  };\n  __SENTRY__: {\n    globalEventProcessors: any;\n    hub: any;\n    logger: any;\n  };\n}\n\nconst fallbackGlobalObject = {};\n\n/**\n * Safely get global scope object\n *\n * @returns Global scope object\n */\nexport function getGlobalObject<T>(): T & SentryGlobal {\n  return (\n    isNodeEnv()\n      ? global\n      : typeof window !== 'undefined' // eslint-disable-line no-restricted-globals\n      ? window // eslint-disable-line no-restricted-globals\n      : typeof self !== 'undefined'\n      ? self\n      : fallbackGlobalObject\n  ) as T & SentryGlobal;\n}\n\n/**\n * Returns a global singleton contained in the global `__SENTRY__` object.\n *\n * If the singleton doesn't already exist in `__SENTRY__`, it will be created using the given factory\n * function and added to the `__SENTRY__` object.\n *\n * @param name name of the global singleton on __SENTRY__\n * @param creator creator Factory function to create the singleton if it doesn't already exist on `__SENTRY__`\n * @param obj (Optional) The global object on which to look for `__SENTRY__`, if not `getGlobalObject`'s return value\n * @returns the singleton\n */\nexport function getGlobalSingleton<T>(name: keyof SentryGlobal['__SENTRY__'], creator: () => T, obj?: unknown): T {\n  const global = (obj || getGlobalObject()) as SentryGlobal;\n  const __SENTRY__ = (global.__SENTRY__ = global.__SENTRY__ || {});\n  const singleton = __SENTRY__[name] || (__SENTRY__[name] = creator());\n  return singleton;\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n\nimport { PolymorphicEvent, Primitive } from '@sentry/types';\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nconst objectToString = Object.prototype.toString;\n\n/**\n * Checks whether given value's type is one of a few Error or Error-like\n * {@link isError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isError(wat: unknown): wat is Error {\n  switch (objectToString.call(wat)) {\n    case '[object Error]':\n    case '[object Exception]':\n    case '[object DOMException]':\n      return true;\n    default:\n      return isInstanceOf(wat, Error);\n  }\n}\n\nfunction isBuiltin(wat: unknown, ty: string): boolean {\n  return objectToString.call(wat) === `[object ${ty}]`;\n}\n\n/**\n * Checks whether given value's type is ErrorEvent\n * {@link isErrorEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isErrorEvent(wat: unknown): boolean {\n  return isBuiltin(wat, 'ErrorEvent');\n}\n\n/**\n * Checks whether given value's type is DOMError\n * {@link isDOMError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isDOMError(wat: unknown): boolean {\n  return isBuiltin(wat, 'DOMError');\n}\n\n/**\n * Checks whether given value's type is DOMException\n * {@link isDOMException}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isDOMException(wat: unknown): boolean {\n  return isBuiltin(wat, 'DOMException');\n}\n\n/**\n * Checks whether given value's type is a string\n * {@link isString}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isString(wat: unknown): wat is string {\n  return isBuiltin(wat, 'String');\n}\n\n/**\n * Checks whether given value is a primitive (undefined, null, number, boolean, string, bigint, symbol)\n * {@link isPrimitive}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isPrimitive(wat: unknown): wat is Primitive {\n  return wat === null || (typeof wat !== 'object' && typeof wat !== 'function');\n}\n\n/**\n * Checks whether given value's type is an object literal\n * {@link isPlainObject}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isPlainObject(wat: unknown): wat is Record<string, unknown> {\n  return isBuiltin(wat, 'Object');\n}\n\n/**\n * Checks whether given value's type is an Event instance\n * {@link isEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isEvent(wat: unknown): wat is PolymorphicEvent {\n  return typeof Event !== 'undefined' && isInstanceOf(wat, Event);\n}\n\n/**\n * Checks whether given value's type is an Element instance\n * {@link isElement}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isElement(wat: unknown): boolean {\n  return typeof Element !== 'undefined' && isInstanceOf(wat, Element);\n}\n\n/**\n * Checks whether given value's type is an regexp\n * {@link isRegExp}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isRegExp(wat: unknown): wat is RegExp {\n  return isBuiltin(wat, 'RegExp');\n}\n\n/**\n * Checks whether given value has a then function.\n * @param wat A value to be checked.\n */\nexport function isThenable(wat: any): wat is PromiseLike<any> {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return Boolean(wat && wat.then && typeof wat.then === 'function');\n}\n\n/**\n * Checks whether given value's type is a SyntheticEvent\n * {@link isSyntheticEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isSyntheticEvent(wat: unknown): boolean {\n  return isPlainObject(wat) && 'nativeEvent' in wat && 'preventDefault' in wat && 'stopPropagation' in wat;\n}\n\n/**\n * Checks whether given value is NaN\n * {@link isNaN}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isNaN(wat: unknown): boolean {\n  return typeof wat === 'number' && wat !== wat;\n}\n\n/**\n * Checks whether given value's type is an instance of provided constructor.\n * {@link isInstanceOf}.\n *\n * @param wat A value to be checked.\n * @param base A constructor to be used in a check.\n * @returns A boolean representing the result.\n */\nexport function isInstanceOf(wat: any, base: any): boolean {\n  try {\n    return wat instanceof base;\n  } catch (_e) {\n    return false;\n  }\n}\n","import { getGlobalObject } from './global';\nimport { isString } from './is';\n\n/**\n * Given a child DOM element, returns a query-selector statement describing that\n * and its ancestors\n * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nexport function htmlTreeAsString(elem: unknown, keyAttrs?: string[]): string {\n  type SimpleNode = {\n    parentNode: SimpleNode;\n  } | null;\n\n  // try/catch both:\n  // - accessing event.target (see getsentry/raven-js#838, #768)\n  // - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly\n  // - can throw an exception in some circumstances.\n  try {\n    let currentElem = elem as SimpleNode;\n    const MAX_TRAVERSE_HEIGHT = 5;\n    const MAX_OUTPUT_LEN = 80;\n    const out = [];\n    let height = 0;\n    let len = 0;\n    const separator = ' > ';\n    const sepLength = separator.length;\n    let nextStr;\n\n    // eslint-disable-next-line no-plusplus\n    while (currentElem && height++ < MAX_TRAVERSE_HEIGHT) {\n      nextStr = _htmlElementAsString(currentElem, keyAttrs);\n      // bail out if\n      // - nextStr is the 'html' element\n      // - the length of the string that would be created exceeds MAX_OUTPUT_LEN\n      //   (ignore this limit if we are on the first iteration)\n      if (nextStr === 'html' || (height > 1 && len + out.length * sepLength + nextStr.length >= MAX_OUTPUT_LEN)) {\n        break;\n      }\n\n      out.push(nextStr);\n\n      len += nextStr.length;\n      currentElem = currentElem.parentNode;\n    }\n\n    return out.reverse().join(separator);\n  } catch (_oO) {\n    return '<unknown>';\n  }\n}\n\n/**\n * Returns a simple, query-selector representation of a DOM element\n * e.g. [HTMLElement] => input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nfunction _htmlElementAsString(el: unknown, keyAttrs?: string[]): string {\n  const elem = el as {\n    tagName?: string;\n    id?: string;\n    className?: string;\n    getAttribute(key: string): string;\n  };\n\n  const out = [];\n  let className;\n  let classes;\n  let key;\n  let attr;\n  let i;\n\n  if (!elem || !elem.tagName) {\n    return '';\n  }\n\n  out.push(elem.tagName.toLowerCase());\n\n  // Pairs of attribute keys defined in `serializeAttribute` and their values on element.\n  const keyAttrPairs =\n    keyAttrs && keyAttrs.length\n      ? keyAttrs.filter(keyAttr => elem.getAttribute(keyAttr)).map(keyAttr => [keyAttr, elem.getAttribute(keyAttr)])\n      : null;\n\n  if (keyAttrPairs && keyAttrPairs.length) {\n    keyAttrPairs.forEach(keyAttrPair => {\n      out.push(`[${keyAttrPair[0]}=\"${keyAttrPair[1]}\"]`);\n    });\n  } else {\n    if (elem.id) {\n      out.push(`#${elem.id}`);\n    }\n\n    // eslint-disable-next-line prefer-const\n    className = elem.className;\n    if (className && isString(className)) {\n      classes = className.split(/\\s+/);\n      for (i = 0; i < classes.length; i++) {\n        out.push(`.${classes[i]}`);\n      }\n    }\n  }\n  const allowedAttrs = ['type', 'name', 'title', 'alt'];\n  for (i = 0; i < allowedAttrs.length; i++) {\n    key = allowedAttrs[i];\n    attr = elem.getAttribute(key);\n    if (attr) {\n      out.push(`[${key}=\"${attr}\"]`);\n    }\n  }\n  return out.join('');\n}\n\n/**\n * A safe form of location.href\n */\nexport function getLocationHref(): string {\n  const global = getGlobalObject<Window>();\n  try {\n    return global.document.location.href;\n  } catch (oO) {\n    return '';\n  }\n}\n","/** An error emitted by Sentry SDKs and related utilities. */\nexport class SentryError extends Error {\n  /** Display name of this error instance. */\n  public name: string;\n\n  public constructor(public message: string) {\n    super(message);\n\n    this.name = new.target.prototype.constructor.name;\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n}\n","import { DsnComponents, DsnLike, DsnProtocol } from '@sentry/types';\n\nimport { SentryError } from './error';\n\n/** Regular expression used to parse a Dsn. */\nconst DSN_REGEX = /^(?:(\\w+):)\\/\\/(?:(\\w+)(?::(\\w+))?@)([\\w.-]+)(?::(\\d+))?\\/(.+)/;\n\nfunction isValidProtocol(protocol?: string): protocol is DsnProtocol {\n  return protocol === 'http' || protocol === 'https';\n}\n\n/**\n * Renders the string representation of this Dsn.\n *\n * By default, this will render the public representation without the password\n * component. To get the deprecated private representation, set `withPassword`\n * to true.\n *\n * @param withPassword When set to true, the password will be included.\n */\nexport function dsnToString(dsn: DsnComponents, withPassword: boolean = false): string {\n  const { host, path, pass, port, projectId, protocol, publicKey } = dsn;\n  return (\n    `${protocol}://${publicKey}${withPassword && pass ? `:${pass}` : ''}` +\n    `@${host}${port ? `:${port}` : ''}/${path ? `${path}/` : path}${projectId}`\n  );\n}\n\n/**\n * Parses a Dsn from a given string.\n *\n * @param str A Dsn as string\n * @returns Dsn as DsnComponents\n */\nexport function dsnFromString(str: string): DsnComponents {\n  const match = DSN_REGEX.exec(str);\n\n  if (!match) {\n    throw new SentryError(`Invalid Sentry Dsn: ${str}`);\n  }\n\n  const [protocol, publicKey, pass = '', host, port = '', lastPath] = match.slice(1);\n  let path = '';\n  let projectId = lastPath;\n\n  const split = projectId.split('/');\n  if (split.length > 1) {\n    path = split.slice(0, -1).join('/');\n    projectId = split.pop() as string;\n  }\n\n  if (projectId) {\n    const projectMatch = projectId.match(/^\\d+/);\n    if (projectMatch) {\n      projectId = projectMatch[0];\n    }\n  }\n\n  return dsnFromComponents({ host, pass, path, projectId, port, protocol: protocol as DsnProtocol, publicKey });\n}\n\nfunction dsnFromComponents(components: DsnComponents): DsnComponents {\n  return {\n    protocol: components.protocol,\n    publicKey: components.publicKey || '',\n    pass: components.pass || '',\n    host: components.host,\n    port: components.port || '',\n    path: components.path || '',\n    projectId: components.projectId,\n  };\n}\n\nfunction validateDsn(dsn: DsnComponents): boolean | void {\n  if (!__DEBUG_BUILD__) {\n    return;\n  }\n\n  const { port, projectId, protocol } = dsn;\n\n  const requiredComponents: ReadonlyArray<keyof DsnComponents> = ['protocol', 'publicKey', 'host', 'projectId'];\n  requiredComponents.forEach(component => {\n    if (!dsn[component]) {\n      throw new SentryError(`Invalid Sentry Dsn: ${component} missing`);\n    }\n  });\n\n  if (!projectId.match(/^\\d+$/)) {\n    throw new SentryError(`Invalid Sentry Dsn: Invalid projectId ${projectId}`);\n  }\n\n  if (!isValidProtocol(protocol)) {\n    throw new SentryError(`Invalid Sentry Dsn: Invalid protocol ${protocol}`);\n  }\n\n  if (port && isNaN(parseInt(port, 10))) {\n    throw new SentryError(`Invalid Sentry Dsn: Invalid port ${port}`);\n  }\n\n  return true;\n}\n\n/** The Sentry Dsn, identifying a Sentry instance and project. */\nexport function makeDsn(from: DsnLike): DsnComponents {\n  const components = typeof from === 'string' ? dsnFromString(from) : dsnFromComponents(from);\n  validateDsn(components);\n  return components;\n}\n","import { WrappedFunction } from '@sentry/types';\n\nimport { getGlobalObject, getGlobalSingleton } from './global';\n\n// TODO: Implement different loggers for different environments\nconst global = getGlobalObject<Window | NodeJS.Global>();\n\n/** Prefix for logging strings */\nconst PREFIX = 'Sentry Logger ';\n\nexport const CONSOLE_LEVELS = ['debug', 'info', 'warn', 'error', 'log', 'assert', 'trace'] as const;\n\ntype LoggerMethod = (...args: unknown[]) => void;\ntype LoggerConsoleMethods = Record<typeof CONSOLE_LEVELS[number], LoggerMethod>;\n\n/** JSDoc */\ninterface Logger extends LoggerConsoleMethods {\n  disable(): void;\n  enable(): void;\n}\n\n/**\n * Temporarily disable sentry console instrumentations.\n *\n * @param callback The function to run against the original `console` messages\n * @returns The results of the callback\n */\nexport function consoleSandbox<T>(callback: () => T): T {\n  const global = getGlobalObject<Window>();\n\n  if (!('console' in global)) {\n    return callback();\n  }\n\n  const originalConsole = global.console as Console & Record<string, unknown>;\n  const wrappedLevels: Partial<LoggerConsoleMethods> = {};\n\n  // Restore all wrapped console methods\n  CONSOLE_LEVELS.forEach(level => {\n    // TODO(v7): Remove this check as it's only needed for Node 6\n    const originalWrappedFunc =\n      originalConsole[level] && (originalConsole[level] as WrappedFunction).__sentry_original__;\n    if (level in global.console && originalWrappedFunc) {\n      wrappedLevels[level] = originalConsole[level] as LoggerConsoleMethods[typeof level];\n      originalConsole[level] = originalWrappedFunc as Console[typeof level];\n    }\n  });\n\n  try {\n    return callback();\n  } finally {\n    // Revert restoration to wrapped state\n    Object.keys(wrappedLevels).forEach(level => {\n      originalConsole[level] = wrappedLevels[level as typeof CONSOLE_LEVELS[number]];\n    });\n  }\n}\n\nfunction makeLogger(): Logger {\n  let enabled = false;\n  const logger: Partial<Logger> = {\n    enable: () => {\n      enabled = true;\n    },\n    disable: () => {\n      enabled = false;\n    },\n  };\n\n  if (__DEBUG_BUILD__) {\n    CONSOLE_LEVELS.forEach(name => {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      logger[name] = (...args: any[]) => {\n        if (enabled) {\n          consoleSandbox(() => {\n            global.console[name](`${PREFIX}[${name}]:`, ...args);\n          });\n        }\n      };\n    });\n  } else {\n    CONSOLE_LEVELS.forEach(name => {\n      logger[name] = () => undefined;\n    });\n  }\n\n  return logger as Logger;\n}\n\n// Ensure we only have a single logger instance, even if multiple versions of @sentry/utils are being used\nlet logger: Logger;\nif (__DEBUG_BUILD__) {\n  logger = getGlobalSingleton('logger', makeLogger);\n} else {\n  logger = makeLogger();\n}\n\nexport { logger };\n","import { isRegExp, isString } from './is';\n\n/**\n * Truncates given string to the maximum characters count\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string (0 = unlimited)\n * @returns string Encoded\n */\nexport function truncate(str: string, max: number = 0): string {\n  if (typeof str !== 'string' || max === 0) {\n    return str;\n  }\n  return str.length <= max ? str : `${str.substr(0, max)}...`;\n}\n\n/**\n * This is basically just `trim_line` from\n * https://github.com/getsentry/sentry/blob/master/src/sentry/lang/javascript/processor.py#L67\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string\n * @returns string Encoded\n */\nexport function snipLine(line: string, colno: number): string {\n  let newLine = line;\n  const lineLength = newLine.length;\n  if (lineLength <= 150) {\n    return newLine;\n  }\n  if (colno > lineLength) {\n    // eslint-disable-next-line no-param-reassign\n    colno = lineLength;\n  }\n\n  let start = Math.max(colno - 60, 0);\n  if (start < 5) {\n    start = 0;\n  }\n\n  let end = Math.min(start + 140, lineLength);\n  if (end > lineLength - 5) {\n    end = lineLength;\n  }\n  if (end === lineLength) {\n    start = Math.max(end - 140, 0);\n  }\n\n  newLine = newLine.slice(start, end);\n  if (start > 0) {\n    newLine = `'{snip} ${newLine}`;\n  }\n  if (end < lineLength) {\n    newLine += ' {snip}';\n  }\n\n  return newLine;\n}\n\n/**\n * Join values in array\n * @param input array of values to be joined together\n * @param delimiter string to be placed in-between values\n * @returns Joined values\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function safeJoin(input: any[], delimiter?: string): string {\n  if (!Array.isArray(input)) {\n    return '';\n  }\n\n  const output = [];\n  // eslint-disable-next-line @typescript-eslint/prefer-for-of\n  for (let i = 0; i < input.length; i++) {\n    const value = input[i];\n    try {\n      output.push(String(value));\n    } catch (e) {\n      output.push('[value cannot be serialized]');\n    }\n  }\n\n  return output.join(delimiter);\n}\n\n/**\n * Checks if the value matches a regex or includes the string\n * @param value The string value to be checked against\n * @param pattern Either a regex or a string that must be contained in value\n */\nexport function isMatchingPattern(value: string, pattern: RegExp | string): boolean {\n  if (!isString(value)) {\n    return false;\n  }\n\n  if (isRegExp(pattern)) {\n    return pattern.test(value);\n  }\n  if (typeof pattern === 'string') {\n    return value.indexOf(pattern) !== -1;\n  }\n  return false;\n}\n\n/**\n * Given a string, escape characters which have meaning in the regex grammar, such that the result is safe to feed to\n * `new RegExp()`.\n *\n * Based on https://github.com/sindresorhus/escape-string-regexp. Vendored to a) reduce the size by skipping the runtime\n * type-checking, and b) ensure it gets down-compiled for old versions of Node (the published package only supports Node\n * 12+).\n *\n * @param regexString The string to escape\n * @returns An version of the string with all special regex characters escaped\n */\nexport function escapeStringForRegex(regexString: string): string {\n  // escape the hyphen separately so we can also replace it with a unicode literal hyphen, to avoid the problems\n  // discussed in https://github.com/sindresorhus/escape-string-regexp/issues/20.\n  return regexString.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&').replace(/-/g, '\\\\x2d');\n}\n","/* eslint-disable max-lines */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { WrappedFunction } from '@sentry/types';\n\nimport { htmlTreeAsString } from './browser';\nimport { isElement, isError, isEvent, isInstanceOf, isPlainObject, isPrimitive } from './is';\nimport { truncate } from './string';\n\n/**\n * Replace a method in an object with a wrapped version of itself.\n *\n * @param source An object that contains a method to be wrapped.\n * @param name The name of the method to be wrapped.\n * @param replacementFactory A higher-order function that takes the original version of the given method and returns a\n * wrapped version. Note: The function returned by `replacementFactory` needs to be a non-arrow function, in order to\n * preserve the correct value of `this`, and the original method must be called using `origMethod.call(this, <other\n * args>)` or `origMethod.apply(this, [<other args>])` (rather than being called directly), again to preserve `this`.\n * @returns void\n */\nexport function fill(source: { [key: string]: any }, name: string, replacementFactory: (...args: any[]) => any): void {\n  if (!(name in source)) {\n    return;\n  }\n\n  const original = source[name] as () => any;\n  const wrapped = replacementFactory(original) as WrappedFunction;\n\n  // Make sure it's a function first, as we need to attach an empty prototype for `defineProperties` to work\n  // otherwise it'll throw \"TypeError: Object.defineProperties called on non-object\"\n  if (typeof wrapped === 'function') {\n    try {\n      markFunctionWrapped(wrapped, original);\n    } catch (_Oo) {\n      // This can throw if multiple fill happens on a global object like XMLHttpRequest\n      // Fixes https://github.com/getsentry/sentry-javascript/issues/2043\n    }\n  }\n\n  source[name] = wrapped;\n}\n\n/**\n * Defines a non-enumerable property on the given object.\n *\n * @param obj The object on which to set the property\n * @param name The name of the property to be set\n * @param value The value to which to set the property\n */\nexport function addNonEnumerableProperty(obj: { [key: string]: unknown }, name: string, value: unknown): void {\n  Object.defineProperty(obj, name, {\n    // enumerable: false, // the default, so we can save on bundle size by not explicitly setting it\n    value: value,\n    writable: true,\n    configurable: true,\n  });\n}\n\n/**\n * Remembers the original function on the wrapped function and\n * patches up the prototype.\n *\n * @param wrapped the wrapper function\n * @param original the original function that gets wrapped\n */\nexport function markFunctionWrapped(wrapped: WrappedFunction, original: WrappedFunction): void {\n  const proto = original.prototype || {};\n  wrapped.prototype = original.prototype = proto;\n  addNonEnumerableProperty(wrapped, '__sentry_original__', original);\n}\n\n/**\n * This extracts the original function if available.  See\n * `markFunctionWrapped` for more information.\n *\n * @param func the function to unwrap\n * @returns the unwrapped version of the function if available.\n */\nexport function getOriginalFunction(func: WrappedFunction): WrappedFunction | undefined {\n  return func.__sentry_original__;\n}\n\n/**\n * Encodes given object into url-friendly format\n *\n * @param object An object that contains serializable values\n * @returns string Encoded\n */\nexport function urlEncode(object: { [key: string]: any }): string {\n  return Object.keys(object)\n    .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(object[key])}`)\n    .join('&');\n}\n\n/**\n * Transforms any `Error` or `Event` into a plain object with all of their enumerable properties, and some of their\n * non-enumerable properties attached.\n *\n * @param value Initial source that we have to transform in order for it to be usable by the serializer\n * @returns An Event or Error turned into an object - or the value argurment itself, when value is neither an Event nor\n *  an Error.\n */\nexport function convertToPlainObject<V extends unknown>(\n  value: V,\n):\n  | {\n      [ownProps: string]: unknown;\n      type: string;\n      target: string;\n      currentTarget: string;\n      detail?: unknown;\n    }\n  | {\n      [ownProps: string]: unknown;\n      message: string;\n      name: string;\n      stack?: string;\n    }\n  | V {\n  if (isError(value)) {\n    return {\n      message: value.message,\n      name: value.name,\n      stack: value.stack,\n      ...getOwnProperties(value),\n    };\n  } else if (isEvent(value)) {\n    const newObj: {\n      [ownProps: string]: unknown;\n      type: string;\n      target: string;\n      currentTarget: string;\n      detail?: unknown;\n    } = {\n      type: value.type,\n      target: serializeEventTarget(value.target),\n      currentTarget: serializeEventTarget(value.currentTarget),\n      ...getOwnProperties(value),\n    };\n\n    if (typeof CustomEvent !== 'undefined' && isInstanceOf(value, CustomEvent)) {\n      newObj.detail = value.detail;\n    }\n\n    return newObj;\n  } else {\n    return value;\n  }\n}\n\n/** Creates a string representation of the target of an `Event` object */\nfunction serializeEventTarget(target: unknown): string {\n  try {\n    return isElement(target) ? htmlTreeAsString(target) : Object.prototype.toString.call(target);\n  } catch (_oO) {\n    return '<unknown>';\n  }\n}\n\n/** Filters out all but an object's own properties */\nfunction getOwnProperties(obj: unknown): { [key: string]: unknown } {\n  if (typeof obj === 'object' && obj !== null) {\n    const extractedProps: { [key: string]: unknown } = {};\n    for (const property in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, property)) {\n        extractedProps[property] = (obj as Record<string, unknown>)[property];\n      }\n    }\n    return extractedProps;\n  } else {\n    return {};\n  }\n}\n\n/**\n * Given any captured exception, extract its keys and create a sorted\n * and truncated list that will be used inside the event message.\n * eg. `Non-error exception captured with keys: foo, bar, baz`\n */\nexport function extractExceptionKeysForMessage(exception: Record<string, unknown>, maxLength: number = 40): string {\n  const keys = Object.keys(convertToPlainObject(exception));\n  keys.sort();\n\n  if (!keys.length) {\n    return '[object has no keys]';\n  }\n\n  if (keys[0].length >= maxLength) {\n    return truncate(keys[0], maxLength);\n  }\n\n  for (let includedKeys = keys.length; includedKeys > 0; includedKeys--) {\n    const serialized = keys.slice(0, includedKeys).join(', ');\n    if (serialized.length > maxLength) {\n      continue;\n    }\n    if (includedKeys === keys.length) {\n      return serialized;\n    }\n    return truncate(serialized, maxLength);\n  }\n\n  return '';\n}\n\n/**\n * Given any object, return a new object having removed all fields whose value was `undefined`.\n * Works recursively on objects and arrays.\n *\n * Attention: This function keeps circular references in the returned object.\n */\nexport function dropUndefinedKeys<T>(inputValue: T): T {\n  // This map keeps track of what already visited nodes map to.\n  // Our Set - based memoBuilder doesn't work here because we want to the output object to have the same circular\n  // references as the input object.\n  const memoizationMap = new Map<unknown, unknown>();\n\n  // This function just proxies `_dropUndefinedKeys` to keep the `memoBuilder` out of this function's API\n  return _dropUndefinedKeys(inputValue, memoizationMap);\n}\n\nfunction _dropUndefinedKeys<T>(inputValue: T, memoizationMap: Map<unknown, unknown>): T {\n  if (isPlainObject(inputValue)) {\n    // If this node has already been visited due to a circular reference, return the object it was mapped to in the new object\n    const memoVal = memoizationMap.get(inputValue);\n    if (memoVal !== undefined) {\n      return memoVal as T;\n    }\n\n    const returnValue: { [key: string]: any } = {};\n    // Store the mapping of this value in case we visit it again, in case of circular data\n    memoizationMap.set(inputValue, returnValue);\n\n    for (const key of Object.keys(inputValue)) {\n      if (typeof inputValue[key] !== 'undefined') {\n        returnValue[key] = _dropUndefinedKeys(inputValue[key], memoizationMap);\n      }\n    }\n\n    return returnValue as T;\n  }\n\n  if (Array.isArray(inputValue)) {\n    // If this node has already been visited due to a circular reference, return the array it was mapped to in the new object\n    const memoVal = memoizationMap.get(inputValue);\n    if (memoVal !== undefined) {\n      return memoVal as T;\n    }\n\n    const returnValue: unknown[] = [];\n    // Store the mapping of this value in case we visit it again, in case of circular data\n    memoizationMap.set(inputValue, returnValue);\n\n    inputValue.forEach((item: unknown) => {\n      returnValue.push(_dropUndefinedKeys(item, memoizationMap));\n    });\n\n    return returnValue as unknown as T;\n  }\n\n  return inputValue;\n}\n\n/**\n * Ensure that something is an object.\n *\n * Turns `undefined` and `null` into `String`s and all other primitives into instances of their respective wrapper\n * classes (String, Boolean, Number, etc.). Acts as the identity function on non-primitives.\n *\n * @param wat The subject of the objectification\n * @returns A version of `wat` which can safely be used with `Object` class methods\n */\nexport function objectify(wat: unknown): typeof Object {\n  let objectified;\n  switch (true) {\n    case wat === undefined || wat === null:\n      objectified = new String(wat);\n      break;\n\n    // Though symbols and bigints do have wrapper classes (`Symbol` and `BigInt`, respectively), for whatever reason\n    // those classes don't have constructors which can be used with the `new` keyword. We therefore need to cast each as\n    // an object in order to wrap it.\n    case typeof wat === 'symbol' || typeof wat === 'bigint':\n      objectified = Object(wat);\n      break;\n\n    // this will catch the remaining primitives: `String`, `Number`, and `Boolean`\n    case isPrimitive(wat):\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      objectified = new (wat as any).constructor(wat);\n      break;\n\n    // by process of elimination, at this point we know that `wat` must already be an object\n    default:\n      objectified = wat;\n      break;\n  }\n  return objectified;\n}\n","import { StackFrame, StackLineParser, StackLineParserFn, StackParser } from '@sentry/types';\n\nconst STACKTRACE_LIMIT = 50;\n\n/**\n * Creates a stack parser with the supplied line parsers\n *\n * StackFrames are returned in the correct order for Sentry Exception\n * frames and with Sentry SDK internal frames removed from the top and bottom\n *\n */\nexport function createStackParser(...parsers: StackLineParser[]): StackParser {\n  const sortedParsers = parsers.sort((a, b) => a[0] - b[0]).map(p => p[1]);\n\n  return (stack: string, skipFirst: number = 0): StackFrame[] => {\n    const frames: StackFrame[] = [];\n\n    for (const line of stack.split('\\n').slice(skipFirst)) {\n      for (const parser of sortedParsers) {\n        const frame = parser(line);\n\n        if (frame) {\n          frames.push(frame);\n          break;\n        }\n      }\n    }\n\n    return stripSentryFramesAndReverse(frames);\n  };\n}\n\n/**\n * Gets a stack parser implementation from Options.stackParser\n * @see Options\n *\n * If options contains an array of line parsers, it is converted into a parser\n */\nexport function stackParserFromStackParserOptions(stackParser: StackParser | StackLineParser[]): StackParser {\n  if (Array.isArray(stackParser)) {\n    return createStackParser(...stackParser);\n  }\n  return stackParser;\n}\n\n/**\n * @hidden\n */\nexport function stripSentryFramesAndReverse(stack: StackFrame[]): StackFrame[] {\n  if (!stack.length) {\n    return [];\n  }\n\n  let localStack = stack;\n\n  const firstFrameFunction = localStack[0].function || '';\n  const lastFrameFunction = localStack[localStack.length - 1].function || '';\n\n  // If stack starts with one of our API calls, remove it (starts, meaning it's the top of the stack - aka last call)\n  if (firstFrameFunction.indexOf('captureMessage') !== -1 || firstFrameFunction.indexOf('captureException') !== -1) {\n    localStack = localStack.slice(1);\n  }\n\n  // If stack ends with one of our internal API calls, remove it (ends, meaning it's the bottom of the stack - aka top-most call)\n  if (lastFrameFunction.indexOf('sentryWrapped') !== -1) {\n    localStack = localStack.slice(0, -1);\n  }\n\n  // The frame where the crash happened, should be the last entry in the array\n  return localStack\n    .slice(0, STACKTRACE_LIMIT)\n    .map(frame => ({\n      ...frame,\n      filename: frame.filename || localStack[0].filename,\n      function: frame.function || '?',\n    }))\n    .reverse();\n}\n\nconst defaultFunctionName = '<anonymous>';\n\n/**\n * Safely extract function name from itself\n */\nexport function getFunctionName(fn: unknown): string {\n  try {\n    if (!fn || typeof fn !== 'function') {\n      return defaultFunctionName;\n    }\n    return fn.name || defaultFunctionName;\n  } catch (e) {\n    // Just accessing custom props in some Selenium environments\n    // can cause a \"Permission denied\" exception (see raven-js#495).\n    return defaultFunctionName;\n  }\n}\n\ntype GetModuleFn = (filename: string | undefined) => string | undefined;\n\n// eslint-disable-next-line complexity\nfunction node(getModule?: GetModuleFn): StackLineParserFn {\n  const FILENAME_MATCH = /^\\s*[-]{4,}$/;\n  const FULL_MATCH = /at (?:async )?(?:(.+?)\\s+\\()?(?:(.+?):(\\d+)(?::(\\d+))?|([^)]+))\\)?/;\n\n  // eslint-disable-next-line complexity\n  return (line: string) => {\n    if (line.match(FILENAME_MATCH)) {\n      return {\n        filename: line,\n      };\n    }\n\n    const lineMatch = line.match(FULL_MATCH);\n    if (!lineMatch) {\n      return undefined;\n    }\n\n    let object: string | undefined;\n    let method: string | undefined;\n    let functionName: string | undefined;\n    let typeName: string | undefined;\n    let methodName: string | undefined;\n\n    if (lineMatch[1]) {\n      functionName = lineMatch[1];\n\n      let methodStart = functionName.lastIndexOf('.');\n      if (functionName[methodStart - 1] === '.') {\n        // eslint-disable-next-line no-plusplus\n        methodStart--;\n      }\n\n      if (methodStart > 0) {\n        object = functionName.substr(0, methodStart);\n        method = functionName.substr(methodStart + 1);\n        const objectEnd = object.indexOf('.Module');\n        if (objectEnd > 0) {\n          functionName = functionName.substr(objectEnd + 1);\n          object = object.substr(0, objectEnd);\n        }\n      }\n      typeName = undefined;\n    }\n\n    if (method) {\n      typeName = object;\n      methodName = method;\n    }\n\n    if (method === '<anonymous>') {\n      methodName = undefined;\n      functionName = undefined;\n    }\n\n    if (functionName === undefined) {\n      methodName = methodName || '<anonymous>';\n      functionName = typeName ? `${typeName}.${methodName}` : methodName;\n    }\n\n    const filename = lineMatch[2]?.startsWith('file://') ? lineMatch[2].substr(7) : lineMatch[2];\n    const isNative = lineMatch[5] === 'native';\n    const isInternal =\n      isNative || (filename && !filename.startsWith('/') && !filename.startsWith('.') && filename.indexOf(':\\\\') !== 1);\n\n    // in_app is all that's not an internal Node function or a module within node_modules\n    // note that isNative appears to return true even for node core libraries\n    // see https://github.com/getsentry/raven-node/issues/176\n    const in_app = !isInternal && filename !== undefined && !filename.includes('node_modules/');\n\n    return {\n      filename,\n      module: getModule?.(filename),\n      function: functionName,\n      lineno: parseInt(lineMatch[3], 10) || undefined,\n      colno: parseInt(lineMatch[4], 10) || undefined,\n      in_app,\n    };\n  };\n}\n\n/**\n * Node.js stack line parser\n *\n * This is in @sentry/utils so it can be used from the Electron SDK in the browser for when `nodeIntegration == true`.\n * This allows it to be used without referencing or importing any node specific code which causes bundlers to complain\n */\nexport function nodeStackLineParser(getModule?: GetModuleFn): StackLineParser {\n  return [90, node(getModule)];\n}\n","import { getGlobalObject } from './global';\nimport { logger } from './logger';\n\n/**\n * Tells whether current environment supports ErrorEvent objects\n * {@link supportsErrorEvent}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsErrorEvent(): boolean {\n  try {\n    new ErrorEvent('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports DOMError objects\n * {@link supportsDOMError}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsDOMError(): boolean {\n  try {\n    // Chrome: VM89:1 Uncaught TypeError: Failed to construct 'DOMError':\n    // 1 argument required, but only 0 present.\n    // @ts-ignore It really needs 1 argument, not 0.\n    new DOMError('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports DOMException objects\n * {@link supportsDOMException}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsDOMException(): boolean {\n  try {\n    new DOMException('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports Fetch API\n * {@link supportsFetch}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsFetch(): boolean {\n  if (!('fetch' in getGlobalObject<Window>())) {\n    return false;\n  }\n\n  try {\n    new Headers();\n    new Request('');\n    new Response();\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * isNativeFetch checks if the given function is a native implementation of fetch()\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isNativeFetch(func: Function): boolean {\n  return func && /^function fetch\\(\\)\\s+\\{\\s+\\[native code\\]\\s+\\}$/.test(func.toString());\n}\n\n/**\n * Tells whether current environment supports Fetch API natively\n * {@link supportsNativeFetch}.\n *\n * @returns true if `window.fetch` is natively implemented, false otherwise\n */\nexport function supportsNativeFetch(): boolean {\n  if (!supportsFetch()) {\n    return false;\n  }\n\n  const global = getGlobalObject<Window>();\n\n  // Fast path to avoid DOM I/O\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  if (isNativeFetch(global.fetch)) {\n    return true;\n  }\n\n  // window.fetch is implemented, but is polyfilled or already wrapped (e.g: by a chrome extension)\n  // so create a \"pure\" iframe to see if that has native fetch\n  let result = false;\n  const doc = global.document;\n  // eslint-disable-next-line deprecation/deprecation\n  if (doc && typeof (doc.createElement as unknown) === 'function') {\n    try {\n      const sandbox = doc.createElement('iframe');\n      sandbox.hidden = true;\n      doc.head.appendChild(sandbox);\n      if (sandbox.contentWindow && sandbox.contentWindow.fetch) {\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        result = isNativeFetch(sandbox.contentWindow.fetch);\n      }\n      doc.head.removeChild(sandbox);\n    } catch (err) {\n      __DEBUG_BUILD__ &&\n        logger.warn('Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ', err);\n    }\n  }\n\n  return result;\n}\n\n/**\n * Tells whether current environment supports ReportingObserver API\n * {@link supportsReportingObserver}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsReportingObserver(): boolean {\n  return 'ReportingObserver' in getGlobalObject();\n}\n\n/**\n * Tells whether current environment supports Referrer Policy API\n * {@link supportsReferrerPolicy}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsReferrerPolicy(): boolean {\n  // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default'\n  // (see https://caniuse.com/#feat=referrer-policy),\n  // it doesn't. And it throws an exception instead of ignoring this parameter...\n  // REF: https://github.com/getsentry/raven-js/issues/1233\n\n  if (!supportsFetch()) {\n    return false;\n  }\n\n  try {\n    new Request('_', {\n      referrerPolicy: 'origin' as ReferrerPolicy,\n    });\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports History API\n * {@link supportsHistory}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsHistory(): boolean {\n  // NOTE: in Chrome App environment, touching history.pushState, *even inside\n  //       a try/catch block*, will cause Chrome to output an error to console.error\n  // borrowed from: https://github.com/angular/angular.js/pull/13945/files\n  const global = getGlobalObject<Window>();\n  /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const chrome = (global as any).chrome;\n  const isChromePackagedApp = chrome && chrome.app && chrome.app.runtime;\n  /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n  const hasHistoryApi = 'history' in global && !!global.history.pushState && !!global.history.replaceState;\n\n  return !isChromePackagedApp && hasHistoryApi;\n}\n","/* eslint-disable max-lines */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/ban-types */\nimport { WrappedFunction } from '@sentry/types';\n\nimport { getGlobalObject } from './global';\nimport { isInstanceOf, isString } from './is';\nimport { CONSOLE_LEVELS, logger } from './logger';\nimport { fill } from './object';\nimport { getFunctionName } from './stacktrace';\nimport { supportsHistory, supportsNativeFetch } from './supports';\n\nconst global = getGlobalObject<Window>();\n\nexport type InstrumentHandlerType =\n  | 'console'\n  | 'dom'\n  | 'fetch'\n  | 'history'\n  | 'sentry'\n  | 'xhr'\n  | 'error'\n  | 'unhandledrejection';\nexport type InstrumentHandlerCallback = (data: any) => void;\n\n/**\n * Instrument native APIs to call handlers that can be used to create breadcrumbs, APM spans etc.\n *  - Console API\n *  - Fetch API\n *  - XHR API\n *  - History API\n *  - DOM API (click/typing)\n *  - Error API\n *  - UnhandledRejection API\n */\n\nconst handlers: { [key in InstrumentHandlerType]?: InstrumentHandlerCallback[] } = {};\nconst instrumented: { [key in InstrumentHandlerType]?: boolean } = {};\n\n/** Instruments given API */\nfunction instrument(type: InstrumentHandlerType): void {\n  if (instrumented[type]) {\n    return;\n  }\n\n  instrumented[type] = true;\n\n  switch (type) {\n    case 'console':\n      instrumentConsole();\n      break;\n    case 'dom':\n      instrumentDOM();\n      break;\n    case 'xhr':\n      instrumentXHR();\n      break;\n    case 'fetch':\n      instrumentFetch();\n      break;\n    case 'history':\n      instrumentHistory();\n      break;\n    case 'error':\n      instrumentError();\n      break;\n    case 'unhandledrejection':\n      instrumentUnhandledRejection();\n      break;\n    default:\n      __DEBUG_BUILD__ && logger.warn('unknown instrumentation type:', type);\n      return;\n  }\n}\n\n/**\n * Add handler that will be called when given type of instrumentation triggers.\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nexport function addInstrumentationHandler(type: InstrumentHandlerType, callback: InstrumentHandlerCallback): void {\n  handlers[type] = handlers[type] || [];\n  (handlers[type] as InstrumentHandlerCallback[]).push(callback);\n  instrument(type);\n}\n\n/** JSDoc */\nfunction triggerHandlers(type: InstrumentHandlerType, data: any): void {\n  if (!type || !handlers[type]) {\n    return;\n  }\n\n  for (const handler of handlers[type] || []) {\n    try {\n      handler(data);\n    } catch (e) {\n      __DEBUG_BUILD__ &&\n        logger.error(\n          `Error while triggering instrumentation handler.\\nType: ${type}\\nName: ${getFunctionName(handler)}\\nError:`,\n          e,\n        );\n    }\n  }\n}\n\n/** JSDoc */\nfunction instrumentConsole(): void {\n  if (!('console' in global)) {\n    return;\n  }\n\n  CONSOLE_LEVELS.forEach(function (level: string): void {\n    if (!(level in global.console)) {\n      return;\n    }\n\n    fill(global.console, level, function (originalConsoleMethod: () => any): Function {\n      return function (...args: any[]): void {\n        triggerHandlers('console', { args, level });\n\n        // this fails for some browsers. :(\n        if (originalConsoleMethod) {\n          originalConsoleMethod.apply(global.console, args);\n        }\n      };\n    });\n  });\n}\n\n/** JSDoc */\nfunction instrumentFetch(): void {\n  if (!supportsNativeFetch()) {\n    return;\n  }\n\n  fill(global, 'fetch', function (originalFetch: () => void): () => void {\n    return function (...args: any[]): void {\n      const handlerData = {\n        args,\n        fetchData: {\n          method: getFetchMethod(args),\n          url: getFetchUrl(args),\n        },\n        startTimestamp: Date.now(),\n      };\n\n      triggerHandlers('fetch', {\n        ...handlerData,\n      });\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      return originalFetch.apply(global, args).then(\n        (response: Response) => {\n          triggerHandlers('fetch', {\n            ...handlerData,\n            endTimestamp: Date.now(),\n            response,\n          });\n          return response;\n        },\n        (error: Error) => {\n          triggerHandlers('fetch', {\n            ...handlerData,\n            endTimestamp: Date.now(),\n            error,\n          });\n          // NOTE: If you are a Sentry user, and you are seeing this stack frame,\n          //       it means the sentry.javascript SDK caught an error invoking your application code.\n          //       This is expected behavior and NOT indicative of a bug with sentry.javascript.\n          throw error;\n        },\n      );\n    };\n  });\n}\n\ntype XHRSendInput = null | Blob | BufferSource | FormData | URLSearchParams | string;\n\n/** JSDoc */\ninterface SentryWrappedXMLHttpRequest extends XMLHttpRequest {\n  [key: string]: any;\n  __sentry_xhr__?: {\n    method?: string;\n    url?: string;\n    status_code?: number;\n    body?: XHRSendInput;\n  };\n}\n\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/** Extract `method` from fetch call arguments */\nfunction getFetchMethod(fetchArgs: any[] = []): string {\n  if ('Request' in global && isInstanceOf(fetchArgs[0], Request) && fetchArgs[0].method) {\n    return String(fetchArgs[0].method).toUpperCase();\n  }\n  if (fetchArgs[1] && fetchArgs[1].method) {\n    return String(fetchArgs[1].method).toUpperCase();\n  }\n  return 'GET';\n}\n\n/** Extract `url` from fetch call arguments */\nfunction getFetchUrl(fetchArgs: any[] = []): string {\n  if (typeof fetchArgs[0] === 'string') {\n    return fetchArgs[0];\n  }\n  if ('Request' in global && isInstanceOf(fetchArgs[0], Request)) {\n    return fetchArgs[0].url;\n  }\n  return String(fetchArgs[0]);\n}\n/* eslint-enable @typescript-eslint/no-unsafe-member-access */\n\n/** JSDoc */\nfunction instrumentXHR(): void {\n  if (!('XMLHttpRequest' in global)) {\n    return;\n  }\n\n  const xhrproto = XMLHttpRequest.prototype;\n\n  fill(xhrproto, 'open', function (originalOpen: () => void): () => void {\n    return function (this: SentryWrappedXMLHttpRequest, ...args: any[]): void {\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      const xhr = this;\n      const url = args[1];\n      const xhrInfo: SentryWrappedXMLHttpRequest['__sentry_xhr__'] = (xhr.__sentry_xhr__ = {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        method: isString(args[0]) ? args[0].toUpperCase() : args[0],\n        url: args[1],\n      });\n\n      // if Sentry key appears in URL, don't capture it as a request\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      if (isString(url) && xhrInfo.method === 'POST' && url.match(/sentry_key/)) {\n        xhr.__sentry_own_request__ = true;\n      }\n\n      const onreadystatechangeHandler = function (): void {\n        if (xhr.readyState === 4) {\n          try {\n            // touching statusCode in some platforms throws\n            // an exception\n            xhrInfo.status_code = xhr.status;\n          } catch (e) {\n            /* do nothing */\n          }\n\n          triggerHandlers('xhr', {\n            args,\n            endTimestamp: Date.now(),\n            startTimestamp: Date.now(),\n            xhr,\n          });\n        }\n      };\n\n      if ('onreadystatechange' in xhr && typeof xhr.onreadystatechange === 'function') {\n        fill(xhr, 'onreadystatechange', function (original: WrappedFunction): Function {\n          return function (...readyStateArgs: any[]): void {\n            onreadystatechangeHandler();\n            return original.apply(xhr, readyStateArgs);\n          };\n        });\n      } else {\n        xhr.addEventListener('readystatechange', onreadystatechangeHandler);\n      }\n\n      return originalOpen.apply(xhr, args);\n    };\n  });\n\n  fill(xhrproto, 'send', function (originalSend: () => void): () => void {\n    return function (this: SentryWrappedXMLHttpRequest, ...args: any[]): void {\n      if (this.__sentry_xhr__ && args[0] !== undefined) {\n        this.__sentry_xhr__.body = args[0];\n      }\n\n      triggerHandlers('xhr', {\n        args,\n        startTimestamp: Date.now(),\n        xhr: this,\n      });\n\n      return originalSend.apply(this, args);\n    };\n  });\n}\n\nlet lastHref: string;\n\n/** JSDoc */\nfunction instrumentHistory(): void {\n  if (!supportsHistory()) {\n    return;\n  }\n\n  const oldOnPopState = global.onpopstate;\n  global.onpopstate = function (this: WindowEventHandlers, ...args: any[]): any {\n    const to = global.location.href;\n    // keep track of the current URL state, as we always receive only the updated state\n    const from = lastHref;\n    lastHref = to;\n    triggerHandlers('history', {\n      from,\n      to,\n    });\n    if (oldOnPopState) {\n      // Apparently this can throw in Firefox when incorrectly implemented plugin is installed.\n      // https://github.com/getsentry/sentry-javascript/issues/3344\n      // https://github.com/bugsnag/bugsnag-js/issues/469\n      try {\n        return oldOnPopState.apply(this, args);\n      } catch (_oO) {\n        // no-empty\n      }\n    }\n  };\n\n  /** @hidden */\n  function historyReplacementFunction(originalHistoryFunction: () => void): () => void {\n    return function (this: History, ...args: any[]): void {\n      const url = args.length > 2 ? args[2] : undefined;\n      if (url) {\n        // coerce to string (this is what pushState does)\n        const from = lastHref;\n        const to = String(url);\n        // keep track of the current URL state, as we always receive only the updated state\n        lastHref = to;\n        triggerHandlers('history', {\n          from,\n          to,\n        });\n      }\n      return originalHistoryFunction.apply(this, args);\n    };\n  }\n\n  fill(global.history, 'pushState', historyReplacementFunction);\n  fill(global.history, 'replaceState', historyReplacementFunction);\n}\n\nconst debounceDuration = 1000;\nlet debounceTimerID: number | undefined;\nlet lastCapturedEvent: Event | undefined;\n\n/**\n * Decide whether the current event should finish the debounce of previously captured one.\n * @param previous previously captured event\n * @param current event to be captured\n */\nfunction shouldShortcircuitPreviousDebounce(previous: Event | undefined, current: Event): boolean {\n  // If there was no previous event, it should always be swapped for the new one.\n  if (!previous) {\n    return true;\n  }\n\n  // If both events have different type, then user definitely performed two separate actions. e.g. click + keypress.\n  if (previous.type !== current.type) {\n    return true;\n  }\n\n  try {\n    // If both events have the same type, it's still possible that actions were performed on different targets.\n    // e.g. 2 clicks on different buttons.\n    if (previous.target !== current.target) {\n      return true;\n    }\n  } catch (e) {\n    // just accessing `target` property can throw an exception in some rare circumstances\n    // see: https://github.com/getsentry/sentry-javascript/issues/838\n  }\n\n  // If both events have the same type _and_ same `target` (an element which triggered an event, _not necessarily_\n  // to which an event listener was attached), we treat them as the same action, as we want to capture\n  // only one breadcrumb. e.g. multiple clicks on the same button, or typing inside a user input box.\n  return false;\n}\n\n/**\n * Decide whether an event should be captured.\n * @param event event to be captured\n */\nfunction shouldSkipDOMEvent(event: Event): boolean {\n  // We are only interested in filtering `keypress` events for now.\n  if (event.type !== 'keypress') {\n    return false;\n  }\n\n  try {\n    const target = event.target as HTMLElement;\n\n    if (!target || !target.tagName) {\n      return true;\n    }\n\n    // Only consider keypress events on actual input elements. This will disregard keypresses targeting body\n    // e.g.tabbing through elements, hotkeys, etc.\n    if (target.tagName === 'INPUT' || target.tagName === 'TEXTAREA' || target.isContentEditable) {\n      return false;\n    }\n  } catch (e) {\n    // just accessing `target` property can throw an exception in some rare circumstances\n    // see: https://github.com/getsentry/sentry-javascript/issues/838\n  }\n\n  return true;\n}\n\n/**\n * Wraps addEventListener to capture UI breadcrumbs\n * @param handler function that will be triggered\n * @param globalListener indicates whether event was captured by the global event listener\n * @returns wrapped breadcrumb events handler\n * @hidden\n */\nfunction makeDOMEventHandler(handler: Function, globalListener: boolean = false): (event: Event) => void {\n  return (event: Event): void => {\n    // It's possible this handler might trigger multiple times for the same\n    // event (e.g. event propagation through node ancestors).\n    // Ignore if we've already captured that event.\n    if (!event || lastCapturedEvent === event) {\n      return;\n    }\n\n    // We always want to skip _some_ events.\n    if (shouldSkipDOMEvent(event)) {\n      return;\n    }\n\n    const name = event.type === 'keypress' ? 'input' : event.type;\n\n    // If there is no debounce timer, it means that we can safely capture the new event and store it for future comparisons.\n    if (debounceTimerID === undefined) {\n      handler({\n        event: event,\n        name,\n        global: globalListener,\n      });\n      lastCapturedEvent = event;\n    }\n    // If there is a debounce awaiting, see if the new event is different enough to treat it as a unique one.\n    // If that's the case, emit the previous event and store locally the newly-captured DOM event.\n    else if (shouldShortcircuitPreviousDebounce(lastCapturedEvent, event)) {\n      handler({\n        event: event,\n        name,\n        global: globalListener,\n      });\n      lastCapturedEvent = event;\n    }\n\n    // Start a new debounce timer that will prevent us from capturing multiple events that should be grouped together.\n    clearTimeout(debounceTimerID);\n    debounceTimerID = global.setTimeout(() => {\n      debounceTimerID = undefined;\n    }, debounceDuration);\n  };\n}\n\ntype AddEventListener = (\n  type: string,\n  listener: EventListenerOrEventListenerObject,\n  options?: boolean | AddEventListenerOptions,\n) => void;\ntype RemoveEventListener = (\n  type: string,\n  listener: EventListenerOrEventListenerObject,\n  options?: boolean | EventListenerOptions,\n) => void;\n\ntype InstrumentedElement = Element & {\n  __sentry_instrumentation_handlers__?: {\n    [key in 'click' | 'keypress']?: {\n      handler?: Function;\n      /** The number of custom listeners attached to this element */\n      refCount: number;\n    };\n  };\n};\n\n/** JSDoc */\nfunction instrumentDOM(): void {\n  if (!('document' in global)) {\n    return;\n  }\n\n  // Make it so that any click or keypress that is unhandled / bubbled up all the way to the document triggers our dom\n  // handlers. (Normally we have only one, which captures a breadcrumb for each click or keypress.) Do this before\n  // we instrument `addEventListener` so that we don't end up attaching this handler twice.\n  const triggerDOMHandler = triggerHandlers.bind(null, 'dom');\n  const globalDOMEventHandler = makeDOMEventHandler(triggerDOMHandler, true);\n  global.document.addEventListener('click', globalDOMEventHandler, false);\n  global.document.addEventListener('keypress', globalDOMEventHandler, false);\n\n  // After hooking into click and keypress events bubbled up to `document`, we also hook into user-handled\n  // clicks & keypresses, by adding an event listener of our own to any element to which they add a listener. That\n  // way, whenever one of their handlers is triggered, ours will be, too. (This is needed because their handler\n  // could potentially prevent the event from bubbling up to our global listeners. This way, our handler are still\n  // guaranteed to fire at least once.)\n  ['EventTarget', 'Node'].forEach((target: string) => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    const proto = (global as any)[target] && (global as any)[target].prototype;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, no-prototype-builtins\n    if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty('addEventListener')) {\n      return;\n    }\n\n    fill(proto, 'addEventListener', function (originalAddEventListener: AddEventListener): AddEventListener {\n      return function (\n        this: Element,\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n        options?: boolean | AddEventListenerOptions,\n      ): AddEventListener {\n        if (type === 'click' || type == 'keypress') {\n          try {\n            const el = this as InstrumentedElement;\n            const handlers = (el.__sentry_instrumentation_handlers__ = el.__sentry_instrumentation_handlers__ || {});\n            const handlerForType = (handlers[type] = handlers[type] || { refCount: 0 });\n\n            if (!handlerForType.handler) {\n              const handler = makeDOMEventHandler(triggerDOMHandler);\n              handlerForType.handler = handler;\n              originalAddEventListener.call(this, type, handler, options);\n            }\n\n            handlerForType.refCount += 1;\n          } catch (e) {\n            // Accessing dom properties is always fragile.\n            // Also allows us to skip `addEventListenrs` calls with no proper `this` context.\n          }\n        }\n\n        return originalAddEventListener.call(this, type, listener, options);\n      };\n    });\n\n    fill(\n      proto,\n      'removeEventListener',\n      function (originalRemoveEventListener: RemoveEventListener): RemoveEventListener {\n        return function (\n          this: Element,\n          type: string,\n          listener: EventListenerOrEventListenerObject,\n          options?: boolean | EventListenerOptions,\n        ): () => void {\n          if (type === 'click' || type == 'keypress') {\n            try {\n              const el = this as InstrumentedElement;\n              const handlers = el.__sentry_instrumentation_handlers__ || {};\n              const handlerForType = handlers[type];\n\n              if (handlerForType) {\n                handlerForType.refCount -= 1;\n                // If there are no longer any custom handlers of the current type on this element, we can remove ours, too.\n                if (handlerForType.refCount <= 0) {\n                  originalRemoveEventListener.call(this, type, handlerForType.handler, options);\n                  handlerForType.handler = undefined;\n                  delete handlers[type]; // eslint-disable-line @typescript-eslint/no-dynamic-delete\n                }\n\n                // If there are no longer any custom handlers of any type on this element, cleanup everything.\n                if (Object.keys(handlers).length === 0) {\n                  delete el.__sentry_instrumentation_handlers__;\n                }\n              }\n            } catch (e) {\n              // Accessing dom properties is always fragile.\n              // Also allows us to skip `addEventListenrs` calls with no proper `this` context.\n            }\n          }\n\n          return originalRemoveEventListener.call(this, type, listener, options);\n        };\n      },\n    );\n  });\n}\n\nlet _oldOnErrorHandler: OnErrorEventHandler = null;\n/** JSDoc */\nfunction instrumentError(): void {\n  _oldOnErrorHandler = global.onerror;\n\n  global.onerror = function (msg: any, url: any, line: any, column: any, error: any): boolean {\n    triggerHandlers('error', {\n      column,\n      error,\n      line,\n      msg,\n      url,\n    });\n\n    if (_oldOnErrorHandler) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnErrorHandler.apply(this, arguments);\n    }\n\n    return false;\n  };\n}\n\nlet _oldOnUnhandledRejectionHandler: ((e: any) => void) | null = null;\n/** JSDoc */\nfunction instrumentUnhandledRejection(): void {\n  _oldOnUnhandledRejectionHandler = global.onunhandledrejection;\n\n  global.onunhandledrejection = function (e: any): boolean {\n    triggerHandlers('unhandledrejection', e);\n\n    if (_oldOnUnhandledRejectionHandler) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnUnhandledRejectionHandler.apply(this, arguments);\n    }\n\n    return true;\n  };\n}\n","/* eslint-disable @typescript-eslint/explicit-function-return-type */\n/* eslint-disable @typescript-eslint/typedef */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { isThenable } from './is';\n\n/** SyncPromise internal states */\nconst enum States {\n  /** Pending */\n  PENDING = 0,\n  /** Resolved / OK */\n  RESOLVED = 1,\n  /** Rejected / Error */\n  REJECTED = 2,\n}\n\n// Overloads so we can call resolvedSyncPromise without arguments and generic argument\nexport function resolvedSyncPromise(): PromiseLike<void>;\nexport function resolvedSyncPromise<T>(value: T | PromiseLike<T>): PromiseLike<T>;\n\n/**\n * Creates a resolved sync promise.\n *\n * @param value the value to resolve the promise with\n * @returns the resolved sync promise\n */\nexport function resolvedSyncPromise<T>(value?: T | PromiseLike<T>): PromiseLike<T> {\n  return new SyncPromise(resolve => {\n    resolve(value);\n  });\n}\n\n/**\n * Creates a rejected sync promise.\n *\n * @param value the value to reject the promise with\n * @returns the rejected sync promise\n */\nexport function rejectedSyncPromise<T = never>(reason?: any): PromiseLike<T> {\n  return new SyncPromise((_, reject) => {\n    reject(reason);\n  });\n}\n\n/**\n * Thenable class that behaves like a Promise and follows it's interface\n * but is not async internally\n */\nclass SyncPromise<T> implements PromiseLike<T> {\n  private _state: States = States.PENDING;\n  private _handlers: Array<[boolean, (value: T) => void, (reason: any) => any]> = [];\n  private _value: any;\n\n  public constructor(\n    executor: (resolve: (value?: T | PromiseLike<T> | null) => void, reject: (reason?: any) => void) => void,\n  ) {\n    try {\n      executor(this._resolve, this._reject);\n    } catch (e) {\n      this._reject(e);\n    }\n  }\n\n  /** JSDoc */\n  public then<TResult1 = T, TResult2 = never>(\n    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | null,\n    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null,\n  ): PromiseLike<TResult1 | TResult2> {\n    return new SyncPromise((resolve, reject) => {\n      this._handlers.push([\n        false,\n        result => {\n          if (!onfulfilled) {\n            // TODO: ¯\\_(ツ)_/¯\n            // TODO: FIXME\n            resolve(result as any);\n          } else {\n            try {\n              resolve(onfulfilled(result));\n            } catch (e) {\n              reject(e);\n            }\n          }\n        },\n        reason => {\n          if (!onrejected) {\n            reject(reason);\n          } else {\n            try {\n              resolve(onrejected(reason));\n            } catch (e) {\n              reject(e);\n            }\n          }\n        },\n      ]);\n      this._executeHandlers();\n    });\n  }\n\n  /** JSDoc */\n  public catch<TResult = never>(\n    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | null,\n  ): PromiseLike<T | TResult> {\n    return this.then(val => val, onrejected);\n  }\n\n  /** JSDoc */\n  public finally<TResult>(onfinally?: (() => void) | null): PromiseLike<TResult> {\n    return new SyncPromise<TResult>((resolve, reject) => {\n      let val: TResult | any;\n      let isRejected: boolean;\n\n      return this.then(\n        value => {\n          isRejected = false;\n          val = value;\n          if (onfinally) {\n            onfinally();\n          }\n        },\n        reason => {\n          isRejected = true;\n          val = reason;\n          if (onfinally) {\n            onfinally();\n          }\n        },\n      ).then(() => {\n        if (isRejected) {\n          reject(val);\n          return;\n        }\n\n        resolve(val as unknown as any);\n      });\n    });\n  }\n\n  /** JSDoc */\n  private readonly _resolve = (value?: T | PromiseLike<T> | null) => {\n    this._setResult(States.RESOLVED, value);\n  };\n\n  /** JSDoc */\n  private readonly _reject = (reason?: any) => {\n    this._setResult(States.REJECTED, reason);\n  };\n\n  /** JSDoc */\n  private readonly _setResult = (state: States, value?: T | PromiseLike<T> | any) => {\n    if (this._state !== States.PENDING) {\n      return;\n    }\n\n    if (isThenable(value)) {\n      void (value as PromiseLike<T>).then(this._resolve, this._reject);\n      return;\n    }\n\n    this._state = state;\n    this._value = value;\n\n    this._executeHandlers();\n  };\n\n  /** JSDoc */\n  private readonly _executeHandlers = () => {\n    if (this._state === States.PENDING) {\n      return;\n    }\n\n    const cachedHandlers = this._handlers.slice();\n    this._handlers = [];\n\n    cachedHandlers.forEach(handler => {\n      if (handler[0]) {\n        return;\n      }\n\n      if (this._state === States.RESOLVED) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        handler[1](this._value as unknown as any);\n      }\n\n      if (this._state === States.REJECTED) {\n        handler[2](this._value);\n      }\n\n      handler[0] = true;\n    });\n  };\n}\n\nexport { SyncPromise };\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Event, Exception, Mechanism, StackFrame } from '@sentry/types';\n\nimport { getGlobalObject } from './global';\nimport { addNonEnumerableProperty } from './object';\nimport { snipLine } from './string';\n\n/**\n * Extended Window interface that allows for Crypto API usage in IE browsers\n */\ninterface MsCryptoWindow extends Window {\n  msCrypto?: Crypto;\n}\n\n/**\n * UUID4 generator\n *\n * @returns string Generated UUID4.\n */\nexport function uuid4(): string {\n  const global = getGlobalObject() as MsCryptoWindow;\n  const crypto = global.crypto || global.msCrypto;\n\n  if (!(crypto === void 0) && crypto.getRandomValues) {\n    // Use window.crypto API if available\n    const arr = new Uint16Array(8);\n    crypto.getRandomValues(arr);\n\n    // set 4 in byte 7\n    // eslint-disable-next-line no-bitwise\n    arr[3] = (arr[3] & 0xfff) | 0x4000;\n    // set 2 most significant bits of byte 9 to '10'\n    // eslint-disable-next-line no-bitwise\n    arr[4] = (arr[4] & 0x3fff) | 0x8000;\n\n    const pad = (num: number): string => {\n      let v = num.toString(16);\n      while (v.length < 4) {\n        v = `0${v}`;\n      }\n      return v;\n    };\n\n    return (\n      pad(arr[0]) + pad(arr[1]) + pad(arr[2]) + pad(arr[3]) + pad(arr[4]) + pad(arr[5]) + pad(arr[6]) + pad(arr[7])\n    );\n  }\n  // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523\n  return 'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    // eslint-disable-next-line no-bitwise\n    const r = (Math.random() * 16) | 0;\n    // eslint-disable-next-line no-bitwise\n    const v = c === 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n\n/**\n * Parses string form of URL into an object\n * // borrowed from https://tools.ietf.org/html/rfc3986#appendix-B\n * // intentionally using regex and not <a/> href parsing trick because React Native and other\n * // environments where DOM might not be available\n * @returns parsed URL object\n */\nexport function parseUrl(url: string): {\n  host?: string;\n  path?: string;\n  protocol?: string;\n  relative?: string;\n} {\n  if (!url) {\n    return {};\n  }\n\n  const match = url.match(/^(([^:/?#]+):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?$/);\n\n  if (!match) {\n    return {};\n  }\n\n  // coerce to undefined values to empty string so we don't get 'undefined'\n  const query = match[6] || '';\n  const fragment = match[8] || '';\n  return {\n    host: match[4],\n    path: match[5],\n    protocol: match[2],\n    relative: match[5] + query + fragment, // everything minus origin\n  };\n}\n\nfunction getFirstException(event: Event): Exception | undefined {\n  return event.exception && event.exception.values ? event.exception.values[0] : undefined;\n}\n\n/**\n * Extracts either message or type+value from an event that can be used for user-facing logs\n * @returns event's description\n */\nexport function getEventDescription(event: Event): string {\n  const { message, event_id: eventId } = event;\n  if (message) {\n    return message;\n  }\n\n  const firstException = getFirstException(event);\n  if (firstException) {\n    if (firstException.type && firstException.value) {\n      return `${firstException.type}: ${firstException.value}`;\n    }\n    return firstException.type || firstException.value || eventId || '<unknown>';\n  }\n  return eventId || '<unknown>';\n}\n\n/**\n * Adds exception values, type and value to an synthetic Exception.\n * @param event The event to modify.\n * @param value Value of the exception.\n * @param type Type of the exception.\n * @hidden\n */\nexport function addExceptionTypeValue(event: Event, value?: string, type?: string): void {\n  const exception = (event.exception = event.exception || {});\n  const values = (exception.values = exception.values || []);\n  const firstException = (values[0] = values[0] || {});\n  if (!firstException.value) {\n    firstException.value = value || '';\n  }\n  if (!firstException.type) {\n    firstException.type = type || 'Error';\n  }\n}\n\n/**\n * Adds exception mechanism data to a given event. Uses defaults if the second parameter is not passed.\n *\n * @param event The event to modify.\n * @param newMechanism Mechanism data to add to the event.\n * @hidden\n */\nexport function addExceptionMechanism(event: Event, newMechanism?: Partial<Mechanism>): void {\n  const firstException = getFirstException(event);\n  if (!firstException) {\n    return;\n  }\n\n  const defaultMechanism = { type: 'generic', handled: true };\n  const currentMechanism = firstException.mechanism;\n  firstException.mechanism = { ...defaultMechanism, ...currentMechanism, ...newMechanism };\n\n  if (newMechanism && 'data' in newMechanism) {\n    const mergedData = { ...(currentMechanism && currentMechanism.data), ...newMechanism.data };\n    firstException.mechanism.data = mergedData;\n  }\n}\n\n// https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string\nconst SEMVER_REGEXP =\n  /^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$/;\n\n/**\n * Represents Semantic Versioning object\n */\ninterface SemVer {\n  major?: number;\n  minor?: number;\n  patch?: number;\n  prerelease?: string;\n  buildmetadata?: string;\n}\n\n/**\n * Parses input into a SemVer interface\n * @param input string representation of a semver version\n */\nexport function parseSemver(input: string): SemVer {\n  const match = input.match(SEMVER_REGEXP) || [];\n  const major = parseInt(match[1], 10);\n  const minor = parseInt(match[2], 10);\n  const patch = parseInt(match[3], 10);\n  return {\n    buildmetadata: match[5],\n    major: isNaN(major) ? undefined : major,\n    minor: isNaN(minor) ? undefined : minor,\n    patch: isNaN(patch) ? undefined : patch,\n    prerelease: match[4],\n  };\n}\n\n/**\n * This function adds context (pre/post/line) lines to the provided frame\n *\n * @param lines string[] containing all lines\n * @param frame StackFrame that will be mutated\n * @param linesOfContext number of context lines we want to add pre/post\n */\nexport function addContextToFrame(lines: string[], frame: StackFrame, linesOfContext: number = 5): void {\n  const lineno = frame.lineno || 0;\n  const maxLines = lines.length;\n  const sourceLine = Math.max(Math.min(maxLines, lineno - 1), 0);\n\n  frame.pre_context = lines\n    .slice(Math.max(0, sourceLine - linesOfContext), sourceLine)\n    .map((line: string) => snipLine(line, 0));\n\n  frame.context_line = snipLine(lines[Math.min(maxLines - 1, sourceLine)], frame.colno || 0);\n\n  frame.post_context = lines\n    .slice(Math.min(sourceLine + 1, maxLines), sourceLine + 1 + linesOfContext)\n    .map((line: string) => snipLine(line, 0));\n}\n\n/**\n * Strip the query string and fragment off of a given URL or path (if present)\n *\n * @param urlPath Full URL or path, including possible query string and/or fragment\n * @returns URL or path without query string or fragment\n */\nexport function stripUrlQueryAndFragment(urlPath: string): string {\n  // eslint-disable-next-line no-useless-escape\n  return urlPath.split(/[\\?#]/, 1)[0];\n}\n\n/**\n * Checks whether or not we've already captured the given exception (note: not an identical exception - the very object\n * in question), and marks it captured if not.\n *\n * This is useful because it's possible for an error to get captured by more than one mechanism. After we intercept and\n * record an error, we rethrow it (assuming we've intercepted it before it's reached the top-level global handlers), so\n * that we don't interfere with whatever effects the error might have had were the SDK not there. At that point, because\n * the error has been rethrown, it's possible for it to bubble up to some other code we've instrumented. If it's not\n * caught after that, it will bubble all the way up to the global handlers (which of course we also instrument). This\n * function helps us ensure that even if we encounter the same error more than once, we only record it the first time we\n * see it.\n *\n * Note: It will ignore primitives (always return `false` and not mark them as seen), as properties can't be set on\n * them. {@link: Object.objectify} can be used on exceptions to convert any that are primitives into their equivalent\n * object wrapper forms so that this check will always work. However, because we need to flag the exact object which\n * will get rethrown, and because that rethrowing happens outside of the event processing pipeline, the objectification\n * must be done before the exception captured.\n *\n * @param A thrown exception to check or flag as having been seen\n * @returns `true` if the exception has already been captured, `false` if not (with the side effect of marking it seen)\n */\nexport function checkOrSetAlreadyCaught(exception: unknown): boolean {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  if (exception && (exception as any).__sentry_captured__) {\n    return true;\n  }\n\n  try {\n    // set it this way rather than by assignment so that it's not ennumerable and therefore isn't recorded by the\n    // `ExtraErrorData` integration\n    addNonEnumerableProperty(exception as { [key: string]: unknown }, '__sentry_captured__', true);\n  } catch (err) {\n    // `exception` is a primitive, so we can't mark it seen\n  }\n\n  return false;\n}\n","import { Primitive } from '@sentry/types';\n\nimport { isNaN, isSyntheticEvent } from './is';\nimport { memoBuilder, MemoFunc } from './memo';\nimport { convertToPlainObject } from './object';\nimport { getFunctionName } from './stacktrace';\n\ntype Prototype = { constructor: (...args: unknown[]) => unknown };\n// This is a hack to placate TS, relying on the fact that technically, arrays are objects with integer keys. Normally we\n// think of those keys as actual numbers, but `arr['0']` turns out to work just as well as `arr[0]`, and doing it this\n// way lets us use a single type in the places where behave as if we are only dealing with objects, even if some of them\n// might be arrays.\ntype ObjOrArray<T> = { [key: string]: T };\n\n/**\n * Recursively normalizes the given object.\n *\n * - Creates a copy to prevent original input mutation\n * - Skips non-enumerable properties\n * - When stringifying, calls `toJSON` if implemented\n * - Removes circular references\n * - Translates non-serializable values (`undefined`/`NaN`/functions) to serializable format\n * - Translates known global objects/classes to a string representations\n * - Takes care of `Error` object serialization\n * - Optionally limits depth of final output\n * - Optionally limits number of properties/elements included in any single object/array\n *\n * @param input The object to be normalized.\n * @param depth The max depth to which to normalize the object. (Anything deeper stringified whole.)\n * @param maxProperties The max number of elements or properties to be included in any single array or\n * object in the normallized output..\n * @returns A normalized version of the object, or `\"**non-serializable**\"` if any errors are thrown during normalization.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function normalize(input: unknown, depth: number = +Infinity, maxProperties: number = +Infinity): any {\n  try {\n    // since we're at the outermost level, we don't provide a key\n    return visit('', input, depth, maxProperties);\n  } catch (err) {\n    return { ERROR: `**non-serializable** (${err})` };\n  }\n}\n\n/** JSDoc */\nexport function normalizeToSize<T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  object: { [key: string]: any },\n  // Default Node.js REPL depth\n  depth: number = 3,\n  // 100kB, as 200kB is max payload size, so half sounds reasonable\n  maxSize: number = 100 * 1024,\n): T {\n  const normalized = normalize(object, depth);\n\n  if (jsonSize(normalized) > maxSize) {\n    return normalizeToSize(object, depth - 1, maxSize);\n  }\n\n  return normalized as T;\n}\n\n/**\n * Visits a node to perform normalization on it\n *\n * @param key The key corresponding to the given node\n * @param value The node to be visited\n * @param depth Optional number indicating the maximum recursion depth\n * @param maxProperties Optional maximum number of properties/elements included in any single object/array\n * @param memo Optional Memo class handling decycling\n */\nfunction visit(\n  key: string,\n  value: unknown,\n  depth: number = +Infinity,\n  maxProperties: number = +Infinity,\n  memo: MemoFunc = memoBuilder(),\n): Primitive | ObjOrArray<unknown> {\n  const [memoize, unmemoize] = memo;\n\n  // Get the simple cases out of the way first\n  if (value === null || (['number', 'boolean', 'string'].includes(typeof value) && !isNaN(value))) {\n    return value as Primitive;\n  }\n\n  const stringified = stringifyValue(key, value);\n\n  // Anything we could potentially dig into more (objects or arrays) will have come back as `\"[object XXXX]\"`.\n  // Everything else will have already been serialized, so if we don't see that pattern, we're done.\n  if (!stringified.startsWith('[object ')) {\n    return stringified;\n  }\n\n  // From here on, we can assert that `value` is either an object or an array.\n\n  // Do not normalize objects that we know have already been normalized. As a general rule, the\n  // \"__sentry_skip_normalization__\" property should only be used sparingly and only should only be set on objects that\n  // have already been normalized.\n  if ((value as ObjOrArray<unknown>)['__sentry_skip_normalization__']) {\n    return value as ObjOrArray<unknown>;\n  }\n\n  // We're also done if we've reached the max depth\n  if (depth === 0) {\n    // At this point we know `serialized` is a string of the form `\"[object XXXX]\"`. Clean it up so it's just `\"[XXXX]\"`.\n    return stringified.replace('object ', '');\n  }\n\n  // If we've already visited this branch, bail out, as it's circular reference. If not, note that we're seeing it now.\n  if (memoize(value)) {\n    return '[Circular ~]';\n  }\n\n  // If the value has a `toJSON` method, we call it to extract more information\n  const valueWithToJSON = value as unknown & { toJSON?: () => unknown };\n  if (valueWithToJSON && typeof valueWithToJSON.toJSON === 'function') {\n    try {\n      const jsonValue = valueWithToJSON.toJSON();\n      // We need to normalize the return value of `.toJSON()` in case it has circular references\n      return visit('', jsonValue, depth - 1, maxProperties, memo);\n    } catch (err) {\n      // pass (The built-in `toJSON` failed, but we can still try to do it ourselves)\n    }\n  }\n\n  // At this point we know we either have an object or an array, we haven't seen it before, and we're going to recurse\n  // because we haven't yet reached the max depth. Create an accumulator to hold the results of visiting each\n  // property/entry, and keep track of the number of items we add to it.\n  const normalized = (Array.isArray(value) ? [] : {}) as ObjOrArray<unknown>;\n  let numAdded = 0;\n\n  // Before we begin, convert`Error` and`Event` instances into plain objects, since some of each of their relevant\n  // properties are non-enumerable and otherwise would get missed.\n  const visitable = convertToPlainObject(value as ObjOrArray<unknown>);\n\n  for (const visitKey in visitable) {\n    // Avoid iterating over fields in the prototype if they've somehow been exposed to enumeration.\n    if (!Object.prototype.hasOwnProperty.call(visitable, visitKey)) {\n      continue;\n    }\n\n    if (numAdded >= maxProperties) {\n      normalized[visitKey] = '[MaxProperties ~]';\n      break;\n    }\n\n    // Recursively visit all the child nodes\n    const visitValue = visitable[visitKey];\n    normalized[visitKey] = visit(visitKey, visitValue, depth - 1, maxProperties, memo);\n\n    numAdded += 1;\n  }\n\n  // Once we've visited all the branches, remove the parent from memo storage\n  unmemoize(value);\n\n  // Return accumulated values\n  return normalized;\n}\n\n// TODO remove this in v7 (this means the method will no longer be exported, under any name)\nexport { visit as walk };\n\n/**\n * Stringify the given value. Handles various known special values and types.\n *\n * Not meant to be used on simple primitives which already have a string representation, as it will, for example, turn\n * the number 1231 into \"[Object Number]\", nor on `null`, as it will throw.\n *\n * @param value The value to stringify\n * @returns A stringified representation of the given value\n */\nfunction stringifyValue(\n  key: unknown,\n  // this type is a tiny bit of a cheat, since this function does handle NaN (which is technically a number), but for\n  // our internal use, it'll do\n  value: Exclude<unknown, string | number | boolean | null>,\n): string {\n  try {\n    if (key === 'domain' && value && typeof value === 'object' && (value as { _events: unknown })._events) {\n      return '[Domain]';\n    }\n\n    if (key === 'domainEmitter') {\n      return '[DomainEmitter]';\n    }\n\n    // It's safe to use `global`, `window`, and `document` here in this manner, as we are asserting using `typeof` first\n    // which won't throw if they are not present.\n\n    if (typeof global !== 'undefined' && value === global) {\n      return '[Global]';\n    }\n\n    // eslint-disable-next-line no-restricted-globals\n    if (typeof window !== 'undefined' && value === window) {\n      return '[Window]';\n    }\n\n    // eslint-disable-next-line no-restricted-globals\n    if (typeof document !== 'undefined' && value === document) {\n      return '[Document]';\n    }\n\n    // React's SyntheticEvent thingy\n    if (isSyntheticEvent(value)) {\n      return '[SyntheticEvent]';\n    }\n\n    if (typeof value === 'number' && value !== value) {\n      return '[NaN]';\n    }\n\n    // this catches `undefined` (but not `null`, which is a primitive and can be serialized on its own)\n    if (value === void 0) {\n      return '[undefined]';\n    }\n\n    if (typeof value === 'function') {\n      return `[Function: ${getFunctionName(value)}]`;\n    }\n\n    if (typeof value === 'symbol') {\n      return `[${String(value)}]`;\n    }\n\n    // stringified BigInts are indistinguishable from regular numbers, so we need to label them to avoid confusion\n    if (typeof value === 'bigint') {\n      return `[BigInt: ${String(value)}]`;\n    }\n\n    // Now that we've knocked out all the special cases and the primitives, all we have left are objects. Simply casting\n    // them to strings means that instances of classes which haven't defined their `toStringTag` will just come out as\n    // `\"[object Object]\"`. If we instead look at the constructor's name (which is the same as the name of the class),\n    // we can make sure that only plain objects come out that way.\n    return `[object ${(Object.getPrototypeOf(value) as Prototype).constructor.name}]`;\n  } catch (err) {\n    return `**non-serializable** (${err})`;\n  }\n}\n\n/** Calculates bytes size of input string */\nfunction utf8Length(value: string): number {\n  // eslint-disable-next-line no-bitwise\n  return ~-encodeURI(value).split(/%..|./).length;\n}\n\n/** Calculates bytes size of input object */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction jsonSize(value: any): number {\n  return utf8Length(JSON.stringify(value));\n}\n","/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nexport type MemoFunc = [\n  // memoize\n  (obj: any) => boolean,\n  // unmemoize\n  (obj: any) => void,\n];\n\n/**\n * Helper to decycle json objects\n */\nexport function memoBuilder(): MemoFunc {\n  const hasWeakSet = typeof WeakSet === 'function';\n  const inner: any = hasWeakSet ? new WeakSet() : [];\n  function memoize(obj: any): boolean {\n    if (hasWeakSet) {\n      if (inner.has(obj)) {\n        return true;\n      }\n      inner.add(obj);\n      return false;\n    }\n    // eslint-disable-next-line @typescript-eslint/prefer-for-of\n    for (let i = 0; i < inner.length; i++) {\n      const value = inner[i];\n      if (value === obj) {\n        return true;\n      }\n    }\n    inner.push(obj);\n    return false;\n  }\n\n  function unmemoize(obj: any): void {\n    if (hasWeakSet) {\n      inner.delete(obj);\n    } else {\n      for (let i = 0; i < inner.length; i++) {\n        if (inner[i] === obj) {\n          inner.splice(i, 1);\n          break;\n        }\n      }\n    }\n  }\n  return [memoize, unmemoize];\n}\n","import { SentryError } from './error';\nimport { rejectedSyncPromise, resolvedSyncPromise, SyncPromise } from './syncpromise';\n\nexport interface PromiseBuffer<T> {\n  // exposes the internal array so tests can assert on the state of it.\n  // XXX: this really should not be public api.\n  $: Array<PromiseLike<T>>;\n  add(taskProducer: () => PromiseLike<T>): PromiseLike<T>;\n  drain(timeout?: number): PromiseLike<boolean>;\n}\n\n/**\n * Creates an new PromiseBuffer object with the specified limit\n * @param limit max number of promises that can be stored in the buffer\n */\nexport function makePromiseBuffer<T>(limit?: number): PromiseBuffer<T> {\n  const buffer: Array<PromiseLike<T>> = [];\n\n  function isReady(): boolean {\n    return limit === undefined || buffer.length < limit;\n  }\n\n  /**\n   * Remove a promise from the queue.\n   *\n   * @param task Can be any PromiseLike<T>\n   * @returns Removed promise.\n   */\n  function remove(task: PromiseLike<T>): PromiseLike<T> {\n    return buffer.splice(buffer.indexOf(task), 1)[0];\n  }\n\n  /**\n   * Add a promise (representing an in-flight action) to the queue, and set it to remove itself on fulfillment.\n   *\n   * @param taskProducer A function producing any PromiseLike<T>; In previous versions this used to be `task:\n   *        PromiseLike<T>`, but under that model, Promises were instantly created on the call-site and their executor\n   *        functions therefore ran immediately. Thus, even if the buffer was full, the action still happened. By\n   *        requiring the promise to be wrapped in a function, we can defer promise creation until after the buffer\n   *        limit check.\n   * @returns The original promise.\n   */\n  function add(taskProducer: () => PromiseLike<T>): PromiseLike<T> {\n    if (!isReady()) {\n      return rejectedSyncPromise(new SentryError('Not adding Promise due to buffer limit reached.'));\n    }\n\n    // start the task and add its promise to the queue\n    const task = taskProducer();\n    if (buffer.indexOf(task) === -1) {\n      buffer.push(task);\n    }\n    void task\n      .then(() => remove(task))\n      // Use `then(null, rejectionHandler)` rather than `catch(rejectionHandler)` so that we can use `PromiseLike`\n      // rather than `Promise`. `PromiseLike` doesn't have a `.catch` method, making its polyfill smaller. (ES5 didn't\n      // have promises, so TS has to polyfill when down-compiling.)\n      .then(null, () =>\n        remove(task).then(null, () => {\n          // We have to add another catch here because `remove()` starts a new promise chain.\n        }),\n      );\n    return task;\n  }\n\n  /**\n   * Wait for all promises in the queue to resolve or for timeout to expire, whichever comes first.\n   *\n   * @param timeout The time, in ms, after which to resolve to `false` if the queue is still non-empty. Passing `0` (or\n   * not passing anything) will make the promise wait as long as it takes for the queue to drain before resolving to\n   * `true`.\n   * @returns A promise which will resolve to `true` if the queue is already empty or drains before the timeout, and\n   * `false` otherwise\n   */\n  function drain(timeout?: number): PromiseLike<boolean> {\n    return new SyncPromise<boolean>((resolve, reject) => {\n      let counter = buffer.length;\n\n      if (!counter) {\n        return resolve(true);\n      }\n\n      // wait for `timeout` ms and then resolve to `false` (if not cancelled first)\n      const capturedSetTimeout = setTimeout(() => {\n        if (timeout && timeout > 0) {\n          resolve(false);\n        }\n      }, timeout);\n\n      // if all promises resolve in time, cancel the timer and resolve to `true`\n      buffer.forEach(item => {\n        void resolvedSyncPromise(item).then(() => {\n          // eslint-disable-next-line no-plusplus\n          if (!--counter) {\n            clearTimeout(capturedSetTimeout);\n            resolve(true);\n          }\n        }, reject);\n      });\n    });\n  }\n\n  return {\n    $: buffer,\n    add,\n    drain,\n  };\n}\n","/* eslint-disable deprecation/deprecation */\nimport { Severity, SeverityLevel } from '@sentry/types';\n\n// Note: Ideally the `SeverityLevel` type would be derived from `validSeverityLevels`, but that would mean either\n//\n// a) moving `validSeverityLevels` to `@sentry/types`,\n// b) moving the`SeverityLevel` type here, or\n// c) importing `validSeverityLevels` from here into `@sentry/types`.\n//\n// Option A would make `@sentry/types` a runtime dependency of `@sentry/utils` (not good), and options B and C would\n// create a circular dependency between `@sentry/types` and `@sentry/utils` (also not good). So a TODO accompanying the\n// type, reminding anyone who changes it to change this list also, will have to do.\n\nexport const validSeverityLevels = ['fatal', 'error', 'warning', 'log', 'info', 'debug'];\n\n/**\n * Converts a string-based level into a member of the deprecated {@link Severity} enum.\n *\n * @deprecated `severityFromString` is deprecated. Please use `severityLevelFromString` instead.\n *\n * @param level String representation of Severity\n * @returns Severity\n */\nexport function severityFromString(level: Severity | SeverityLevel | string): Severity {\n  return severityLevelFromString(level) as Severity;\n}\n\n/**\n * Converts a string-based level into a `SeverityLevel`, normalizing it along the way.\n *\n * @param level String representation of desired `SeverityLevel`.\n * @returns The `SeverityLevel` corresponding to the given string, or 'log' if the string isn't a valid level.\n */\nexport function severityLevelFromString(level: SeverityLevel | string): SeverityLevel {\n  return (level === 'warn' ? 'warning' : validSeverityLevels.includes(level) ? level : 'log') as SeverityLevel;\n}\n","import { getGlobalObject } from './global';\nimport { dynamicRequire, isNodeEnv } from './node';\n\n/**\n * An object that can return the current timestamp in seconds since the UNIX epoch.\n */\ninterface TimestampSource {\n  nowSeconds(): number;\n}\n\n/**\n * A TimestampSource implementation for environments that do not support the Performance Web API natively.\n *\n * Note that this TimestampSource does not use a monotonic clock. A call to `nowSeconds` may return a timestamp earlier\n * than a previously returned value. We do not try to emulate a monotonic behavior in order to facilitate debugging. It\n * is more obvious to explain \"why does my span have negative duration\" than \"why my spans have zero duration\".\n */\nconst dateTimestampSource: TimestampSource = {\n  nowSeconds: () => Date.now() / 1000,\n};\n\n/**\n * A partial definition of the [Performance Web API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Performance}\n * for accessing a high-resolution monotonic clock.\n */\ninterface Performance {\n  /**\n   * The millisecond timestamp at which measurement began, measured in Unix time.\n   */\n  timeOrigin: number;\n  /**\n   * Returns the current millisecond timestamp, where 0 represents the start of measurement.\n   */\n  now(): number;\n}\n\n/**\n * Returns a wrapper around the native Performance API browser implementation, or undefined for browsers that do not\n * support the API.\n *\n * Wrapping the native API works around differences in behavior from different browsers.\n */\nfunction getBrowserPerformance(): Performance | undefined {\n  const { performance } = getGlobalObject<Window>();\n  if (!performance || !performance.now) {\n    return undefined;\n  }\n\n  // Replace performance.timeOrigin with our own timeOrigin based on Date.now().\n  //\n  // This is a partial workaround for browsers reporting performance.timeOrigin such that performance.timeOrigin +\n  // performance.now() gives a date arbitrarily in the past.\n  //\n  // Additionally, computing timeOrigin in this way fills the gap for browsers where performance.timeOrigin is\n  // undefined.\n  //\n  // The assumption that performance.timeOrigin + performance.now() ~= Date.now() is flawed, but we depend on it to\n  // interact with data coming out of performance entries.\n  //\n  // Note that despite recommendations against it in the spec, browsers implement the Performance API with a clock that\n  // might stop when the computer is asleep (and perhaps under other circumstances). Such behavior causes\n  // performance.timeOrigin + performance.now() to have an arbitrary skew over Date.now(). In laptop computers, we have\n  // observed skews that can be as long as days, weeks or months.\n  //\n  // See https://github.com/getsentry/sentry-javascript/issues/2590.\n  //\n  // BUG: despite our best intentions, this workaround has its limitations. It mostly addresses timings of pageload\n  // transactions, but ignores the skew built up over time that can aversely affect timestamps of navigation\n  // transactions of long-lived web pages.\n  const timeOrigin = Date.now() - performance.now();\n\n  return {\n    now: () => performance.now(),\n    timeOrigin,\n  };\n}\n\n/**\n * Returns the native Performance API implementation from Node.js. Returns undefined in old Node.js versions that don't\n * implement the API.\n */\nfunction getNodePerformance(): Performance | undefined {\n  try {\n    const perfHooks = dynamicRequire(module, 'perf_hooks') as { performance: Performance };\n    return perfHooks.performance;\n  } catch (_) {\n    return undefined;\n  }\n}\n\n/**\n * The Performance API implementation for the current platform, if available.\n */\nconst platformPerformance: Performance | undefined = isNodeEnv() ? getNodePerformance() : getBrowserPerformance();\n\nconst timestampSource: TimestampSource =\n  platformPerformance === undefined\n    ? dateTimestampSource\n    : {\n        nowSeconds: () => (platformPerformance.timeOrigin + platformPerformance.now()) / 1000,\n      };\n\n/**\n * Returns a timestamp in seconds since the UNIX epoch using the Date API.\n */\nexport const dateTimestampInSeconds: () => number = dateTimestampSource.nowSeconds.bind(dateTimestampSource);\n\n/**\n * Returns a timestamp in seconds since the UNIX epoch using either the Performance or Date APIs, depending on the\n * availability of the Performance API.\n *\n * See `usingPerformanceAPI` to test whether the Performance API is used.\n *\n * BUG: Note that because of how browsers implement the Performance API, the clock might stop when the computer is\n * asleep. This creates a skew between `dateTimestampInSeconds` and `timestampInSeconds`. The\n * skew can grow to arbitrary amounts like days, weeks or months.\n * See https://github.com/getsentry/sentry-javascript/issues/2590.\n */\nexport const timestampInSeconds: () => number = timestampSource.nowSeconds.bind(timestampSource);\n\n// Re-exported with an old name for backwards-compatibility.\nexport const timestampWithMs = timestampInSeconds;\n\n/**\n * A boolean that is true when timestampInSeconds uses the Performance API to produce monotonic timestamps.\n */\nexport const usingPerformanceAPI = platformPerformance !== undefined;\n\n/**\n * Internal helper to store what is the source of browserPerformanceTimeOrigin below. For debugging only.\n */\nexport let _browserPerformanceTimeOriginMode: string;\n\n/**\n * The number of milliseconds since the UNIX epoch. This value is only usable in a browser, and only when the\n * performance API is available.\n */\nexport const browserPerformanceTimeOrigin = ((): number | undefined => {\n  // Unfortunately browsers may report an inaccurate time origin data, through either performance.timeOrigin or\n  // performance.timing.navigationStart, which results in poor results in performance data. We only treat time origin\n  // data as reliable if they are within a reasonable threshold of the current time.\n\n  const { performance } = getGlobalObject<Window>();\n  if (!performance || !performance.now) {\n    _browserPerformanceTimeOriginMode = 'none';\n    return undefined;\n  }\n\n  const threshold = 3600 * 1000;\n  const performanceNow = performance.now();\n  const dateNow = Date.now();\n\n  // if timeOrigin isn't available set delta to threshold so it isn't used\n  const timeOriginDelta = performance.timeOrigin\n    ? Math.abs(performance.timeOrigin + performanceNow - dateNow)\n    : threshold;\n  const timeOriginIsReliable = timeOriginDelta < threshold;\n\n  // While performance.timing.navigationStart is deprecated in favor of performance.timeOrigin, performance.timeOrigin\n  // is not as widely supported. Namely, performance.timeOrigin is undefined in Safari as of writing.\n  // Also as of writing, performance.timing is not available in Web Workers in mainstream browsers, so it is not always\n  // a valid fallback. In the absence of an initial time provided by the browser, fallback to the current time from the\n  // Date API.\n  // eslint-disable-next-line deprecation/deprecation\n  const navigationStart = performance.timing && performance.timing.navigationStart;\n  const hasNavigationStart = typeof navigationStart === 'number';\n  // if navigationStart isn't available set delta to threshold so it isn't used\n  const navigationStartDelta = hasNavigationStart ? Math.abs(navigationStart + performanceNow - dateNow) : threshold;\n  const navigationStartIsReliable = navigationStartDelta < threshold;\n\n  if (timeOriginIsReliable || navigationStartIsReliable) {\n    // Use the more reliable time origin\n    if (timeOriginDelta <= navigationStartDelta) {\n      _browserPerformanceTimeOriginMode = 'timeOrigin';\n      return performance.timeOrigin;\n    } else {\n      _browserPerformanceTimeOriginMode = 'navigationStart';\n      return navigationStart;\n    }\n  }\n\n  // Either both timeOrigin and navigationStart are skewed or neither is available, fallback to Date.\n  _browserPerformanceTimeOriginMode = 'dateNow';\n  return dateNow;\n})();\n","import { TraceparentData } from '@sentry/types';\n\nexport const TRACEPARENT_REGEXP = new RegExp(\n  '^[ \\\\t]*' + // whitespace\n    '([0-9a-f]{32})?' + // trace_id\n    '-?([0-9a-f]{16})?' + // span_id\n    '-?([01])?' + // sampled\n    '[ \\\\t]*$', // whitespace\n);\n\n/**\n * Extract transaction context data from a `sentry-trace` header.\n *\n * @param traceparent Traceparent string\n *\n * @returns Object containing data from the header, or undefined if traceparent string is malformed\n */\nexport function extractTraceparentData(traceparent: string): TraceparentData | undefined {\n  const matches = traceparent.match(TRACEPARENT_REGEXP);\n  if (matches) {\n    let parentSampled: boolean | undefined;\n    if (matches[3] === '1') {\n      parentSampled = true;\n    } else if (matches[3] === '0') {\n      parentSampled = false;\n    }\n    return {\n      traceId: matches[1],\n      parentSampled,\n      parentSpanId: matches[2],\n    };\n  }\n  return undefined;\n}\n","import {\n  Attachment,\n  AttachmentItem,\n  DataCategory,\n  Envelope,\n  EnvelopeItem,\n  EnvelopeItemType,\n  TextEncoderInternal,\n} from '@sentry/types';\n\nimport { dropUndefinedKeys } from './object';\n\n/**\n * Creates an envelope.\n * Make sure to always explicitly provide the generic to this function\n * so that the envelope types resolve correctly.\n */\nexport function createEnvelope<E extends Envelope>(headers: E[0], items: E[1] = []): E {\n  return [headers, items] as E;\n}\n\n/**\n * Add an item to an envelope.\n * Make sure to always explicitly provide the generic to this function\n * so that the envelope types resolve correctly.\n */\nexport function addItemToEnvelope<E extends Envelope>(envelope: E, newItem: E[1][number]): E {\n  const [headers, items] = envelope;\n  return [headers, [...items, newItem]] as E;\n}\n\n/**\n * Convenience function to loop through the items and item types of an envelope.\n * (This function was mostly created because working with envelope types is painful at the moment)\n */\nexport function forEachEnvelopeItem<E extends Envelope>(\n  envelope: Envelope,\n  callback: (envelopeItem: E[1][number], envelopeItemType: E[1][number][0]['type']) => void,\n): void {\n  const envelopeItems = envelope[1];\n  envelopeItems.forEach((envelopeItem: EnvelopeItem) => {\n    const envelopeItemType = envelopeItem[0].type;\n    callback(envelopeItem, envelopeItemType);\n  });\n}\n\nfunction encodeUTF8(input: string, textEncoder?: TextEncoderInternal): Uint8Array {\n  const utf8 = textEncoder || new TextEncoder();\n  return utf8.encode(input);\n}\n\n/**\n * Serializes an envelope.\n */\nexport function serializeEnvelope(envelope: Envelope, textEncoder?: TextEncoderInternal): string | Uint8Array {\n  const [envHeaders, items] = envelope;\n\n  // Initially we construct our envelope as a string and only convert to binary chunks if we encounter binary data\n  let parts: string | Uint8Array[] = JSON.stringify(envHeaders);\n\n  function append(next: string | Uint8Array): void {\n    if (typeof parts === 'string') {\n      parts = typeof next === 'string' ? parts + next : [encodeUTF8(parts, textEncoder), next];\n    } else {\n      parts.push(typeof next === 'string' ? encodeUTF8(next, textEncoder) : next);\n    }\n  }\n\n  for (const item of items) {\n    const [itemHeaders, payload] = item as typeof items[number];\n    append(`\\n${JSON.stringify(itemHeaders)}\\n`);\n    append(typeof payload === 'string' || payload instanceof Uint8Array ? payload : JSON.stringify(payload));\n  }\n\n  return typeof parts === 'string' ? parts : concatBuffers(parts);\n}\n\nfunction concatBuffers(buffers: Uint8Array[]): Uint8Array {\n  const totalLength = buffers.reduce((acc, buf) => acc + buf.length, 0);\n\n  const merged = new Uint8Array(totalLength);\n  let offset = 0;\n  for (const buffer of buffers) {\n    merged.set(buffer, offset);\n    offset += buffer.length;\n  }\n\n  return merged;\n}\n\n/**\n * Creates attachment envelope items\n */\nexport function createAttachmentEnvelopeItem(\n  attachment: Attachment,\n  textEncoder?: TextEncoderInternal,\n): AttachmentItem {\n  const buffer = typeof attachment.data === 'string' ? encodeUTF8(attachment.data, textEncoder) : attachment.data;\n\n  return [\n    dropUndefinedKeys({\n      type: 'attachment',\n      length: buffer.length,\n      filename: attachment.filename,\n      content_type: attachment.contentType,\n      attachment_type: attachment.attachmentType,\n    }),\n    buffer,\n  ];\n}\n\nconst ITEM_TYPE_TO_DATA_CATEGORY_MAP: Record<EnvelopeItemType, DataCategory> = {\n  session: 'session',\n  sessions: 'session',\n  attachment: 'attachment',\n  transaction: 'transaction',\n  event: 'error',\n  client_report: 'internal',\n  user_report: 'default',\n};\n\n/**\n * Maps the type of an envelope item to a data category.\n */\nexport function envelopeItemTypeToDataCategory(type: EnvelopeItemType): DataCategory {\n  return ITEM_TYPE_TO_DATA_CATEGORY_MAP[type];\n}\n","import { TransportMakeRequestResponse } from '@sentry/types';\n\n// Intentionally keeping the key broad, as we don't know for sure what rate limit headers get returned from backend\nexport type RateLimits = Record<string, number>;\n\nexport const DEFAULT_RETRY_AFTER = 60 * 1000; // 60 seconds\n\n/**\n * Extracts Retry-After value from the request header or returns default value\n * @param header string representation of 'Retry-After' header\n * @param now current unix timestamp\n *\n */\nexport function parseRetryAfterHeader(header: string, now: number = Date.now()): number {\n  const headerDelay = parseInt(`${header}`, 10);\n  if (!isNaN(headerDelay)) {\n    return headerDelay * 1000;\n  }\n\n  const headerDate = Date.parse(`${header}`);\n  if (!isNaN(headerDate)) {\n    return headerDate - now;\n  }\n\n  return DEFAULT_RETRY_AFTER;\n}\n\n/**\n * Gets the time that given category is disabled until for rate limiting\n */\nexport function disabledUntil(limits: RateLimits, category: string): number {\n  return limits[category] || limits.all || 0;\n}\n\n/**\n * Checks if a category is rate limited\n */\nexport function isRateLimited(limits: RateLimits, category: string, now: number = Date.now()): boolean {\n  return disabledUntil(limits, category) > now;\n}\n\n/**\n * Update ratelimits from incoming headers.\n * Returns true if headers contains a non-empty rate limiting header.\n */\nexport function updateRateLimits(\n  limits: RateLimits,\n  { statusCode, headers }: TransportMakeRequestResponse,\n  now: number = Date.now(),\n): RateLimits {\n  const updatedRateLimits: RateLimits = {\n    ...limits,\n  };\n\n  // \"The name is case-insensitive.\"\n  // https://developer.mozilla.org/en-US/docs/Web/API/Headers/get\n  const rateLimitHeader = headers && headers['x-sentry-rate-limits'];\n  const retryAfterHeader = headers && headers['retry-after'];\n\n  if (rateLimitHeader) {\n    /**\n     * rate limit headers are of the form\n     *     <header>,<header>,..\n     * where each <header> is of the form\n     *     <retry_after>: <categories>: <scope>: <reason_code>\n     * where\n     *     <retry_after> is a delay in seconds\n     *     <categories> is the event type(s) (error, transaction, etc) being rate limited and is of the form\n     *         <category>;<category>;...\n     *     <scope> is what's being limited (org, project, or key) - ignored by SDK\n     *     <reason_code> is an arbitrary string like \"org_quota\" - ignored by SDK\n     */\n    for (const limit of rateLimitHeader.trim().split(',')) {\n      const [retryAfter, categories] = limit.split(':', 2);\n      const headerDelay = parseInt(retryAfter, 10);\n      const delay = (!isNaN(headerDelay) ? headerDelay : 60) * 1000; // 60sec default\n      if (!categories) {\n        updatedRateLimits.all = now + delay;\n      } else {\n        for (const category of categories.split(';')) {\n          updatedRateLimits[category] = now + delay;\n        }\n      }\n    }\n  } else if (retryAfterHeader) {\n    updatedRateLimits.all = now + parseRetryAfterHeader(retryAfterHeader, now);\n  } else if (statusCode === 429) {\n    updatedRateLimits.all = now + 60 * 1000;\n  }\n\n  return updatedRateLimits;\n}\n","import { Baggage, BaggageObj, HttpHeaderValue, TraceparentData } from '@sentry/types';\n\nimport { isString } from './is';\nimport { logger } from './logger';\n\nexport const BAGGAGE_HEADER_NAME = 'baggage';\n\nexport const SENTRY_BAGGAGE_KEY_PREFIX = 'sentry-';\n\nexport const SENTRY_BAGGAGE_KEY_PREFIX_REGEX = /^sentry-/;\n\n/**\n * Max length of a serialized baggage string\n *\n * https://www.w3.org/TR/baggage/#limits\n */\nexport const MAX_BAGGAGE_STRING_LENGTH = 8192;\n\n/** Create an instance of Baggage */\nexport function createBaggage(initItems: BaggageObj, baggageString: string = '', mutable: boolean = true): Baggage {\n  return [{ ...initItems }, baggageString, mutable];\n}\n\n/** Get a value from baggage */\nexport function getBaggageValue(baggage: Baggage, key: keyof BaggageObj): BaggageObj[keyof BaggageObj] {\n  return baggage[0][key];\n}\n\n/** Add a value to baggage */\nexport function setBaggageValue(baggage: Baggage, key: keyof BaggageObj, value: BaggageObj[keyof BaggageObj]): void {\n  if (isBaggageMutable(baggage)) {\n    baggage[0][key] = value;\n  }\n}\n\n/** Check if the Sentry part of the passed baggage (i.e. the first element in the tuple) is empty */\nexport function isSentryBaggageEmpty(baggage: Baggage): boolean {\n  return Object.keys(baggage[0]).length === 0;\n}\n\n/** Returns Sentry specific baggage values */\nexport function getSentryBaggageItems(baggage: Baggage): BaggageObj {\n  return baggage[0];\n}\n\n/**\n * Returns 3rd party baggage string of @param baggage\n * @param baggage\n */\nexport function getThirdPartyBaggage(baggage: Baggage): string {\n  return baggage[1];\n}\n\n/**\n * Checks if baggage is mutable\n * @param baggage\n * @returns true if baggage is mutable, else false\n */\nexport function isBaggageMutable(baggage: Baggage): boolean {\n  return baggage[2];\n}\n\n/**\n * Sets the passed baggage immutable\n * @param baggage\n */\nexport function setBaggageImmutable(baggage: Baggage): void {\n  baggage[2] = false;\n}\n\n/** Serialize a baggage object */\nexport function serializeBaggage(baggage: Baggage): string {\n  return Object.keys(baggage[0]).reduce((prev, key: keyof BaggageObj) => {\n    const val = baggage[0][key] as string;\n    const baggageEntry = `${SENTRY_BAGGAGE_KEY_PREFIX}${encodeURIComponent(key)}=${encodeURIComponent(val)}`;\n    const newVal = prev === '' ? baggageEntry : `${prev},${baggageEntry}`;\n    if (newVal.length > MAX_BAGGAGE_STRING_LENGTH) {\n      __DEBUG_BUILD__ &&\n        logger.warn(`Not adding key: ${key} with val: ${val} to baggage due to exceeding baggage size limits.`);\n      return prev;\n    } else {\n      return newVal;\n    }\n  }, baggage[1]);\n}\n\n/**\n * Parse a baggage header from a string or a string array and return a Baggage object\n *\n * If @param includeThirdPartyEntries is set to true, third party baggage entries are added to the Baggage object\n * (This is necessary for merging potentially pre-existing baggage headers in outgoing requests with\n * our `sentry-` values)\n */\nexport function parseBaggageHeader(\n  inputBaggageValue: HttpHeaderValue,\n  includeThirdPartyEntries: boolean = false,\n): Baggage {\n  // Adding this check here because we got reports of this function failing due to the input value\n  // not being a string. This debug log might help us determine what's going on here.\n  if ((!Array.isArray(inputBaggageValue) && !isString(inputBaggageValue)) || typeof inputBaggageValue === 'number') {\n    __DEBUG_BUILD__ &&\n      logger.warn(\n        '[parseBaggageHeader] Received input value of incompatible type: ',\n        typeof inputBaggageValue,\n        inputBaggageValue,\n      );\n\n    // Gonna early-return an empty baggage object so that we don't fail later on\n    return createBaggage({}, '');\n  }\n\n  const baggageEntries = (isString(inputBaggageValue) ? inputBaggageValue : inputBaggageValue.join(','))\n    .split(',')\n    .map(entry => entry.trim())\n    .filter(entry => entry !== '' && (includeThirdPartyEntries || SENTRY_BAGGAGE_KEY_PREFIX_REGEX.test(entry)));\n\n  return baggageEntries.reduce(\n    ([baggageObj, baggageString], curr) => {\n      const [key, val] = curr.split('=');\n      if (SENTRY_BAGGAGE_KEY_PREFIX_REGEX.test(key)) {\n        const baggageKey = decodeURIComponent(key.split('-')[1]);\n        return [\n          {\n            ...baggageObj,\n            [baggageKey]: decodeURIComponent(val),\n          },\n          baggageString,\n          true,\n        ];\n      } else {\n        return [baggageObj, baggageString === '' ? curr : `${baggageString},${curr}`, true];\n      }\n    },\n    [{}, '', true],\n  );\n}\n\n/**\n * Merges the baggage header we saved from the incoming request (or meta tag) with\n * a possibly created or modified baggage header by a third party that's been added\n * to the outgoing request header.\n *\n * In case @param headerBaggageString exists, we can safely add the the 3rd party part of @param headerBaggage\n * with our @param incomingBaggage. This is possible because if we modified anything beforehand,\n * it would only affect parts of the sentry baggage (@see Baggage interface).\n *\n * @param incomingBaggage the baggage header of the incoming request that might contain sentry entries\n * @param thirdPartyBaggageHeader possibly existing baggage header string or string[] added from a third\n *        party to the request headers\n *\n * @return a merged and serialized baggage string to be propagated with the outgoing request\n */\nexport function mergeAndSerializeBaggage(incomingBaggage?: Baggage, thirdPartyBaggageHeader?: HttpHeaderValue): string {\n  if (!incomingBaggage && !thirdPartyBaggageHeader) {\n    return '';\n  }\n\n  const headerBaggage = (thirdPartyBaggageHeader && parseBaggageHeader(thirdPartyBaggageHeader, true)) || undefined;\n  const thirdPartyHeaderBaggage = headerBaggage && getThirdPartyBaggage(headerBaggage);\n\n  const finalBaggage = createBaggage((incomingBaggage && incomingBaggage[0]) || {}, thirdPartyHeaderBaggage || '');\n  return serializeBaggage(finalBaggage);\n}\n\n/**\n * Helper function that takes a raw baggage string (if available) and the processed sentry-trace header\n * data (if available), parses the baggage string and creates a Baggage object\n * If there is no baggage string, it will create an empty Baggage object.\n * In a second step, this functions determines if the created Baggage object should be set immutable\n * to prevent mutation of the Sentry data.\n *\n * Extracted this logic to a function because it's duplicated in a lot of places.\n *\n * @param rawBaggageValue\n * @param sentryTraceHeader\n */\nexport function parseBaggageSetMutability(\n  rawBaggageValue: HttpHeaderValue | false | undefined,\n  sentryTraceHeader: TraceparentData | string | false | undefined | null,\n): Baggage {\n  const baggage = parseBaggageHeader(rawBaggageValue || '');\n\n  // Because we are always creating a Baggage object by calling `parseBaggageHeader` above\n  // (either a filled one or an empty one, even if we didn't get a `baggage` header),\n  // we only need to check if we have a sentry-trace header or not. As soon as we have it,\n  // we set baggage immutable. In case we don't get a sentry-trace header, we can assume that\n  // this SDK is the head of the trace and thus we still permit mutation at this time.\n  // There is one exception though, which is that we get a baggage-header with `sentry-`\n  // items but NO sentry-trace header. In this case we also set the baggage immutable for now\n  // but if smoething like this would ever happen, we should revisit this and determine\n  // what this would actually mean for the trace (i.e. is this SDK the head?, what happened\n  // before that we don't have a sentry-trace header?, etc)\n  (sentryTraceHeader || !isSentryBaggageEmpty(baggage)) && setBaggageImmutable(baggage);\n\n  return baggage;\n}\n","import { SerializedSession, Session, SessionContext, SessionStatus } from '@sentry/types';\nimport { dropUndefinedKeys, timestampInSeconds, uuid4 } from '@sentry/utils';\n\n/**\n * Creates a new `Session` object by setting certain default parameters. If optional @param context\n * is passed, the passed properties are applied to the session object.\n *\n * @param context (optional) additional properties to be applied to the returned session object\n *\n * @returns a new `Session` object\n */\nexport function makeSession(context?: Omit<SessionContext, 'started' | 'status'>): Session {\n  // Both timestamp and started are in seconds since the UNIX epoch.\n  const startingTime = timestampInSeconds();\n\n  const session: Session = {\n    sid: uuid4(),\n    init: true,\n    timestamp: startingTime,\n    started: startingTime,\n    duration: 0,\n    status: 'ok',\n    errors: 0,\n    ignoreDuration: false,\n    toJSON: () => sessionToJSON(session),\n  };\n\n  if (context) {\n    updateSession(session, context);\n  }\n\n  return session;\n}\n\n/**\n * Updates a session object with the properties passed in the context.\n *\n * Note that this function mutates the passed object and returns void.\n * (Had to do this instead of returning a new and updated session because closing and sending a session\n * makes an update to the session after it was passed to the sending logic.\n * @see BaseClient.captureSession )\n *\n * @param session the `Session` to update\n * @param context the `SessionContext` holding the properties that should be updated in @param session\n */\n// eslint-disable-next-line complexity\nexport function updateSession(session: Session, context: SessionContext = {}): void {\n  if (context.user) {\n    if (!session.ipAddress && context.user.ip_address) {\n      session.ipAddress = context.user.ip_address;\n    }\n\n    if (!session.did && !context.did) {\n      session.did = context.user.id || context.user.email || context.user.username;\n    }\n  }\n\n  session.timestamp = context.timestamp || timestampInSeconds();\n\n  if (context.ignoreDuration) {\n    session.ignoreDuration = context.ignoreDuration;\n  }\n  if (context.sid) {\n    // Good enough uuid validation. — Kamil\n    session.sid = context.sid.length === 32 ? context.sid : uuid4();\n  }\n  if (context.init !== undefined) {\n    session.init = context.init;\n  }\n  if (!session.did && context.did) {\n    session.did = `${context.did}`;\n  }\n  if (typeof context.started === 'number') {\n    session.started = context.started;\n  }\n  if (session.ignoreDuration) {\n    session.duration = undefined;\n  } else if (typeof context.duration === 'number') {\n    session.duration = context.duration;\n  } else {\n    const duration = session.timestamp - session.started;\n    session.duration = duration >= 0 ? duration : 0;\n  }\n  if (context.release) {\n    session.release = context.release;\n  }\n  if (context.environment) {\n    session.environment = context.environment;\n  }\n  if (!session.ipAddress && context.ipAddress) {\n    session.ipAddress = context.ipAddress;\n  }\n  if (!session.userAgent && context.userAgent) {\n    session.userAgent = context.userAgent;\n  }\n  if (typeof context.errors === 'number') {\n    session.errors = context.errors;\n  }\n  if (context.status) {\n    session.status = context.status;\n  }\n}\n\n/**\n * Closes a session by setting its status and updating the session object with it.\n * Internally calls `updateSession` to update the passed session object.\n *\n * Note that this function mutates the passed session (@see updateSession for explanation).\n *\n * @param session the `Session` object to be closed\n * @param status the `SessionStatus` with which the session was closed. If you don't pass a status,\n *               this function will keep the previously set status, unless it was `'ok'` in which case\n *               it is changed to `'exited'`.\n */\nexport function closeSession(session: Session, status?: Exclude<SessionStatus, 'ok'>): void {\n  let context = {};\n  if (status) {\n    context = { status };\n  } else if (session.status === 'ok') {\n    context = { status: 'exited' };\n  }\n\n  updateSession(session, context);\n}\n\n/**\n * Serializes a passed session object to a JSON object with a slightly different structure.\n * This is necessary because the Sentry backend requires a slightly different schema of a session\n * than the one the JS SDKs use internally.\n *\n * @param session the session to be converted\n *\n * @returns a JSON object of the passed session\n */\nfunction sessionToJSON(session: Session): SerializedSession {\n  return dropUndefinedKeys({\n    sid: `${session.sid}`,\n    init: session.init,\n    // Make sure that sec is converted to ms for date constructor\n    started: new Date(session.started * 1000).toISOString(),\n    timestamp: new Date(session.timestamp * 1000).toISOString(),\n    status: session.status,\n    errors: session.errors,\n    did: typeof session.did === 'number' || typeof session.did === 'string' ? `${session.did}` : undefined,\n    duration: session.duration,\n    attrs: {\n      release: session.release,\n      environment: session.environment,\n      ip_address: session.ipAddress,\n      user_agent: session.userAgent,\n    },\n  });\n}\n","/* eslint-disable max-lines */\nimport {\n  Attachment,\n  Breadcrumb,\n  CaptureContext,\n  Context,\n  Contexts,\n  Event,\n  EventHint,\n  EventProcessor,\n  Extra,\n  Extras,\n  Primitive,\n  RequestSession,\n  Scope as ScopeInterface,\n  ScopeContext,\n  Session,\n  Severity,\n  SeverityLevel,\n  Span,\n  Transaction,\n  User,\n} from '@sentry/types';\nimport {\n  dateTimestampInSeconds,\n  getGlobalSingleton,\n  isPlainObject,\n  isThenable,\n  logger,\n  SyncPromise,\n} from '@sentry/utils';\n\nimport { updateSession } from './session';\n\n/**\n * Absolute maximum number of breadcrumbs added to an event.\n * The `maxBreadcrumbs` option cannot be higher than this value.\n */\nconst MAX_BREADCRUMBS = 100;\n\n/**\n * Holds additional event information. {@link Scope.applyToEvent} will be\n * called by the client before an event will be sent.\n */\nexport class Scope implements ScopeInterface {\n  /** Flag if notifying is happening. */\n  protected _notifyingListeners: boolean;\n\n  /** Callback for client to receive scope changes. */\n  protected _scopeListeners: Array<(scope: Scope) => void>;\n\n  /** Callback list that will be called after {@link applyToEvent}. */\n  protected _eventProcessors: EventProcessor[];\n\n  /** Array of breadcrumbs. */\n  protected _breadcrumbs: Breadcrumb[];\n\n  /** User */\n  protected _user: User;\n\n  /** Tags */\n  protected _tags: { [key: string]: Primitive };\n\n  /** Extra */\n  protected _extra: Extras;\n\n  /** Contexts */\n  protected _contexts: Contexts;\n\n  /** Attachments */\n  protected _attachments: Attachment[];\n\n  /**\n   * A place to stash data which is needed at some point in the SDK's event processing pipeline but which shouldn't get\n   * sent to Sentry\n   */\n  protected _sdkProcessingMetadata: { [key: string]: unknown };\n\n  /** Fingerprint */\n  protected _fingerprint?: string[];\n\n  /** Severity */\n  // eslint-disable-next-line deprecation/deprecation\n  protected _level?: Severity | SeverityLevel;\n\n  /** Transaction Name */\n  protected _transactionName?: string;\n\n  /** Span */\n  protected _span?: Span;\n\n  /** Session */\n  protected _session?: Session;\n\n  /** Request Mode Session Status */\n  protected _requestSession?: RequestSession;\n\n  public constructor() {\n    this._notifyingListeners = false;\n    this._scopeListeners = [];\n    this._eventProcessors = [];\n    this._breadcrumbs = [];\n    this._attachments = [];\n    this._user = {};\n    this._tags = {};\n    this._extra = {};\n    this._contexts = {};\n    this._sdkProcessingMetadata = {};\n  }\n\n  /**\n   * Inherit values from the parent scope.\n   * @param scope to clone.\n   */\n  public static clone(scope?: Scope): Scope {\n    const newScope = new Scope();\n    if (scope) {\n      newScope._breadcrumbs = [...scope._breadcrumbs];\n      newScope._tags = { ...scope._tags };\n      newScope._extra = { ...scope._extra };\n      newScope._contexts = { ...scope._contexts };\n      newScope._user = scope._user;\n      newScope._level = scope._level;\n      newScope._span = scope._span;\n      newScope._session = scope._session;\n      newScope._transactionName = scope._transactionName;\n      newScope._fingerprint = scope._fingerprint;\n      newScope._eventProcessors = [...scope._eventProcessors];\n      newScope._requestSession = scope._requestSession;\n      newScope._attachments = [...scope._attachments];\n    }\n    return newScope;\n  }\n\n  /**\n   * Add internal on change listener. Used for sub SDKs that need to store the scope.\n   * @hidden\n   */\n  public addScopeListener(callback: (scope: Scope) => void): void {\n    this._scopeListeners.push(callback);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addEventProcessor(callback: EventProcessor): this {\n    this._eventProcessors.push(callback);\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setUser(user: User | null): this {\n    this._user = user || {};\n    if (this._session) {\n      updateSession(this._session, { user });\n    }\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getUser(): User | undefined {\n    return this._user;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getRequestSession(): RequestSession | undefined {\n    return this._requestSession;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setRequestSession(requestSession?: RequestSession): this {\n    this._requestSession = requestSession;\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTags(tags: { [key: string]: Primitive }): this {\n    this._tags = {\n      ...this._tags,\n      ...tags,\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTag(key: string, value: Primitive): this {\n    this._tags = { ...this._tags, [key]: value };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtras(extras: Extras): this {\n    this._extra = {\n      ...this._extra,\n      ...extras,\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtra(key: string, extra: Extra): this {\n    this._extra = { ...this._extra, [key]: extra };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setFingerprint(fingerprint: string[]): this {\n    this._fingerprint = fingerprint;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setLevel(\n    // eslint-disable-next-line deprecation/deprecation\n    level: Severity | SeverityLevel,\n  ): this {\n    this._level = level;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTransactionName(name?: string): this {\n    this._transactionName = name;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setContext(key: string, context: Context | null): this {\n    if (context === null) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this._contexts[key];\n    } else {\n      this._contexts = { ...this._contexts, [key]: context };\n    }\n\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setSpan(span?: Span): this {\n    this._span = span;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getSpan(): Span | undefined {\n    return this._span;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getTransaction(): Transaction | undefined {\n    // Often, this span (if it exists at all) will be a transaction, but it's not guaranteed to be. Regardless, it will\n    // have a pointer to the currently-active transaction.\n    const span = this.getSpan();\n    return span && span.transaction;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setSession(session?: Session): this {\n    if (!session) {\n      delete this._session;\n    } else {\n      this._session = session;\n    }\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getSession(): Session | undefined {\n    return this._session;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public update(captureContext?: CaptureContext): this {\n    if (!captureContext) {\n      return this;\n    }\n\n    if (typeof captureContext === 'function') {\n      const updatedScope = (captureContext as <T>(scope: T) => T)(this);\n      return updatedScope instanceof Scope ? updatedScope : this;\n    }\n\n    if (captureContext instanceof Scope) {\n      this._tags = { ...this._tags, ...captureContext._tags };\n      this._extra = { ...this._extra, ...captureContext._extra };\n      this._contexts = { ...this._contexts, ...captureContext._contexts };\n      if (captureContext._user && Object.keys(captureContext._user).length) {\n        this._user = captureContext._user;\n      }\n      if (captureContext._level) {\n        this._level = captureContext._level;\n      }\n      if (captureContext._fingerprint) {\n        this._fingerprint = captureContext._fingerprint;\n      }\n      if (captureContext._requestSession) {\n        this._requestSession = captureContext._requestSession;\n      }\n    } else if (isPlainObject(captureContext)) {\n      // eslint-disable-next-line no-param-reassign\n      captureContext = captureContext as ScopeContext;\n      this._tags = { ...this._tags, ...captureContext.tags };\n      this._extra = { ...this._extra, ...captureContext.extra };\n      this._contexts = { ...this._contexts, ...captureContext.contexts };\n      if (captureContext.user) {\n        this._user = captureContext.user;\n      }\n      if (captureContext.level) {\n        this._level = captureContext.level;\n      }\n      if (captureContext.fingerprint) {\n        this._fingerprint = captureContext.fingerprint;\n      }\n      if (captureContext.requestSession) {\n        this._requestSession = captureContext.requestSession;\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public clear(): this {\n    this._breadcrumbs = [];\n    this._tags = {};\n    this._extra = {};\n    this._user = {};\n    this._contexts = {};\n    this._level = undefined;\n    this._transactionName = undefined;\n    this._fingerprint = undefined;\n    this._requestSession = undefined;\n    this._span = undefined;\n    this._session = undefined;\n    this._notifyScopeListeners();\n    this._attachments = [];\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addBreadcrumb(breadcrumb: Breadcrumb, maxBreadcrumbs?: number): this {\n    const maxCrumbs = typeof maxBreadcrumbs === 'number' ? Math.min(maxBreadcrumbs, MAX_BREADCRUMBS) : MAX_BREADCRUMBS;\n\n    // No data has been changed, so don't notify scope listeners\n    if (maxCrumbs <= 0) {\n      return this;\n    }\n\n    const mergedBreadcrumb = {\n      timestamp: dateTimestampInSeconds(),\n      ...breadcrumb,\n    };\n    this._breadcrumbs = [...this._breadcrumbs, mergedBreadcrumb].slice(-maxCrumbs);\n    this._notifyScopeListeners();\n\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public clearBreadcrumbs(): this {\n    this._breadcrumbs = [];\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addAttachment(attachment: Attachment): this {\n    this._attachments.push(attachment);\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getAttachments(): Attachment[] {\n    return this._attachments;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public clearAttachments(): this {\n    this._attachments = [];\n    return this;\n  }\n\n  /**\n   * Applies the current context and fingerprint to the event.\n   * Note that breadcrumbs will be added by the client.\n   * Also if the event has already breadcrumbs on it, we do not merge them.\n   * @param event Event\n   * @param hint May contain additional information about the original exception.\n   * @hidden\n   */\n  public applyToEvent(event: Event, hint: EventHint = {}): PromiseLike<Event | null> {\n    if (this._extra && Object.keys(this._extra).length) {\n      event.extra = { ...this._extra, ...event.extra };\n    }\n    if (this._tags && Object.keys(this._tags).length) {\n      event.tags = { ...this._tags, ...event.tags };\n    }\n    if (this._user && Object.keys(this._user).length) {\n      event.user = { ...this._user, ...event.user };\n    }\n    if (this._contexts && Object.keys(this._contexts).length) {\n      event.contexts = { ...this._contexts, ...event.contexts };\n    }\n    if (this._level) {\n      event.level = this._level;\n    }\n    if (this._transactionName) {\n      event.transaction = this._transactionName;\n    }\n\n    // We want to set the trace context for normal events only if there isn't already\n    // a trace context on the event. There is a product feature in place where we link\n    // errors with transaction and it relies on that.\n    if (this._span) {\n      event.contexts = { trace: this._span.getTraceContext(), ...event.contexts };\n      const transactionName = this._span.transaction && this._span.transaction.name;\n      if (transactionName) {\n        event.tags = { transaction: transactionName, ...event.tags };\n      }\n    }\n\n    this._applyFingerprint(event);\n\n    event.breadcrumbs = [...(event.breadcrumbs || []), ...this._breadcrumbs];\n    event.breadcrumbs = event.breadcrumbs.length > 0 ? event.breadcrumbs : undefined;\n\n    event.sdkProcessingMetadata = { ...event.sdkProcessingMetadata, ...this._sdkProcessingMetadata };\n\n    return this._notifyEventProcessors([...getGlobalEventProcessors(), ...this._eventProcessors], event, hint);\n  }\n\n  /**\n   * Add data which will be accessible during event processing but won't get sent to Sentry\n   */\n  public setSDKProcessingMetadata(newData: { [key: string]: unknown }): this {\n    this._sdkProcessingMetadata = { ...this._sdkProcessingMetadata, ...newData };\n\n    return this;\n  }\n\n  /**\n   * This will be called after {@link applyToEvent} is finished.\n   */\n  protected _notifyEventProcessors(\n    processors: EventProcessor[],\n    event: Event | null,\n    hint: EventHint,\n    index: number = 0,\n  ): PromiseLike<Event | null> {\n    return new SyncPromise<Event | null>((resolve, reject) => {\n      const processor = processors[index];\n      if (event === null || typeof processor !== 'function') {\n        resolve(event);\n      } else {\n        const result = processor({ ...event }, hint) as Event | null;\n\n        __DEBUG_BUILD__ &&\n          processor.id &&\n          result === null &&\n          logger.log(`Event processor \"${processor.id}\" dropped event`);\n\n        if (isThenable(result)) {\n          void result\n            .then(final => this._notifyEventProcessors(processors, final, hint, index + 1).then(resolve))\n            .then(null, reject);\n        } else {\n          void this._notifyEventProcessors(processors, result, hint, index + 1)\n            .then(resolve)\n            .then(null, reject);\n        }\n      }\n    });\n  }\n\n  /**\n   * This will be called on every set call.\n   */\n  protected _notifyScopeListeners(): void {\n    // We need this check for this._notifyingListeners to be able to work on scope during updates\n    // If this check is not here we'll produce endless recursion when something is done with the scope\n    // during the callback.\n    if (!this._notifyingListeners) {\n      this._notifyingListeners = true;\n      this._scopeListeners.forEach(callback => {\n        callback(this);\n      });\n      this._notifyingListeners = false;\n    }\n  }\n\n  /**\n   * Applies fingerprint from the scope to the event if there's one,\n   * uses message if there's one instead or get rid of empty fingerprint\n   */\n  private _applyFingerprint(event: Event): void {\n    // Make sure it's an array first and we actually have something in place\n    event.fingerprint = event.fingerprint\n      ? Array.isArray(event.fingerprint)\n        ? event.fingerprint\n        : [event.fingerprint]\n      : [];\n\n    // If we have something on the scope, then merge it with event\n    if (this._fingerprint) {\n      event.fingerprint = event.fingerprint.concat(this._fingerprint);\n    }\n\n    // If we have no data at all, remove empty array default\n    if (event.fingerprint && !event.fingerprint.length) {\n      delete event.fingerprint;\n    }\n  }\n}\n\n/**\n * Returns the global event processors.\n */\nfunction getGlobalEventProcessors(): EventProcessor[] {\n  return getGlobalSingleton<EventProcessor[]>('globalEventProcessors', () => []);\n}\n\n/**\n * Add a EventProcessor to be kept globally.\n * @param callback EventProcessor to add\n */\nexport function addGlobalEventProcessor(callback: EventProcessor): void {\n  getGlobalEventProcessors().push(callback);\n}\n","/* eslint-disable max-lines */\nimport {\n  Breadcrumb,\n  BreadcrumbHint,\n  Client,\n  CustomSamplingContext,\n  Event,\n  EventHint,\n  Extra,\n  Extras,\n  Hub as HubInterface,\n  Integration,\n  IntegrationClass,\n  Primitive,\n  Session,\n  SessionContext,\n  Severity,\n  SeverityLevel,\n  Transaction,\n  TransactionContext,\n  User,\n} from '@sentry/types';\nimport {\n  consoleSandbox,\n  dateTimestampInSeconds,\n  getGlobalObject,\n  getGlobalSingleton,\n  isNodeEnv,\n  logger,\n  uuid4,\n} from '@sentry/utils';\n\nimport { Scope } from './scope';\nimport { closeSession, makeSession, updateSession } from './session';\n\n/**\n * API compatibility version of this hub.\n *\n * WARNING: This number should only be increased when the global interface\n * changes and new methods are introduced.\n *\n * @hidden\n */\nexport const API_VERSION = 4;\n\n/**\n * Default maximum number of breadcrumbs added to an event. Can be overwritten\n * with {@link Options.maxBreadcrumbs}.\n */\nconst DEFAULT_BREADCRUMBS = 100;\n\n/**\n * A layer in the process stack.\n * @hidden\n */\nexport interface Layer {\n  client?: Client;\n  scope?: Scope;\n}\n\n/**\n * An object that contains a hub and maintains a scope stack.\n * @hidden\n */\nexport interface Carrier {\n  __SENTRY__?: {\n    hub?: Hub;\n    /**\n     * Extra Hub properties injected by various SDKs\n     */\n    integrations?: Integration[];\n    extensions?: {\n      /** Hack to prevent bundlers from breaking our usage of the domain package in the cross-platform Hub package */\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      domain?: { [key: string]: any };\n    } & {\n      /** Extension methods for the hub, which are bound to the current Hub instance */\n      // eslint-disable-next-line @typescript-eslint/ban-types\n      [key: string]: Function;\n    };\n  };\n}\n\n/**\n * @inheritDoc\n */\nexport class Hub implements HubInterface {\n  /** Is a {@link Layer}[] containing the client and scope */\n  private readonly _stack: Layer[] = [{}];\n\n  /** Contains the last event id of a captured event.  */\n  private _lastEventId?: string;\n\n  /**\n   * Creates a new instance of the hub, will push one {@link Layer} into the\n   * internal stack on creation.\n   *\n   * @param client bound to the hub.\n   * @param scope bound to the hub.\n   * @param version number, higher number means higher priority.\n   */\n  public constructor(client?: Client, scope: Scope = new Scope(), private readonly _version: number = API_VERSION) {\n    this.getStackTop().scope = scope;\n    if (client) {\n      this.bindClient(client);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public isOlderThan(version: number): boolean {\n    return this._version < version;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public bindClient(client?: Client): void {\n    const top = this.getStackTop();\n    top.client = client;\n    if (client && client.setupIntegrations) {\n      client.setupIntegrations();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public pushScope(): Scope {\n    // We want to clone the content of prev scope\n    const scope = Scope.clone(this.getScope());\n    this.getStack().push({\n      client: this.getClient(),\n      scope,\n    });\n    return scope;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public popScope(): boolean {\n    if (this.getStack().length <= 1) return false;\n    return !!this.getStack().pop();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public withScope(callback: (scope: Scope) => void): void {\n    const scope = this.pushScope();\n    try {\n      callback(scope);\n    } finally {\n      this.popScope();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getClient<C extends Client>(): C | undefined {\n    return this.getStackTop().client as C;\n  }\n\n  /** Returns the scope of the top stack. */\n  public getScope(): Scope | undefined {\n    return this.getStackTop().scope;\n  }\n\n  /** Returns the scope stack for domains or the process. */\n  public getStack(): Layer[] {\n    return this._stack;\n  }\n\n  /** Returns the topmost scope layer in the order domain > local > process. */\n  public getStackTop(): Layer {\n    return this._stack[this._stack.length - 1];\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  public captureException(exception: any, hint?: EventHint): string {\n    const eventId = (this._lastEventId = hint && hint.event_id ? hint.event_id : uuid4());\n    const syntheticException = new Error('Sentry syntheticException');\n    this._withClient((client, scope) => {\n      client.captureException(\n        exception,\n        {\n          originalException: exception,\n          syntheticException,\n          ...hint,\n          event_id: eventId,\n        },\n        scope,\n      );\n    });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureMessage(\n    message: string,\n    // eslint-disable-next-line deprecation/deprecation\n    level?: Severity | SeverityLevel,\n    hint?: EventHint,\n  ): string {\n    const eventId = (this._lastEventId = hint && hint.event_id ? hint.event_id : uuid4());\n    const syntheticException = new Error(message);\n    this._withClient((client, scope) => {\n      client.captureMessage(\n        message,\n        level,\n        {\n          originalException: message,\n          syntheticException,\n          ...hint,\n          event_id: eventId,\n        },\n        scope,\n      );\n    });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureEvent(event: Event, hint?: EventHint): string {\n    const eventId = hint && hint.event_id ? hint.event_id : uuid4();\n    if (event.type !== 'transaction') {\n      this._lastEventId = eventId;\n    }\n\n    this._withClient((client, scope) => {\n      client.captureEvent(event, { ...hint, event_id: eventId }, scope);\n    });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public lastEventId(): string | undefined {\n    return this._lastEventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addBreadcrumb(breadcrumb: Breadcrumb, hint?: BreadcrumbHint): void {\n    const { scope, client } = this.getStackTop();\n\n    if (!scope || !client) return;\n\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const { beforeBreadcrumb = null, maxBreadcrumbs = DEFAULT_BREADCRUMBS } =\n      (client.getOptions && client.getOptions()) || {};\n\n    if (maxBreadcrumbs <= 0) return;\n\n    const timestamp = dateTimestampInSeconds();\n    const mergedBreadcrumb = { timestamp, ...breadcrumb };\n    const finalBreadcrumb = beforeBreadcrumb\n      ? (consoleSandbox(() => beforeBreadcrumb(mergedBreadcrumb, hint)) as Breadcrumb | null)\n      : mergedBreadcrumb;\n\n    if (finalBreadcrumb === null) return;\n\n    scope.addBreadcrumb(finalBreadcrumb, maxBreadcrumbs);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setUser(user: User | null): void {\n    const scope = this.getScope();\n    if (scope) scope.setUser(user);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTags(tags: { [key: string]: Primitive }): void {\n    const scope = this.getScope();\n    if (scope) scope.setTags(tags);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtras(extras: Extras): void {\n    const scope = this.getScope();\n    if (scope) scope.setExtras(extras);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTag(key: string, value: Primitive): void {\n    const scope = this.getScope();\n    if (scope) scope.setTag(key, value);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtra(key: string, extra: Extra): void {\n    const scope = this.getScope();\n    if (scope) scope.setExtra(key, extra);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public setContext(name: string, context: { [key: string]: any } | null): void {\n    const scope = this.getScope();\n    if (scope) scope.setContext(name, context);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public configureScope(callback: (scope: Scope) => void): void {\n    const { scope, client } = this.getStackTop();\n    if (scope && client) {\n      callback(scope);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public run(callback: (hub: Hub) => void): void {\n    const oldHub = makeMain(this);\n    try {\n      callback(this);\n    } finally {\n      makeMain(oldHub);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getIntegration<T extends Integration>(integration: IntegrationClass<T>): T | null {\n    const client = this.getClient();\n    if (!client) return null;\n    try {\n      return client.getIntegration(integration);\n    } catch (_oO) {\n      __DEBUG_BUILD__ && logger.warn(`Cannot retrieve integration ${integration.id} from the current Hub`);\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public startTransaction(context: TransactionContext, customSamplingContext?: CustomSamplingContext): Transaction {\n    return this._callExtensionMethod('startTransaction', context, customSamplingContext);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public traceHeaders(): { [key: string]: string } {\n    return this._callExtensionMethod<{ [key: string]: string }>('traceHeaders');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureSession(endSession: boolean = false): void {\n    // both send the update and pull the session from the scope\n    if (endSession) {\n      return this.endSession();\n    }\n\n    // only send the update\n    this._sendSessionUpdate();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public endSession(): void {\n    const layer = this.getStackTop();\n    const scope = layer && layer.scope;\n    const session = scope && scope.getSession();\n    if (session) {\n      closeSession(session);\n    }\n    this._sendSessionUpdate();\n\n    // the session is over; take it off of the scope\n    if (scope) {\n      scope.setSession();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public startSession(context?: SessionContext): Session {\n    const { scope, client } = this.getStackTop();\n    const { release, environment } = (client && client.getOptions()) || {};\n\n    // Will fetch userAgent if called from browser sdk\n    const global = getGlobalObject<{ navigator?: { userAgent?: string } }>();\n    const { userAgent } = global.navigator || {};\n\n    const session = makeSession({\n      release,\n      environment,\n      ...(scope && { user: scope.getUser() }),\n      ...(userAgent && { userAgent }),\n      ...context,\n    });\n\n    if (scope) {\n      // End existing session if there's one\n      const currentSession = scope.getSession && scope.getSession();\n      if (currentSession && currentSession.status === 'ok') {\n        updateSession(currentSession, { status: 'exited' });\n      }\n      this.endSession();\n\n      // Afterwards we set the new session on the scope\n      scope.setSession(session);\n    }\n\n    return session;\n  }\n\n  /**\n   * Returns if default PII should be sent to Sentry and propagated in ourgoing requests\n   * when Tracing is used.\n   */\n  public shouldSendDefaultPii(): boolean {\n    const client = this.getClient();\n    const options = client && client.getOptions();\n    return Boolean(options && options.sendDefaultPii);\n  }\n\n  /**\n   * Sends the current Session on the scope\n   */\n  private _sendSessionUpdate(): void {\n    const { scope, client } = this.getStackTop();\n    if (!scope) return;\n\n    const session = scope.getSession();\n    if (session) {\n      if (client && client.captureSession) {\n        client.captureSession(session);\n      }\n    }\n  }\n\n  /**\n   * Internal helper function to call a method on the top client if it exists.\n   *\n   * @param method The method to call on the client.\n   * @param args Arguments to pass to the client function.\n   */\n  private _withClient(callback: (client: Client, scope: Scope | undefined) => void): void {\n    const { scope, client } = this.getStackTop();\n    if (client) {\n      callback(client, scope);\n    }\n  }\n\n  /**\n   * Calls global extension method and binding current instance to the function call\n   */\n  // @ts-ignore Function lacks ending return statement and return type does not include 'undefined'. ts(2366)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _callExtensionMethod<T>(method: string, ...args: any[]): T {\n    const carrier = getMainCarrier();\n    const sentry = carrier.__SENTRY__;\n    if (sentry && sentry.extensions && typeof sentry.extensions[method] === 'function') {\n      return sentry.extensions[method].apply(this, args);\n    }\n    __DEBUG_BUILD__ && logger.warn(`Extension method ${method} couldn't be found, doing nothing.`);\n  }\n}\n\n/**\n * Returns the global shim registry.\n *\n * FIXME: This function is problematic, because despite always returning a valid Carrier,\n * it has an optional `__SENTRY__` property, which then in turn requires us to always perform an unnecessary check\n * at the call-site. We always access the carrier through this function, so we can guarantee that `__SENTRY__` is there.\n **/\nexport function getMainCarrier(): Carrier {\n  const carrier = getGlobalObject();\n  carrier.__SENTRY__ = carrier.__SENTRY__ || {\n    extensions: {},\n    hub: undefined,\n  };\n  return carrier;\n}\n\n/**\n * Replaces the current main hub with the passed one on the global object\n *\n * @returns The old replaced hub\n */\nexport function makeMain(hub: Hub): Hub {\n  const registry = getMainCarrier();\n  const oldHub = getHubFromCarrier(registry);\n  setHubOnCarrier(registry, hub);\n  return oldHub;\n}\n\n/**\n * Returns the default hub instance.\n *\n * If a hub is already registered in the global carrier but this module\n * contains a more recent version, it replaces the registered version.\n * Otherwise, the currently registered hub will be returned.\n */\nexport function getCurrentHub(): Hub {\n  // Get main carrier (global for every environment)\n  const registry = getMainCarrier();\n\n  // If there's no hub, or its an old API, assign a new one\n  if (!hasHubOnCarrier(registry) || getHubFromCarrier(registry).isOlderThan(API_VERSION)) {\n    setHubOnCarrier(registry, new Hub());\n  }\n\n  // Prefer domains over global if they are there (applicable only to Node environment)\n  if (isNodeEnv()) {\n    return getHubFromActiveDomain(registry);\n  }\n  // Return hub that lives on a global object\n  return getHubFromCarrier(registry);\n}\n\n/**\n * Try to read the hub from an active domain, and fallback to the registry if one doesn't exist\n * @returns discovered hub\n */\nfunction getHubFromActiveDomain(registry: Carrier): Hub {\n  try {\n    const sentry = getMainCarrier().__SENTRY__;\n    const activeDomain = sentry && sentry.extensions && sentry.extensions.domain && sentry.extensions.domain.active;\n\n    // If there's no active domain, just return global hub\n    if (!activeDomain) {\n      return getHubFromCarrier(registry);\n    }\n\n    // If there's no hub on current domain, or it's an old API, assign a new one\n    if (!hasHubOnCarrier(activeDomain) || getHubFromCarrier(activeDomain).isOlderThan(API_VERSION)) {\n      const registryHubTopStack = getHubFromCarrier(registry).getStackTop();\n      setHubOnCarrier(activeDomain, new Hub(registryHubTopStack.client, Scope.clone(registryHubTopStack.scope)));\n    }\n\n    // Return hub that lives on a domain\n    return getHubFromCarrier(activeDomain);\n  } catch (_Oo) {\n    // Return hub that lives on a global object\n    return getHubFromCarrier(registry);\n  }\n}\n\n/**\n * This will tell whether a carrier has a hub on it or not\n * @param carrier object\n */\nfunction hasHubOnCarrier(carrier: Carrier): boolean {\n  return !!(carrier && carrier.__SENTRY__ && carrier.__SENTRY__.hub);\n}\n\n/**\n * This will create a new {@link Hub} and add to the passed object on\n * __SENTRY__.hub.\n * @param carrier object\n * @hidden\n */\nexport function getHubFromCarrier(carrier: Carrier): Hub {\n  return getGlobalSingleton<Hub>('hub', () => new Hub(), carrier);\n}\n\n/**\n * This will set passed {@link Hub} on the passed object's __SENTRY__.hub attribute\n * @param carrier object\n * @param hub Hub\n * @returns A boolean indicating success or failure\n */\nexport function setHubOnCarrier(carrier: Carrier, hub: Hub): boolean {\n  if (!carrier) return false;\n  const __SENTRY__ = (carrier.__SENTRY__ = carrier.__SENTRY__ || {});\n  __SENTRY__.hub = hub;\n  return true;\n}\n","import {\n  Breadcrumb,\n  CaptureContext,\n  CustomSamplingContext,\n  Event,\n  EventHint,\n  Extra,\n  Extras,\n  Primitive,\n  Severity,\n  SeverityLevel,\n  TransactionContext,\n  User,\n} from '@sentry/types';\n\nimport { getCurrentHub, Hub } from './hub';\nimport { Scope } from './scope';\n\n// Note: All functions in this file are typed with a return value of `ReturnType<Hub[HUB_FUNCTION]>`,\n// where HUB_FUNCTION is some method on the Hub class.\n//\n// This is done to make sure the top level SDK methods stay in sync with the hub methods.\n// Although every method here has an explicit return type, some of them (that map to void returns) do not\n// contain `return` keywords. This is done to save on bundle size, as `return` is not minifiable.\n\n/**\n * Captures an exception event and sends it to Sentry.\n *\n * @param exception An exception-like object.\n * @param captureContext Additional scope data to apply to exception event.\n * @returns The generated eventId.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\nexport function captureException(exception: any, captureContext?: CaptureContext): ReturnType<Hub['captureException']> {\n  return getCurrentHub().captureException(exception, { captureContext });\n}\n\n/**\n * Captures a message event and sends it to Sentry.\n *\n * @param message The message to send to Sentry.\n * @param Severity Define the level of the message.\n * @returns The generated eventId.\n */\nexport function captureMessage(\n  message: string,\n  // eslint-disable-next-line deprecation/deprecation\n  captureContext?: CaptureContext | Severity | SeverityLevel,\n): ReturnType<Hub['captureMessage']> {\n  // This is necessary to provide explicit scopes upgrade, without changing the original\n  // arity of the `captureMessage(message, level)` method.\n  const level = typeof captureContext === 'string' ? captureContext : undefined;\n  const context = typeof captureContext !== 'string' ? { captureContext } : undefined;\n  return getCurrentHub().captureMessage(message, level, context);\n}\n\n/**\n * Captures a manually created event and sends it to Sentry.\n *\n * @param event The event to send to Sentry.\n * @returns The generated eventId.\n */\nexport function captureEvent(event: Event, hint?: EventHint): ReturnType<Hub['captureEvent']> {\n  return getCurrentHub().captureEvent(event, hint);\n}\n\n/**\n * Callback to set context information onto the scope.\n * @param callback Callback function that receives Scope.\n */\nexport function configureScope(callback: (scope: Scope) => void): ReturnType<Hub['configureScope']> {\n  getCurrentHub().configureScope(callback);\n}\n\n/**\n * Records a new breadcrumb which will be attached to future events.\n *\n * Breadcrumbs will be added to subsequent events to provide more context on\n * user's actions prior to an error or crash.\n *\n * @param breadcrumb The breadcrumb to record.\n */\nexport function addBreadcrumb(breadcrumb: Breadcrumb): ReturnType<Hub['addBreadcrumb']> {\n  getCurrentHub().addBreadcrumb(breadcrumb);\n}\n\n/**\n * Sets context data with the given name.\n * @param name of the context\n * @param context Any kind of data. This data will be normalized.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function setContext(name: string, context: { [key: string]: any } | null): ReturnType<Hub['setContext']> {\n  getCurrentHub().setContext(name, context);\n}\n\n/**\n * Set an object that will be merged sent as extra data with the event.\n * @param extras Extras object to merge into current context.\n */\nexport function setExtras(extras: Extras): ReturnType<Hub['setExtras']> {\n  getCurrentHub().setExtras(extras);\n}\n\n/**\n * Set key:value that will be sent as extra data with the event.\n * @param key String of extra\n * @param extra Any kind of data. This data will be normalized.\n */\nexport function setExtra(key: string, extra: Extra): ReturnType<Hub['setExtra']> {\n  getCurrentHub().setExtra(key, extra);\n}\n\n/**\n * Set an object that will be merged sent as tags data with the event.\n * @param tags Tags context object to merge into current context.\n */\nexport function setTags(tags: { [key: string]: Primitive }): ReturnType<Hub['setTags']> {\n  getCurrentHub().setTags(tags);\n}\n\n/**\n * Set key:value that will be sent as tags data with the event.\n *\n * Can also be used to unset a tag, by passing `undefined`.\n *\n * @param key String key of tag\n * @param value Value of tag\n */\nexport function setTag(key: string, value: Primitive): ReturnType<Hub['setTag']> {\n  getCurrentHub().setTag(key, value);\n}\n\n/**\n * Updates user context information for future events.\n *\n * @param user User context object to be set in the current context. Pass `null` to unset the user.\n */\nexport function setUser(user: User | null): ReturnType<Hub['setUser']> {\n  getCurrentHub().setUser(user);\n}\n\n/**\n * Creates a new scope with and executes the given operation within.\n * The scope is automatically removed once the operation\n * finishes or throws.\n *\n * This is essentially a convenience function for:\n *\n *     pushScope();\n *     callback();\n *     popScope();\n *\n * @param callback that will be enclosed into push/popScope.\n */\nexport function withScope(callback: (scope: Scope) => void): ReturnType<Hub['withScope']> {\n  getCurrentHub().withScope(callback);\n}\n\n/**\n * Starts a new `Transaction` and returns it. This is the entry point to manual tracing instrumentation.\n *\n * A tree structure can be built by adding child spans to the transaction, and child spans to other spans. To start a\n * new child span within the transaction or any span, call the respective `.startChild()` method.\n *\n * Every child span must be finished before the transaction is finished, otherwise the unfinished spans are discarded.\n *\n * The transaction must be finished with a call to its `.finish()` method, at which point the transaction with all its\n * finished child spans will be sent to Sentry.\n *\n * NOTE: This function should only be used for *manual* instrumentation. Auto-instrumentation should call\n * `startTransaction` directly on the hub.\n *\n * @param context Properties of the new `Transaction`.\n * @param customSamplingContext Information given to the transaction sampling function (along with context-dependent\n * default values). See {@link Options.tracesSampler}.\n *\n * @returns The transaction which was just started\n */\nexport function startTransaction(\n  context: TransactionContext,\n  customSamplingContext?: CustomSamplingContext,\n): ReturnType<Hub['startTransaction']> {\n  return getCurrentHub().startTransaction(\n    {\n      metadata: { source: 'custom' },\n      ...context,\n    },\n    customSamplingContext,\n  );\n}\n","import { ClientOptions, DsnComponents, DsnLike, SdkInfo } from '@sentry/types';\nimport { dsnToString, makeDsn, urlEncode } from '@sentry/utils';\n\nconst SENTRY_API_VERSION = '7';\n\n/** Returns the prefix to construct Sentry ingestion API endpoints. */\nfunction getBaseApiEndpoint(dsn: DsnComponents): string {\n  const protocol = dsn.protocol ? `${dsn.protocol}:` : '';\n  const port = dsn.port ? `:${dsn.port}` : '';\n  return `${protocol}//${dsn.host}${port}${dsn.path ? `/${dsn.path}` : ''}/api/`;\n}\n\n/** Returns the ingest API endpoint for target. */\nfunction _getIngestEndpoint(dsn: DsnComponents): string {\n  return `${getBaseApiEndpoint(dsn)}${dsn.projectId}/envelope/`;\n}\n\n/** Returns a URL-encoded string with auth config suitable for a query string. */\nfunction _encodedAuth(dsn: DsnComponents, sdkInfo: SdkInfo | undefined): string {\n  return urlEncode({\n    // We send only the minimum set of required information. See\n    // https://github.com/getsentry/sentry-javascript/issues/2572.\n    sentry_key: dsn.publicKey,\n    sentry_version: SENTRY_API_VERSION,\n    ...(sdkInfo && { sentry_client: `${sdkInfo.name}/${sdkInfo.version}` }),\n  });\n}\n\n/**\n * Returns the envelope endpoint URL with auth in the query string.\n *\n * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n */\nexport function getEnvelopeEndpointWithUrlEncodedAuth(\n  dsn: DsnComponents,\n  // TODO (v8): Remove `tunnelOrOptions` in favor of `options`, and use the substitute code below\n  // options: ClientOptions = {} as ClientOptions,\n  tunnelOrOptions: string | ClientOptions = {} as ClientOptions,\n): string {\n  // TODO (v8): Use this code instead\n  // const { tunnel, _metadata = {} } = options;\n  // return tunnel ? tunnel : `${_getIngestEndpoint(dsn)}?${_encodedAuth(dsn, _metadata.sdk)}`;\n\n  const tunnel = typeof tunnelOrOptions === 'string' ? tunnelOrOptions : tunnelOrOptions.tunnel;\n  const sdkInfo =\n    typeof tunnelOrOptions === 'string' || !tunnelOrOptions._metadata ? undefined : tunnelOrOptions._metadata.sdk;\n\n  return tunnel ? tunnel : `${_getIngestEndpoint(dsn)}?${_encodedAuth(dsn, sdkInfo)}`;\n}\n\n/** Returns the url to the report dialog endpoint. */\nexport function getReportDialogEndpoint(\n  dsnLike: DsnLike,\n  dialogOptions: {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    [key: string]: any;\n    user?: { name?: string; email?: string };\n  },\n): string {\n  const dsn = makeDsn(dsnLike);\n  const endpoint = `${getBaseApiEndpoint(dsn)}embed/error-page/`;\n\n  let encodedOptions = `dsn=${dsnToString(dsn)}`;\n  for (const key in dialogOptions) {\n    if (key === 'dsn') {\n      continue;\n    }\n\n    if (key === 'user') {\n      const user = dialogOptions.user;\n      if (!user) {\n        continue;\n      }\n      if (user.name) {\n        encodedOptions += `&name=${encodeURIComponent(user.name)}`;\n      }\n      if (user.email) {\n        encodedOptions += `&email=${encodeURIComponent(user.email)}`;\n      }\n    } else {\n      encodedOptions += `&${encodeURIComponent(key)}=${encodeURIComponent(dialogOptions[key] as string)}`;\n    }\n  }\n\n  return `${endpoint}?${encodedOptions}`;\n}\n","import {\n  Baggage,\n  DsnComponents,\n  DynamicSamplingContext,\n  Event,\n  EventEnvelope,\n  EventEnvelopeHeaders,\n  EventItem,\n  SdkInfo,\n  SdkMetadata,\n  Session,\n  SessionAggregates,\n  SessionEnvelope,\n  SessionItem,\n} from '@sentry/types';\nimport { createEnvelope, dropUndefinedKeys, dsnToString, getSentryBaggageItems } from '@sentry/utils';\n\n/** Extract sdk info from from the API metadata */\nfunction getSdkMetadataForEnvelopeHeader(metadata?: SdkMetadata): SdkInfo | undefined {\n  if (!metadata || !metadata.sdk) {\n    return;\n  }\n  const { name, version } = metadata.sdk;\n  return { name, version };\n}\n\n/**\n * Apply SdkInfo (name, version, packages, integrations) to the corresponding event key.\n * Merge with existing data if any.\n **/\nfunction enhanceEventWithSdkInfo(event: Event, sdkInfo?: SdkInfo): Event {\n  if (!sdkInfo) {\n    return event;\n  }\n  event.sdk = event.sdk || {};\n  event.sdk.name = event.sdk.name || sdkInfo.name;\n  event.sdk.version = event.sdk.version || sdkInfo.version;\n  event.sdk.integrations = [...(event.sdk.integrations || []), ...(sdkInfo.integrations || [])];\n  event.sdk.packages = [...(event.sdk.packages || []), ...(sdkInfo.packages || [])];\n  return event;\n}\n\n/** Creates an envelope from a Session */\nexport function createSessionEnvelope(\n  session: Session | SessionAggregates,\n  dsn: DsnComponents,\n  metadata?: SdkMetadata,\n  tunnel?: string,\n): SessionEnvelope {\n  const sdkInfo = getSdkMetadataForEnvelopeHeader(metadata);\n  const envelopeHeaders = {\n    sent_at: new Date().toISOString(),\n    ...(sdkInfo && { sdk: sdkInfo }),\n    ...(!!tunnel && { dsn: dsnToString(dsn) }),\n  };\n\n  const envelopeItem: SessionItem =\n    'aggregates' in session ? [{ type: 'sessions' }, session] : [{ type: 'session' }, session];\n\n  return createEnvelope<SessionEnvelope>(envelopeHeaders, [envelopeItem]);\n}\n\n/**\n * Create an Envelope from an event.\n */\nexport function createEventEnvelope(\n  event: Event,\n  dsn: DsnComponents,\n  metadata?: SdkMetadata,\n  tunnel?: string,\n): EventEnvelope {\n  const sdkInfo = getSdkMetadataForEnvelopeHeader(metadata);\n  const eventType = event.type || 'event';\n\n  const { transactionSampling } = event.sdkProcessingMetadata || {};\n  const { method: samplingMethod, rate: sampleRate } = transactionSampling || {};\n\n  enhanceEventWithSdkInfo(event, metadata && metadata.sdk);\n\n  const envelopeHeaders = createEventEnvelopeHeaders(event, sdkInfo, tunnel, dsn);\n\n  // Prevent this data (which, if it exists, was used in earlier steps in the processing pipeline) from being sent to\n  // sentry. (Note: Our use of this property comes and goes with whatever we might be debugging, whatever hacks we may\n  // have temporarily added, etc. Even if we don't happen to be using it at some point in the future, let's not get rid\n  // of this `delete`, lest we miss putting it back in the next time the property is in use.)\n  delete event.sdkProcessingMetadata;\n\n  const eventItem: EventItem = [\n    {\n      type: eventType,\n      sample_rates: [{ id: samplingMethod, rate: sampleRate }],\n    },\n    event,\n  ];\n  return createEnvelope<EventEnvelope>(envelopeHeaders, [eventItem]);\n}\n\nfunction createEventEnvelopeHeaders(\n  event: Event,\n  sdkInfo: SdkInfo | undefined,\n  tunnel: string | undefined,\n  dsn: DsnComponents,\n): EventEnvelopeHeaders {\n  const baggage: Baggage | undefined = event.sdkProcessingMetadata && event.sdkProcessingMetadata.baggage;\n  const dynamicSamplingContext = baggage && getSentryBaggageItems(baggage);\n\n  return {\n    event_id: event.event_id as string,\n    sent_at: new Date().toISOString(),\n    ...(sdkInfo && { sdk: sdkInfo }),\n    ...(!!tunnel && { dsn: dsnToString(dsn) }),\n    ...(event.type === 'transaction' &&\n      dynamicSamplingContext && {\n        trace: dropUndefinedKeys({ ...dynamicSamplingContext }) as DynamicSamplingContext,\n      }),\n  };\n}\n","import { addGlobalEventProcessor, getCurrentHub } from '@sentry/hub';\nimport { Integration, Options } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\nexport const installedIntegrations: string[] = [];\n\n/** Map of integrations assigned to a client */\nexport type IntegrationIndex = {\n  [key: string]: Integration;\n};\n\n/**\n * @private\n */\nfunction filterDuplicates(integrations: Integration[]): Integration[] {\n  return integrations.reduce((acc, integrations) => {\n    if (acc.every(accIntegration => integrations.name !== accIntegration.name)) {\n      acc.push(integrations);\n    }\n    return acc;\n  }, [] as Integration[]);\n}\n\n/** Gets integration to install */\nexport function getIntegrationsToSetup(options: Options): Integration[] {\n  const defaultIntegrations = (options.defaultIntegrations && [...options.defaultIntegrations]) || [];\n  const userIntegrations = options.integrations;\n\n  let integrations: Integration[] = [...filterDuplicates(defaultIntegrations)];\n\n  if (Array.isArray(userIntegrations)) {\n    // Filter out integrations that are also included in user options\n    integrations = [\n      ...integrations.filter(integrations =>\n        userIntegrations.every(userIntegration => userIntegration.name !== integrations.name),\n      ),\n      // And filter out duplicated user options integrations\n      ...filterDuplicates(userIntegrations),\n    ];\n  } else if (typeof userIntegrations === 'function') {\n    integrations = userIntegrations(integrations);\n    integrations = Array.isArray(integrations) ? integrations : [integrations];\n  }\n\n  // Make sure that if present, `Debug` integration will always run last\n  const integrationsNames = integrations.map(i => i.name);\n  const alwaysLastToRun = 'Debug';\n  if (integrationsNames.indexOf(alwaysLastToRun) !== -1) {\n    integrations.push(...integrations.splice(integrationsNames.indexOf(alwaysLastToRun), 1));\n  }\n\n  return integrations;\n}\n\n/**\n * Given a list of integration instances this installs them all. When `withDefaults` is set to `true` then all default\n * integrations are added unless they were already provided before.\n * @param integrations array of integration instances\n * @param withDefault should enable default integrations\n */\nexport function setupIntegrations(integrations: Integration[]): IntegrationIndex {\n  const integrationIndex: IntegrationIndex = {};\n\n  integrations.forEach(integration => {\n    integrationIndex[integration.name] = integration;\n\n    if (installedIntegrations.indexOf(integration.name) === -1) {\n      integration.setupOnce(addGlobalEventProcessor, getCurrentHub);\n      installedIntegrations.push(integration.name);\n      __DEBUG_BUILD__ && logger.log(`Integration installed: ${integration.name}`);\n    }\n  });\n\n  return integrationIndex;\n}\n","/* eslint-disable max-lines */\nimport { Scope, updateSession } from '@sentry/hub';\nimport {\n  Client,\n  ClientOptions,\n  DataCategory,\n  DsnComponents,\n  Envelope,\n  Event,\n  EventDropReason,\n  EventHint,\n  Integration,\n  IntegrationClass,\n  Outcome,\n  Session,\n  SessionAggregates,\n  Severity,\n  SeverityLevel,\n  Transport,\n} from '@sentry/types';\nimport {\n  addItemToEnvelope,\n  checkOrSetAlreadyCaught,\n  createAttachmentEnvelopeItem,\n  dateTimestampInSeconds,\n  isPlainObject,\n  isPrimitive,\n  isThenable,\n  logger,\n  makeDsn,\n  normalize,\n  rejectedSyncPromise,\n  resolvedSyncPromise,\n  SentryError,\n  SyncPromise,\n  truncate,\n  uuid4,\n} from '@sentry/utils';\n\nimport { getEnvelopeEndpointWithUrlEncodedAuth } from './api';\nimport { createEventEnvelope, createSessionEnvelope } from './envelope';\nimport { IntegrationIndex, setupIntegrations } from './integration';\n\nconst ALREADY_SEEN_ERROR = \"Not capturing exception because it's already been captured.\";\n\n/**\n * Base implementation for all JavaScript SDK clients.\n *\n * Call the constructor with the corresponding options\n * specific to the client subclass. To access these options later, use\n * {@link Client.getOptions}.\n *\n * If a Dsn is specified in the options, it will be parsed and stored. Use\n * {@link Client.getDsn} to retrieve the Dsn at any moment. In case the Dsn is\n * invalid, the constructor will throw a {@link SentryException}. Note that\n * without a valid Dsn, the SDK will not send any events to Sentry.\n *\n * Before sending an event, it is passed through\n * {@link BaseClient._prepareEvent} to add SDK information and scope data\n * (breadcrumbs and context). To add more custom information, override this\n * method and extend the resulting prepared event.\n *\n * To issue automatically created events (e.g. via instrumentation), use\n * {@link Client.captureEvent}. It will prepare the event and pass it through\n * the callback lifecycle. To issue auto-breadcrumbs, use\n * {@link Client.addBreadcrumb}.\n *\n * @example\n * class NodeClient extends BaseClient<NodeOptions> {\n *   public constructor(options: NodeOptions) {\n *     super(options);\n *   }\n *\n *   // ...\n * }\n */\nexport abstract class BaseClient<O extends ClientOptions> implements Client<O> {\n  /** Options passed to the SDK. */\n  protected readonly _options: O;\n\n  /** The client Dsn, if specified in options. Without this Dsn, the SDK will be disabled. */\n  protected readonly _dsn?: DsnComponents;\n\n  protected readonly _transport?: Transport;\n\n  /** Array of set up integrations. */\n  protected _integrations: IntegrationIndex = {};\n\n  /** Indicates whether this client's integrations have been set up. */\n  protected _integrationsInitialized: boolean = false;\n\n  /** Number of calls being processed */\n  protected _numProcessing: number = 0;\n\n  /** Holds flushable  */\n  private _outcomes: { [key: string]: number } = {};\n\n  /**\n   * Initializes this client instance.\n   *\n   * @param options Options for the client.\n   */\n  protected constructor(options: O) {\n    this._options = options;\n    if (options.dsn) {\n      this._dsn = makeDsn(options.dsn);\n      const url = getEnvelopeEndpointWithUrlEncodedAuth(this._dsn, options);\n      this._transport = options.transport({\n        recordDroppedEvent: this.recordDroppedEvent.bind(this),\n        ...options.transportOptions,\n        url,\n      });\n    } else {\n      __DEBUG_BUILD__ && logger.warn('No DSN provided, client will not do anything.');\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  public captureException(exception: any, hint?: EventHint, scope?: Scope): string | undefined {\n    // ensure we haven't captured this very object before\n    if (checkOrSetAlreadyCaught(exception)) {\n      __DEBUG_BUILD__ && logger.log(ALREADY_SEEN_ERROR);\n      return;\n    }\n\n    let eventId: string | undefined = hint && hint.event_id;\n\n    this._process(\n      this.eventFromException(exception, hint)\n        .then(event => this._captureEvent(event, hint, scope))\n        .then(result => {\n          eventId = result;\n        }),\n    );\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureMessage(\n    message: string,\n    // eslint-disable-next-line deprecation/deprecation\n    level?: Severity | SeverityLevel,\n    hint?: EventHint,\n    scope?: Scope,\n  ): string | undefined {\n    let eventId: string | undefined = hint && hint.event_id;\n\n    const promisedEvent = isPrimitive(message)\n      ? this.eventFromMessage(String(message), level, hint)\n      : this.eventFromException(message, hint);\n\n    this._process(\n      promisedEvent\n        .then(event => this._captureEvent(event, hint, scope))\n        .then(result => {\n          eventId = result;\n        }),\n    );\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureEvent(event: Event, hint?: EventHint, scope?: Scope): string | undefined {\n    // ensure we haven't captured this very object before\n    if (hint && hint.originalException && checkOrSetAlreadyCaught(hint.originalException)) {\n      __DEBUG_BUILD__ && logger.log(ALREADY_SEEN_ERROR);\n      return;\n    }\n\n    let eventId: string | undefined = hint && hint.event_id;\n\n    this._process(\n      this._captureEvent(event, hint, scope).then(result => {\n        eventId = result;\n      }),\n    );\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureSession(session: Session): void {\n    if (!this._isEnabled()) {\n      __DEBUG_BUILD__ && logger.warn('SDK not enabled, will not capture session.');\n      return;\n    }\n\n    if (!(typeof session.release === 'string')) {\n      __DEBUG_BUILD__ && logger.warn('Discarded session because of missing or non-string release');\n    } else {\n      this.sendSession(session);\n      // After sending, we set init false to indicate it's not the first occurrence\n      updateSession(session, { init: false });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getDsn(): DsnComponents | undefined {\n    return this._dsn;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getOptions(): O {\n    return this._options;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getTransport(): Transport | undefined {\n    return this._transport;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public flush(timeout?: number): PromiseLike<boolean> {\n    const transport = this._transport;\n    if (transport) {\n      return this._isClientDoneProcessing(timeout).then(clientFinished => {\n        return transport.flush(timeout).then(transportFlushed => clientFinished && transportFlushed);\n      });\n    } else {\n      return resolvedSyncPromise(true);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public close(timeout?: number): PromiseLike<boolean> {\n    return this.flush(timeout).then(result => {\n      this.getOptions().enabled = false;\n      return result;\n    });\n  }\n\n  /**\n   * Sets up the integrations\n   */\n  public setupIntegrations(): void {\n    if (this._isEnabled() && !this._integrationsInitialized) {\n      this._integrations = setupIntegrations(this._options.integrations);\n      this._integrationsInitialized = true;\n    }\n  }\n\n  /**\n   * Gets an installed integration by its `id`.\n   *\n   * @returns The installed integration or `undefined` if no integration with that `id` was installed.\n   */\n  public getIntegrationById(integrationId: string): Integration | undefined {\n    return this._integrations[integrationId];\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getIntegration<T extends Integration>(integration: IntegrationClass<T>): T | null {\n    try {\n      return (this._integrations[integration.id] as T) || null;\n    } catch (_oO) {\n      __DEBUG_BUILD__ && logger.warn(`Cannot retrieve integration ${integration.id} from the current Client`);\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(event: Event, hint: EventHint = {}): void {\n    if (this._dsn) {\n      let env = createEventEnvelope(event, this._dsn, this._options._metadata, this._options.tunnel);\n\n      for (const attachment of hint.attachments || []) {\n        env = addItemToEnvelope(\n          env,\n          createAttachmentEnvelopeItem(\n            attachment,\n            this._options.transportOptions && this._options.transportOptions.textEncoder,\n          ),\n        );\n      }\n\n      this._sendEnvelope(env);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendSession(session: Session | SessionAggregates): void {\n    if (this._dsn) {\n      const env = createSessionEnvelope(session, this._dsn, this._options._metadata, this._options.tunnel);\n      this._sendEnvelope(env);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public recordDroppedEvent(reason: EventDropReason, category: DataCategory): void {\n    if (this._options.sendClientReports) {\n      // We want to track each category (error, transaction, session) separately\n      // but still keep the distinction between different type of outcomes.\n      // We could use nested maps, but it's much easier to read and type this way.\n      // A correct type for map-based implementation if we want to go that route\n      // would be `Partial<Record<SentryRequestType, Partial<Record<Outcome, number>>>>`\n      // With typescript 4.1 we could even use template literal types\n      const key = `${reason}:${category}`;\n      __DEBUG_BUILD__ && logger.log(`Adding outcome: \"${key}\"`);\n\n      // The following works because undefined + 1 === NaN and NaN is falsy\n      this._outcomes[key] = this._outcomes[key] + 1 || 1;\n    }\n  }\n\n  /** Updates existing session based on the provided event */\n  protected _updateSessionFromEvent(session: Session, event: Event): void {\n    let crashed = false;\n    let errored = false;\n    const exceptions = event.exception && event.exception.values;\n\n    if (exceptions) {\n      errored = true;\n\n      for (const ex of exceptions) {\n        const mechanism = ex.mechanism;\n        if (mechanism && mechanism.handled === false) {\n          crashed = true;\n          break;\n        }\n      }\n    }\n\n    // A session is updated and that session update is sent in only one of the two following scenarios:\n    // 1. Session with non terminal status and 0 errors + an error occurred -> Will set error count to 1 and send update\n    // 2. Session with non terminal status and 1 error + a crash occurred -> Will set status crashed and send update\n    const sessionNonTerminal = session.status === 'ok';\n    const shouldUpdateAndSend = (sessionNonTerminal && session.errors === 0) || (sessionNonTerminal && crashed);\n\n    if (shouldUpdateAndSend) {\n      updateSession(session, {\n        ...(crashed && { status: 'crashed' }),\n        errors: session.errors || Number(errored || crashed),\n      });\n      this.captureSession(session);\n    }\n  }\n\n  /**\n   * Determine if the client is finished processing. Returns a promise because it will wait `timeout` ms before saying\n   * \"no\" (resolving to `false`) in order to give the client a chance to potentially finish first.\n   *\n   * @param timeout The time, in ms, after which to resolve to `false` if the client is still busy. Passing `0` (or not\n   * passing anything) will make the promise wait as long as it takes for processing to finish before resolving to\n   * `true`.\n   * @returns A promise which will resolve to `true` if processing is already done or finishes before the timeout, and\n   * `false` otherwise\n   */\n  protected _isClientDoneProcessing(timeout?: number): PromiseLike<boolean> {\n    return new SyncPromise(resolve => {\n      let ticked: number = 0;\n      const tick: number = 1;\n\n      const interval = setInterval(() => {\n        if (this._numProcessing == 0) {\n          clearInterval(interval);\n          resolve(true);\n        } else {\n          ticked += tick;\n          if (timeout && ticked >= timeout) {\n            clearInterval(interval);\n            resolve(false);\n          }\n        }\n      }, tick);\n    });\n  }\n\n  /** Determines whether this SDK is enabled and a valid Dsn is present. */\n  protected _isEnabled(): boolean {\n    return this.getOptions().enabled !== false && this._dsn !== undefined;\n  }\n\n  /**\n   * Adds common information to events.\n   *\n   * The information includes release and environment from `options`,\n   * breadcrumbs and context (extra, tags and user) from the scope.\n   *\n   * Information that is already present in the event is never overwritten. For\n   * nested objects, such as the context, keys are merged.\n   *\n   * @param event The original event.\n   * @param hint May contain additional information about the original exception.\n   * @param scope A scope containing event metadata.\n   * @returns A new event with more information.\n   */\n  protected _prepareEvent(event: Event, hint: EventHint, scope?: Scope): PromiseLike<Event | null> {\n    const { normalizeDepth = 3, normalizeMaxBreadth = 1_000 } = this.getOptions();\n    const prepared: Event = {\n      ...event,\n      event_id: event.event_id || hint.event_id || uuid4(),\n      timestamp: event.timestamp || dateTimestampInSeconds(),\n    };\n\n    this._applyClientOptions(prepared);\n    this._applyIntegrationsMetadata(prepared);\n\n    // If we have scope given to us, use it as the base for further modifications.\n    // This allows us to prevent unnecessary copying of data if `captureContext` is not provided.\n    let finalScope = scope;\n    if (hint.captureContext) {\n      finalScope = Scope.clone(finalScope).update(hint.captureContext);\n    }\n\n    // We prepare the result here with a resolved Event.\n    let result = resolvedSyncPromise<Event | null>(prepared);\n\n    // This should be the last thing called, since we want that\n    // {@link Hub.addEventProcessor} gets the finished prepared event.\n    if (finalScope) {\n      // Collect attachments from the hint and scope\n      const attachments = [...(hint.attachments || []), ...finalScope.getAttachments()];\n\n      if (attachments.length) {\n        hint.attachments = attachments;\n      }\n\n      // In case we have a hub we reassign it.\n      result = finalScope.applyToEvent(prepared, hint);\n    }\n\n    return result.then(evt => {\n      if (typeof normalizeDepth === 'number' && normalizeDepth > 0) {\n        return this._normalizeEvent(evt, normalizeDepth, normalizeMaxBreadth);\n      }\n      return evt;\n    });\n  }\n\n  /**\n   * Applies `normalize` function on necessary `Event` attributes to make them safe for serialization.\n   * Normalized keys:\n   * - `breadcrumbs.data`\n   * - `user`\n   * - `contexts`\n   * - `extra`\n   * @param event Event\n   * @returns Normalized event\n   */\n  protected _normalizeEvent(event: Event | null, depth: number, maxBreadth: number): Event | null {\n    if (!event) {\n      return null;\n    }\n\n    const normalized: Event = {\n      ...event,\n      ...(event.breadcrumbs && {\n        breadcrumbs: event.breadcrumbs.map(b => ({\n          ...b,\n          ...(b.data && {\n            data: normalize(b.data, depth, maxBreadth),\n          }),\n        })),\n      }),\n      ...(event.user && {\n        user: normalize(event.user, depth, maxBreadth),\n      }),\n      ...(event.contexts && {\n        contexts: normalize(event.contexts, depth, maxBreadth),\n      }),\n      ...(event.extra && {\n        extra: normalize(event.extra, depth, maxBreadth),\n      }),\n    };\n\n    // event.contexts.trace stores information about a Transaction. Similarly,\n    // event.spans[] stores information about child Spans. Given that a\n    // Transaction is conceptually a Span, normalization should apply to both\n    // Transactions and Spans consistently.\n    // For now the decision is to skip normalization of Transactions and Spans,\n    // so this block overwrites the normalized event to add back the original\n    // Transaction information prior to normalization.\n    if (event.contexts && event.contexts.trace && normalized.contexts) {\n      normalized.contexts.trace = event.contexts.trace;\n\n      // event.contexts.trace.data may contain circular/dangerous data so we need to normalize it\n      if (event.contexts.trace.data) {\n        normalized.contexts.trace.data = normalize(event.contexts.trace.data, depth, maxBreadth);\n      }\n    }\n\n    // event.spans[].data may contain circular/dangerous data so we need to normalize it\n    if (event.spans) {\n      normalized.spans = event.spans.map(span => {\n        // We cannot use the spread operator here because `toJSON` on `span` is non-enumerable\n        if (span.data) {\n          span.data = normalize(span.data, depth, maxBreadth);\n        }\n        return span;\n      });\n    }\n\n    return normalized;\n  }\n\n  /**\n   *  Enhances event using the client configuration.\n   *  It takes care of all \"static\" values like environment, release and `dist`,\n   *  as well as truncating overly long values.\n   * @param event event instance to be enhanced\n   */\n  protected _applyClientOptions(event: Event): void {\n    const options = this.getOptions();\n    const { environment, release, dist, maxValueLength = 250 } = options;\n\n    if (!('environment' in event)) {\n      event.environment = 'environment' in options ? environment : 'production';\n    }\n\n    if (event.release === undefined && release !== undefined) {\n      event.release = release;\n    }\n\n    if (event.dist === undefined && dist !== undefined) {\n      event.dist = dist;\n    }\n\n    if (event.message) {\n      event.message = truncate(event.message, maxValueLength);\n    }\n\n    const exception = event.exception && event.exception.values && event.exception.values[0];\n    if (exception && exception.value) {\n      exception.value = truncate(exception.value, maxValueLength);\n    }\n\n    const request = event.request;\n    if (request && request.url) {\n      request.url = truncate(request.url, maxValueLength);\n    }\n  }\n\n  /**\n   * This function adds all used integrations to the SDK info in the event.\n   * @param event The event that will be filled with all integrations.\n   */\n  protected _applyIntegrationsMetadata(event: Event): void {\n    const integrationsArray = Object.keys(this._integrations);\n    if (integrationsArray.length > 0) {\n      event.sdk = event.sdk || {};\n      event.sdk.integrations = [...(event.sdk.integrations || []), ...integrationsArray];\n    }\n  }\n\n  /**\n   * Processes the event and logs an error in case of rejection\n   * @param event\n   * @param hint\n   * @param scope\n   */\n  protected _captureEvent(event: Event, hint: EventHint = {}, scope?: Scope): PromiseLike<string | undefined> {\n    return this._processEvent(event, hint, scope).then(\n      finalEvent => {\n        return finalEvent.event_id;\n      },\n      reason => {\n        __DEBUG_BUILD__ && logger.warn(reason);\n        return undefined;\n      },\n    );\n  }\n\n  /**\n   * Processes an event (either error or message) and sends it to Sentry.\n   *\n   * This also adds breadcrumbs and context information to the event. However,\n   * platform specific meta data (such as the User's IP address) must be added\n   * by the SDK implementor.\n   *\n   *\n   * @param event The event to send to Sentry.\n   * @param hint May contain additional information about the original exception.\n   * @param scope A scope containing event metadata.\n   * @returns A SyncPromise that resolves with the event or rejects in case event was/will not be send.\n   */\n  protected _processEvent(event: Event, hint: EventHint, scope?: Scope): PromiseLike<Event> {\n    const { beforeSend, sampleRate } = this.getOptions();\n\n    if (!this._isEnabled()) {\n      return rejectedSyncPromise(new SentryError('SDK not enabled, will not capture event.'));\n    }\n\n    const isTransaction = event.type === 'transaction';\n    // 1.0 === 100% events are sent\n    // 0.0 === 0% events are sent\n    // Sampling for transaction happens somewhere else\n    if (!isTransaction && typeof sampleRate === 'number' && Math.random() > sampleRate) {\n      this.recordDroppedEvent('sample_rate', 'error');\n      return rejectedSyncPromise(\n        new SentryError(\n          `Discarding event because it's not included in the random sample (sampling rate = ${sampleRate})`,\n        ),\n      );\n    }\n\n    return this._prepareEvent(event, hint, scope)\n      .then(prepared => {\n        if (prepared === null) {\n          this.recordDroppedEvent('event_processor', event.type || 'error');\n          throw new SentryError('An event processor returned null, will not send event.');\n        }\n\n        const isInternalException = hint.data && (hint.data as { __sentry__: boolean }).__sentry__ === true;\n        if (isInternalException || isTransaction || !beforeSend) {\n          return prepared;\n        }\n\n        const beforeSendResult = beforeSend(prepared, hint);\n        return _ensureBeforeSendRv(beforeSendResult);\n      })\n      .then(processedEvent => {\n        if (processedEvent === null) {\n          this.recordDroppedEvent('before_send', event.type || 'error');\n          throw new SentryError('`beforeSend` returned `null`, will not send event.');\n        }\n\n        const session = scope && scope.getSession();\n        if (!isTransaction && session) {\n          this._updateSessionFromEvent(session, processedEvent);\n        }\n\n        this.sendEvent(processedEvent, hint);\n        return processedEvent;\n      })\n      .then(null, reason => {\n        if (reason instanceof SentryError) {\n          throw reason;\n        }\n\n        this.captureException(reason, {\n          data: {\n            __sentry__: true,\n          },\n          originalException: reason as Error,\n        });\n        throw new SentryError(\n          `Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.\\nReason: ${reason}`,\n        );\n      });\n  }\n\n  /**\n   * Occupies the client with processing and event\n   */\n  protected _process<T>(promise: PromiseLike<T>): void {\n    this._numProcessing += 1;\n    void promise.then(\n      value => {\n        this._numProcessing -= 1;\n        return value;\n      },\n      reason => {\n        this._numProcessing -= 1;\n        return reason;\n      },\n    );\n  }\n\n  /**\n   * @inheritdoc\n   */\n  protected _sendEnvelope(envelope: Envelope): void {\n    if (this._transport && this._dsn) {\n      this._transport.send(envelope).then(null, reason => {\n        __DEBUG_BUILD__ && logger.error('Error while sending event:', reason);\n      });\n    } else {\n      __DEBUG_BUILD__ && logger.error('Transport disabled');\n    }\n  }\n\n  /**\n   * Clears outcomes on this client and returns them.\n   */\n  protected _clearOutcomes(): Outcome[] {\n    const outcomes = this._outcomes;\n    this._outcomes = {};\n    return Object.keys(outcomes).map(key => {\n      const [reason, category] = key.split(':') as [EventDropReason, DataCategory];\n      return {\n        reason,\n        category,\n        quantity: outcomes[key],\n      };\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  public abstract eventFromException(_exception: any, _hint?: EventHint): PromiseLike<Event>;\n\n  /**\n   * @inheritDoc\n   */\n  public abstract eventFromMessage(\n    _message: string,\n    // eslint-disable-next-line deprecation/deprecation\n    _level?: Severity | SeverityLevel,\n    _hint?: EventHint,\n  ): PromiseLike<Event>;\n}\n\n/**\n * Verifies that return value of configured `beforeSend` is of expected type.\n */\nfunction _ensureBeforeSendRv(rv: PromiseLike<Event | null> | Event | null): PromiseLike<Event | null> | Event | null {\n  const nullErr = '`beforeSend` method has to return `null` or a valid event.';\n  if (isThenable(rv)) {\n    return rv.then(\n      event => {\n        if (!(isPlainObject(event) || event === null)) {\n          throw new SentryError(nullErr);\n        }\n        return event;\n      },\n      e => {\n        throw new SentryError(`beforeSend rejected with ${e}`);\n      },\n    );\n  } else if (!(isPlainObject(rv) || rv === null)) {\n    throw new SentryError(nullErr);\n  }\n  return rv;\n}\n","import {\n  Envelope,\n  EnvelopeItem,\n  EventDropReason,\n  InternalBaseTransportOptions,\n  Transport,\n  TransportRequestExecutor,\n} from '@sentry/types';\nimport {\n  createEnvelope,\n  envelopeItemTypeToDataCategory,\n  forEachEnvelopeItem,\n  isRateLimited,\n  logger,\n  makePromiseBuffer,\n  PromiseBuffer,\n  RateLimits,\n  resolvedSyncPromise,\n  SentryError,\n  serializeEnvelope,\n  updateRateLimits,\n} from '@sentry/utils';\n\nexport const DEFAULT_TRANSPORT_BUFFER_SIZE = 30;\n\n/**\n * Creates an instance of a Sentry `Transport`\n *\n * @param options\n * @param makeRequest\n */\nexport function createTransport(\n  options: InternalBaseTransportOptions,\n  makeRequest: TransportRequestExecutor,\n  buffer: PromiseBuffer<void> = makePromiseBuffer(options.bufferSize || DEFAULT_TRANSPORT_BUFFER_SIZE),\n): Transport {\n  let rateLimits: RateLimits = {};\n\n  const flush = (timeout?: number): PromiseLike<boolean> => buffer.drain(timeout);\n\n  function send(envelope: Envelope): PromiseLike<void> {\n    const filteredEnvelopeItems: EnvelopeItem[] = [];\n\n    // Drop rate limited items from envelope\n    forEachEnvelopeItem(envelope, (item, type) => {\n      const envelopeItemDataCategory = envelopeItemTypeToDataCategory(type);\n      if (isRateLimited(rateLimits, envelopeItemDataCategory)) {\n        options.recordDroppedEvent('ratelimit_backoff', envelopeItemDataCategory);\n      } else {\n        filteredEnvelopeItems.push(item);\n      }\n    });\n\n    // Skip sending if envelope is empty after filtering out rate limited events\n    if (filteredEnvelopeItems.length === 0) {\n      return resolvedSyncPromise();\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const filteredEnvelope: Envelope = createEnvelope(envelope[0], filteredEnvelopeItems as any);\n\n    // Creates client report for each item in an envelope\n    const recordEnvelopeLoss = (reason: EventDropReason): void => {\n      forEachEnvelopeItem(filteredEnvelope, (_, type) => {\n        options.recordDroppedEvent(reason, envelopeItemTypeToDataCategory(type));\n      });\n    };\n\n    const requestTask = (): PromiseLike<void> =>\n      makeRequest({ body: serializeEnvelope(filteredEnvelope, options.textEncoder) }).then(\n        response => {\n          // We don't want to throw on NOK responses, but we want to at least log them\n          if (response.statusCode !== undefined && (response.statusCode < 200 || response.statusCode >= 300)) {\n            __DEBUG_BUILD__ && logger.warn(`Sentry responded with status code ${response.statusCode} to sent event.`);\n          }\n\n          rateLimits = updateRateLimits(rateLimits, response);\n        },\n        error => {\n          __DEBUG_BUILD__ && logger.error('Failed while sending event:', error);\n          recordEnvelopeLoss('network_error');\n        },\n      );\n\n    return buffer.add(requestTask).then(\n      result => result,\n      error => {\n        if (error instanceof SentryError) {\n          __DEBUG_BUILD__ && logger.error('Skipped sending event due to full buffer');\n          recordEnvelopeLoss('queue_overflow');\n          return resolvedSyncPromise();\n        } else {\n          throw error;\n        }\n      },\n    );\n  }\n\n  return {\n    send,\n    flush,\n  };\n}\n","import { Integration, WrappedFunction } from '@sentry/types';\nimport { getOriginalFunction } from '@sentry/utils';\n\nlet originalFunctionToString: () => void;\n\n/** Patch toString calls to return proper name for wrapped functions */\nexport class FunctionToString implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'FunctionToString';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = FunctionToString.id;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    originalFunctionToString = Function.prototype.toString;\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Function.prototype.toString = function (this: WrappedFunction, ...args: any[]): string {\n      const context = getOriginalFunction(this) || this;\n      return originalFunctionToString.apply(context, args);\n    };\n  }\n}\n","export const SDK_VERSION = '7.7.0';\n","import { Event, EventProcessor, Hub, Integration, StackFrame } from '@sentry/types';\nimport { getEventDescription, isMatchingPattern, logger } from '@sentry/utils';\n\n// \"Script error.\" is hard coded into browsers for errors that it can't read.\n// this is the result of a script being pulled in from an external domain and CORS.\nconst DEFAULT_IGNORE_ERRORS = [/^Script error\\.?$/, /^Javascript error: Script error\\.? on line 0$/];\n\n/** Options for the InboundFilters integration */\nexport interface InboundFiltersOptions {\n  allowUrls: Array<string | RegExp>;\n  denyUrls: Array<string | RegExp>;\n  ignoreErrors: Array<string | RegExp>;\n  ignoreInternal: boolean;\n}\n\n/** Inbound filters configurable by the user */\nexport class InboundFilters implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'InboundFilters';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = InboundFilters.id;\n\n  public constructor(private readonly _options: Partial<InboundFiltersOptions> = {}) {}\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(addGlobalEventProcessor: (processor: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    const eventProcess: EventProcessor = (event: Event) => {\n      const hub = getCurrentHub();\n      if (hub) {\n        const self = hub.getIntegration(InboundFilters);\n        if (self) {\n          const client = hub.getClient();\n          const clientOptions = client ? client.getOptions() : {};\n          const options = _mergeOptions(self._options, clientOptions);\n          return _shouldDropEvent(event, options) ? null : event;\n        }\n      }\n      return event;\n    };\n\n    eventProcess.id = this.name;\n    addGlobalEventProcessor(eventProcess);\n  }\n}\n\n/** JSDoc */\nexport function _mergeOptions(\n  internalOptions: Partial<InboundFiltersOptions> = {},\n  clientOptions: Partial<InboundFiltersOptions> = {},\n): Partial<InboundFiltersOptions> {\n  return {\n    allowUrls: [...(internalOptions.allowUrls || []), ...(clientOptions.allowUrls || [])],\n    denyUrls: [...(internalOptions.denyUrls || []), ...(clientOptions.denyUrls || [])],\n    ignoreErrors: [\n      ...(internalOptions.ignoreErrors || []),\n      ...(clientOptions.ignoreErrors || []),\n      ...DEFAULT_IGNORE_ERRORS,\n    ],\n    ignoreInternal: internalOptions.ignoreInternal !== undefined ? internalOptions.ignoreInternal : true,\n  };\n}\n\n/** JSDoc */\nexport function _shouldDropEvent(event: Event, options: Partial<InboundFiltersOptions>): boolean {\n  if (options.ignoreInternal && _isSentryError(event)) {\n    __DEBUG_BUILD__ &&\n      logger.warn(`Event dropped due to being internal Sentry Error.\\nEvent: ${getEventDescription(event)}`);\n    return true;\n  }\n  if (_isIgnoredError(event, options.ignoreErrors)) {\n    __DEBUG_BUILD__ &&\n      logger.warn(\n        `Event dropped due to being matched by \\`ignoreErrors\\` option.\\nEvent: ${getEventDescription(event)}`,\n      );\n    return true;\n  }\n  if (_isDeniedUrl(event, options.denyUrls)) {\n    __DEBUG_BUILD__ &&\n      logger.warn(\n        `Event dropped due to being matched by \\`denyUrls\\` option.\\nEvent: ${getEventDescription(\n          event,\n        )}.\\nUrl: ${_getEventFilterUrl(event)}`,\n      );\n    return true;\n  }\n  if (!_isAllowedUrl(event, options.allowUrls)) {\n    __DEBUG_BUILD__ &&\n      logger.warn(\n        `Event dropped due to not being matched by \\`allowUrls\\` option.\\nEvent: ${getEventDescription(\n          event,\n        )}.\\nUrl: ${_getEventFilterUrl(event)}`,\n      );\n    return true;\n  }\n  return false;\n}\n\nfunction _isIgnoredError(event: Event, ignoreErrors?: Array<string | RegExp>): boolean {\n  if (!ignoreErrors || !ignoreErrors.length) {\n    return false;\n  }\n\n  return _getPossibleEventMessages(event).some(message =>\n    ignoreErrors.some(pattern => isMatchingPattern(message, pattern)),\n  );\n}\n\nfunction _isDeniedUrl(event: Event, denyUrls?: Array<string | RegExp>): boolean {\n  // TODO: Use Glob instead?\n  if (!denyUrls || !denyUrls.length) {\n    return false;\n  }\n  const url = _getEventFilterUrl(event);\n  return !url ? false : denyUrls.some(pattern => isMatchingPattern(url, pattern));\n}\n\nfunction _isAllowedUrl(event: Event, allowUrls?: Array<string | RegExp>): boolean {\n  // TODO: Use Glob instead?\n  if (!allowUrls || !allowUrls.length) {\n    return true;\n  }\n  const url = _getEventFilterUrl(event);\n  return !url ? true : allowUrls.some(pattern => isMatchingPattern(url, pattern));\n}\n\nfunction _getPossibleEventMessages(event: Event): string[] {\n  if (event.message) {\n    return [event.message];\n  }\n  if (event.exception) {\n    try {\n      const { type = '', value = '' } = (event.exception.values && event.exception.values[0]) || {};\n      return [`${value}`, `${type}: ${value}`];\n    } catch (oO) {\n      __DEBUG_BUILD__ && logger.error(`Cannot extract message for event ${getEventDescription(event)}`);\n      return [];\n    }\n  }\n  return [];\n}\n\nfunction _isSentryError(event: Event): boolean {\n  try {\n    // @ts-ignore can't be a sentry error if undefined\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    return event.exception.values[0].type === 'SentryError';\n  } catch (e) {\n    // ignore\n  }\n  return false;\n}\n\nfunction _getLastValidUrl(frames: StackFrame[] = []): string | null {\n  for (let i = frames.length - 1; i >= 0; i--) {\n    const frame = frames[i];\n\n    if (frame && frame.filename !== '<anonymous>' && frame.filename !== '[native code]') {\n      return frame.filename || null;\n    }\n  }\n\n  return null;\n}\n\nfunction _getEventFilterUrl(event: Event): string | null {\n  try {\n    let frames;\n    try {\n      // @ts-ignore we only care about frames if the whole thing here is defined\n      frames = event.exception.values[0].stacktrace.frames;\n    } catch (e) {\n      // ignore\n    }\n    return frames ? _getLastValidUrl(frames) : null;\n  } catch (oO) {\n    __DEBUG_BUILD__ && logger.error(`Cannot extract url for event ${getEventDescription(event)}`);\n    return null;\n  }\n}\n","import { Event, EventHint, Exception, Severity, SeverityLevel, StackFrame, StackParser } from '@sentry/types';\nimport {\n  addExceptionMechanism,\n  addExceptionTypeValue,\n  extractExceptionKeysForMessage,\n  isDOMError,\n  isDOMException,\n  isError,\n  isErrorEvent,\n  isEvent,\n  isPlainObject,\n  normalizeToSize,\n  resolvedSyncPromise,\n} from '@sentry/utils';\n\n/**\n * This function creates an exception from a JavaScript Error\n */\nexport function exceptionFromError(stackParser: StackParser, ex: Error): Exception {\n  // Get the frames first since Opera can lose the stack if we touch anything else first\n  const frames = parseStackFrames(stackParser, ex);\n\n  const exception: Exception = {\n    type: ex && ex.name,\n    value: extractMessage(ex),\n  };\n\n  if (frames.length) {\n    exception.stacktrace = { frames };\n  }\n\n  if (exception.type === undefined && exception.value === '') {\n    exception.value = 'Unrecoverable error caught';\n  }\n\n  return exception;\n}\n\n/**\n * @hidden\n */\nexport function eventFromPlainObject(\n  stackParser: StackParser,\n  exception: Record<string, unknown>,\n  syntheticException?: Error,\n  isUnhandledRejection?: boolean,\n): Event {\n  const event: Event = {\n    exception: {\n      values: [\n        {\n          type: isEvent(exception) ? exception.constructor.name : isUnhandledRejection ? 'UnhandledRejection' : 'Error',\n          value: `Non-Error ${\n            isUnhandledRejection ? 'promise rejection' : 'exception'\n          } captured with keys: ${extractExceptionKeysForMessage(exception)}`,\n        },\n      ],\n    },\n    extra: {\n      __serialized__: normalizeToSize(exception),\n    },\n  };\n\n  if (syntheticException) {\n    const frames = parseStackFrames(stackParser, syntheticException);\n    if (frames.length) {\n      // event.exception.values[0] has been set above\n      (event.exception as { values: Exception[] }).values[0].stacktrace = { frames };\n    }\n  }\n\n  return event;\n}\n\n/**\n * @hidden\n */\nexport function eventFromError(stackParser: StackParser, ex: Error): Event {\n  return {\n    exception: {\n      values: [exceptionFromError(stackParser, ex)],\n    },\n  };\n}\n\n/** Parses stack frames from an error */\nexport function parseStackFrames(\n  stackParser: StackParser,\n  ex: Error & { framesToPop?: number; stacktrace?: string },\n): StackFrame[] {\n  // Access and store the stacktrace property before doing ANYTHING\n  // else to it because Opera is not very good at providing it\n  // reliably in other circumstances.\n  const stacktrace = ex.stacktrace || ex.stack || '';\n\n  const popSize = getPopSize(ex);\n\n  try {\n    return stackParser(stacktrace, popSize);\n  } catch (e) {\n    // no-empty\n  }\n\n  return [];\n}\n\n// Based on our own mapping pattern - https://github.com/getsentry/sentry/blob/9f08305e09866c8bd6d0c24f5b0aabdd7dd6c59c/src/sentry/lang/javascript/errormapping.py#L83-L108\nconst reactMinifiedRegexp = /Minified React error #\\d+;/i;\n\nfunction getPopSize(ex: Error & { framesToPop?: number }): number {\n  if (ex) {\n    if (typeof ex.framesToPop === 'number') {\n      return ex.framesToPop;\n    }\n\n    if (reactMinifiedRegexp.test(ex.message)) {\n      return 1;\n    }\n  }\n\n  return 0;\n}\n\n/**\n * There are cases where stacktrace.message is an Event object\n * https://github.com/getsentry/sentry-javascript/issues/1949\n * In this specific case we try to extract stacktrace.message.error.message\n */\nfunction extractMessage(ex: Error & { message: { error?: Error } }): string {\n  const message = ex && ex.message;\n  if (!message) {\n    return 'No error message';\n  }\n  if (message.error && typeof message.error.message === 'string') {\n    return message.error.message;\n  }\n  return message;\n}\n\n/**\n * Creates an {@link Event} from all inputs to `captureException` and non-primitive inputs to `captureMessage`.\n * @hidden\n */\nexport function eventFromException(\n  stackParser: StackParser,\n  exception: unknown,\n  hint?: EventHint,\n  attachStacktrace?: boolean,\n): PromiseLike<Event> {\n  const syntheticException = (hint && hint.syntheticException) || undefined;\n  const event = eventFromUnknownInput(stackParser, exception, syntheticException, attachStacktrace);\n  addExceptionMechanism(event); // defaults to { type: 'generic', handled: true }\n  event.level = 'error';\n  if (hint && hint.event_id) {\n    event.event_id = hint.event_id;\n  }\n  return resolvedSyncPromise(event);\n}\n\n/**\n * Builds and Event from a Message\n * @hidden\n */\nexport function eventFromMessage(\n  stackParser: StackParser,\n  message: string,\n  // eslint-disable-next-line deprecation/deprecation\n  level: Severity | SeverityLevel = 'info',\n  hint?: EventHint,\n  attachStacktrace?: boolean,\n): PromiseLike<Event> {\n  const syntheticException = (hint && hint.syntheticException) || undefined;\n  const event = eventFromString(stackParser, message, syntheticException, attachStacktrace);\n  event.level = level;\n  if (hint && hint.event_id) {\n    event.event_id = hint.event_id;\n  }\n  return resolvedSyncPromise(event);\n}\n\n/**\n * @hidden\n */\nexport function eventFromUnknownInput(\n  stackParser: StackParser,\n  exception: unknown,\n  syntheticException?: Error,\n  attachStacktrace?: boolean,\n  isUnhandledRejection?: boolean,\n): Event {\n  let event: Event;\n\n  if (isErrorEvent(exception as ErrorEvent) && (exception as ErrorEvent).error) {\n    // If it is an ErrorEvent with `error` property, extract it to get actual Error\n    const errorEvent = exception as ErrorEvent;\n    return eventFromError(stackParser, errorEvent.error as Error);\n  }\n\n  // If it is a `DOMError` (which is a legacy API, but still supported in some browsers) then we just extract the name\n  // and message, as it doesn't provide anything else. According to the spec, all `DOMExceptions` should also be\n  // `Error`s, but that's not the case in IE11, so in that case we treat it the same as we do a `DOMError`.\n  //\n  // https://developer.mozilla.org/en-US/docs/Web/API/DOMError\n  // https://developer.mozilla.org/en-US/docs/Web/API/DOMException\n  // https://webidl.spec.whatwg.org/#es-DOMException-specialness\n  if (isDOMError(exception as DOMError) || isDOMException(exception as DOMException)) {\n    const domException = exception as DOMException;\n\n    if ('stack' in (exception as Error)) {\n      event = eventFromError(stackParser, exception as Error);\n    } else {\n      const name = domException.name || (isDOMError(domException) ? 'DOMError' : 'DOMException');\n      const message = domException.message ? `${name}: ${domException.message}` : name;\n      event = eventFromString(stackParser, message, syntheticException, attachStacktrace);\n      addExceptionTypeValue(event, message);\n    }\n    if ('code' in domException) {\n      event.tags = { ...event.tags, 'DOMException.code': `${domException.code}` };\n    }\n\n    return event;\n  }\n  if (isError(exception)) {\n    // we have a real Error object, do nothing\n    return eventFromError(stackParser, exception);\n  }\n  if (isPlainObject(exception) || isEvent(exception)) {\n    // If it's a plain object or an instance of `Event` (the built-in JS kind, not this SDK's `Event` type), serialize\n    // it manually. This will allow us to group events based on top-level keys which is much better than creating a new\n    // group on any key/value change.\n    const objectException = exception as Record<string, unknown>;\n    event = eventFromPlainObject(stackParser, objectException, syntheticException, isUnhandledRejection);\n    addExceptionMechanism(event, {\n      synthetic: true,\n    });\n    return event;\n  }\n\n  // If none of previous checks were valid, then it means that it's not:\n  // - an instance of DOMError\n  // - an instance of DOMException\n  // - an instance of Event\n  // - an instance of Error\n  // - a valid ErrorEvent (one with an error property)\n  // - a plain Object\n  //\n  // So bail out and capture it as a simple message:\n  event = eventFromString(stackParser, exception as string, syntheticException, attachStacktrace);\n  addExceptionTypeValue(event, `${exception}`, undefined);\n  addExceptionMechanism(event, {\n    synthetic: true,\n  });\n\n  return event;\n}\n\n/**\n * @hidden\n */\nexport function eventFromString(\n  stackParser: StackParser,\n  input: string,\n  syntheticException?: Error,\n  attachStacktrace?: boolean,\n): Event {\n  const event: Event = {\n    message: input,\n  };\n\n  if (attachStacktrace && syntheticException) {\n    const frames = parseStackFrames(stackParser, syntheticException);\n    if (frames.length) {\n      event.exception = {\n        values: [{ value: input, stacktrace: { frames } }],\n      };\n    }\n  }\n\n  return event;\n}\n","/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable max-lines */\nimport { getCurrentHub } from '@sentry/core';\nimport { Integration } from '@sentry/types';\nimport {\n  addInstrumentationHandler,\n  getGlobalObject,\n  htmlTreeAsString,\n  parseUrl,\n  safeJoin,\n  severityLevelFromString,\n} from '@sentry/utils';\n\n/** JSDoc */\ninterface BreadcrumbsOptions {\n  console: boolean;\n  dom: boolean | { serializeAttribute: string | string[] };\n  fetch: boolean;\n  history: boolean;\n  sentry: boolean;\n  xhr: boolean;\n}\n\nexport const BREADCRUMB_INTEGRATION_ID = 'Breadcrumbs';\n\n/**\n * Default Breadcrumbs instrumentations\n * TODO: Deprecated - with v6, this will be renamed to `Instrument`\n */\nexport class Breadcrumbs implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = BREADCRUMB_INTEGRATION_ID;\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Breadcrumbs.id;\n\n  /**\n   * Options of the breadcrumbs integration.\n   */\n  // This field is public, because we use it in the browser client to check if the `sentry` option is enabled.\n  public readonly options: Readonly<BreadcrumbsOptions>;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options?: Partial<BreadcrumbsOptions>) {\n    this.options = {\n      console: true,\n      dom: true,\n      fetch: true,\n      history: true,\n      sentry: true,\n      xhr: true,\n      ...options,\n    };\n  }\n\n  /**\n   * Instrument browser built-ins w/ breadcrumb capturing\n   *  - Console API\n   *  - DOM API (click/typing)\n   *  - XMLHttpRequest API\n   *  - Fetch API\n   *  - History API\n   */\n  public setupOnce(): void {\n    if (this.options.console) {\n      addInstrumentationHandler('console', _consoleBreadcrumb);\n    }\n    if (this.options.dom) {\n      addInstrumentationHandler('dom', _domBreadcrumb(this.options.dom));\n    }\n    if (this.options.xhr) {\n      addInstrumentationHandler('xhr', _xhrBreadcrumb);\n    }\n    if (this.options.fetch) {\n      addInstrumentationHandler('fetch', _fetchBreadcrumb);\n    }\n    if (this.options.history) {\n      addInstrumentationHandler('history', _historyBreadcrumb);\n    }\n  }\n}\n\n/**\n * A HOC that creaes a function that creates breadcrumbs from DOM API calls.\n * This is a HOC so that we get access to dom options in the closure.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _domBreadcrumb(dom: BreadcrumbsOptions['dom']): (handlerData: { [key: string]: any }) => void {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  function _innerDomBreadcrumb(handlerData: { [key: string]: any }): void {\n    let target;\n    let keyAttrs = typeof dom === 'object' ? dom.serializeAttribute : undefined;\n\n    if (typeof keyAttrs === 'string') {\n      keyAttrs = [keyAttrs];\n    }\n\n    // Accessing event.target can throw (see getsentry/raven-js#838, #768)\n    try {\n      target = handlerData.event.target\n        ? htmlTreeAsString(handlerData.event.target as Node, keyAttrs)\n        : htmlTreeAsString(handlerData.event as unknown as Node, keyAttrs);\n    } catch (e) {\n      target = '<unknown>';\n    }\n\n    if (target.length === 0) {\n      return;\n    }\n\n    getCurrentHub().addBreadcrumb(\n      {\n        category: `ui.${handlerData.name}`,\n        message: target,\n      },\n      {\n        event: handlerData.event,\n        name: handlerData.name,\n        global: handlerData.global,\n      },\n    );\n  }\n\n  return _innerDomBreadcrumb;\n}\n\n/**\n * Creates breadcrumbs from console API calls\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _consoleBreadcrumb(handlerData: { [key: string]: any }): void {\n  const breadcrumb = {\n    category: 'console',\n    data: {\n      arguments: handlerData.args,\n      logger: 'console',\n    },\n    level: severityLevelFromString(handlerData.level),\n    message: safeJoin(handlerData.args, ' '),\n  };\n\n  if (handlerData.level === 'assert') {\n    if (handlerData.args[0] === false) {\n      breadcrumb.message = `Assertion failed: ${safeJoin(handlerData.args.slice(1), ' ') || 'console.assert'}`;\n      breadcrumb.data.arguments = handlerData.args.slice(1);\n    } else {\n      // Don't capture a breadcrumb for passed assertions\n      return;\n    }\n  }\n\n  getCurrentHub().addBreadcrumb(breadcrumb, {\n    input: handlerData.args,\n    level: handlerData.level,\n  });\n}\n\n/**\n * Creates breadcrumbs from XHR API calls\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _xhrBreadcrumb(handlerData: { [key: string]: any }): void {\n  if (handlerData.endTimestamp) {\n    // We only capture complete, non-sentry requests\n    if (handlerData.xhr.__sentry_own_request__) {\n      return;\n    }\n\n    const { method, url, status_code, body } = handlerData.xhr.__sentry_xhr__ || {};\n\n    getCurrentHub().addBreadcrumb(\n      {\n        category: 'xhr',\n        data: {\n          method,\n          url,\n          status_code,\n        },\n        type: 'http',\n      },\n      {\n        xhr: handlerData.xhr,\n        input: body,\n      },\n    );\n\n    return;\n  }\n}\n\n/**\n * Creates breadcrumbs from fetch API calls\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _fetchBreadcrumb(handlerData: { [key: string]: any }): void {\n  // We only capture complete fetch requests\n  if (!handlerData.endTimestamp) {\n    return;\n  }\n\n  if (handlerData.fetchData.url.match(/sentry_key/) && handlerData.fetchData.method === 'POST') {\n    // We will not create breadcrumbs for fetch requests that contain `sentry_key` (internal sentry requests)\n    return;\n  }\n\n  if (handlerData.error) {\n    getCurrentHub().addBreadcrumb(\n      {\n        category: 'fetch',\n        data: handlerData.fetchData,\n        level: 'error',\n        type: 'http',\n      },\n      {\n        data: handlerData.error,\n        input: handlerData.args,\n      },\n    );\n  } else {\n    getCurrentHub().addBreadcrumb(\n      {\n        category: 'fetch',\n        data: {\n          ...handlerData.fetchData,\n          status_code: handlerData.response.status,\n        },\n        type: 'http',\n      },\n      {\n        input: handlerData.args,\n        response: handlerData.response,\n      },\n    );\n  }\n}\n\n/**\n * Creates breadcrumbs from history API calls\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _historyBreadcrumb(handlerData: { [key: string]: any }): void {\n  const global = getGlobalObject<Window>();\n  let from = handlerData.from;\n  let to = handlerData.to;\n  const parsedLoc = parseUrl(global.location.href);\n  let parsedFrom = parseUrl(from);\n  const parsedTo = parseUrl(to);\n\n  // Initial pushState doesn't provide `from` information\n  if (!parsedFrom.path) {\n    parsedFrom = parsedLoc;\n  }\n\n  // Use only the path component of the URL if the URL matches the current\n  // document (almost all the time when using pushState)\n  if (parsedLoc.protocol === parsedTo.protocol && parsedLoc.host === parsedTo.host) {\n    to = parsedTo.relative;\n  }\n  if (parsedLoc.protocol === parsedFrom.protocol && parsedLoc.host === parsedFrom.host) {\n    from = parsedFrom.relative;\n  }\n\n  getCurrentHub().addBreadcrumb({\n    category: 'navigation',\n    data: {\n      from,\n      to,\n    },\n  });\n}\n","import { getGlobalObject, isNativeFetch, logger, supportsFetch } from '@sentry/utils';\n\nconst global = getGlobalObject<Window>();\nlet cachedFetchImpl: FetchImpl;\n\nexport type FetchImpl = typeof fetch;\n\n/**\n * A special usecase for incorrectly wrapped Fetch APIs in conjunction with ad-blockers.\n * Whenever someone wraps the Fetch API and returns the wrong promise chain,\n * this chain becomes orphaned and there is no possible way to capture it's rejections\n * other than allowing it bubble up to this very handler. eg.\n *\n * const f = window.fetch;\n * window.fetch = function () {\n *   const p = f.apply(this, arguments);\n *\n *   p.then(function() {\n *     console.log('hi.');\n *   });\n *\n *   return p;\n * }\n *\n * `p.then(function () { ... })` is producing a completely separate promise chain,\n * however, what's returned is `p` - the result of original `fetch` call.\n *\n * This mean, that whenever we use the Fetch API to send our own requests, _and_\n * some ad-blocker blocks it, this orphaned chain will _always_ reject,\n * effectively causing another event to be captured.\n * This makes a whole process become an infinite loop, which we need to somehow\n * deal with, and break it in one way or another.\n *\n * To deal with this issue, we are making sure that we _always_ use the real\n * browser Fetch API, instead of relying on what `window.fetch` exposes.\n * The only downside to this would be missing our own requests as breadcrumbs,\n * but because we are already not doing this, it should be just fine.\n *\n * Possible failed fetch error messages per-browser:\n *\n * Chrome:  Failed to fetch\n * Edge:    Failed to Fetch\n * Firefox: NetworkError when attempting to fetch resource\n * Safari:  resource blocked by content blocker\n */\nexport function getNativeFetchImplementation(): FetchImpl {\n  if (cachedFetchImpl) {\n    return cachedFetchImpl;\n  }\n\n  /* eslint-disable @typescript-eslint/unbound-method */\n\n  // Fast path to avoid DOM I/O\n  if (isNativeFetch(global.fetch)) {\n    return (cachedFetchImpl = global.fetch.bind(global));\n  }\n\n  const document = global.document;\n  let fetchImpl = global.fetch;\n  // eslint-disable-next-line deprecation/deprecation\n  if (document && typeof document.createElement === 'function') {\n    try {\n      const sandbox = document.createElement('iframe');\n      sandbox.hidden = true;\n      document.head.appendChild(sandbox);\n      const contentWindow = sandbox.contentWindow;\n      if (contentWindow && contentWindow.fetch) {\n        fetchImpl = contentWindow.fetch;\n      }\n      document.head.removeChild(sandbox);\n    } catch (e) {\n      __DEBUG_BUILD__ &&\n        logger.warn('Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ', e);\n    }\n  }\n\n  return (cachedFetchImpl = fetchImpl.bind(global));\n  /* eslint-enable @typescript-eslint/unbound-method */\n}\n\n/**\n * Sends sdk client report using sendBeacon or fetch as a fallback if available\n *\n * @param url report endpoint\n * @param body report payload\n */\nexport function sendReport(url: string, body: string | Uint8Array): void {\n  const isRealNavigator = Object.prototype.toString.call(global && global.navigator) === '[object Navigator]';\n  const hasSendBeacon = isRealNavigator && typeof global.navigator.sendBeacon === 'function';\n\n  if (hasSendBeacon) {\n    // Prevent illegal invocations - https://xgwang.me/posts/you-may-not-know-beacon/#it-may-throw-error%2C-be-sure-to-catch\n    const sendBeacon = global.navigator.sendBeacon.bind(global.navigator);\n    sendBeacon(url, body);\n  } else if (supportsFetch()) {\n    const fetch = getNativeFetchImplementation();\n    fetch(url, {\n      body,\n      method: 'POST',\n      credentials: 'omit',\n      keepalive: true,\n    }).then(null, error => {\n      __DEBUG_BUILD__ && logger.error(error);\n    });\n  }\n}\n","import { BaseClient, getCurrentHub, getEnvelopeEndpointWithUrlEncodedAuth, Scope, SDK_VERSION } from '@sentry/core';\nimport { ClientOptions, Event, EventHint, Options, Severity, SeverityLevel } from '@sentry/types';\nimport {\n  createClientReportEnvelope,\n  dsnToString,\n  getEventDescription,\n  getGlobalObject,\n  logger,\n  serializeEnvelope,\n} from '@sentry/utils';\n\nimport { eventFromException, eventFromMessage } from './eventbuilder';\nimport { Breadcrumbs } from './integrations';\nimport { BREADCRUMB_INTEGRATION_ID } from './integrations/breadcrumbs';\nimport { BrowserTransportOptions } from './transports/types';\nimport { sendReport } from './transports/utils';\n\nconst globalObject = getGlobalObject<Window>();\n\nexport interface BaseBrowserOptions {\n  /**\n   * A pattern for error URLs which should exclusively be sent to Sentry.\n   * This is the opposite of {@link Options.denyUrls}.\n   * By default, all errors will be sent.\n   */\n  allowUrls?: Array<string | RegExp>;\n\n  /**\n   * A pattern for error URLs which should not be sent to Sentry.\n   * To allow certain errors instead, use {@link Options.allowUrls}.\n   * By default, all errors will be sent.\n   */\n  denyUrls?: Array<string | RegExp>;\n}\n\n/**\n * Configuration options for the Sentry Browser SDK.\n * @see @sentry/types Options for more information.\n */\nexport interface BrowserOptions extends Options<BrowserTransportOptions>, BaseBrowserOptions {}\n\n/**\n * Configuration options for the Sentry Browser SDK Client class\n * @see BrowserClient for more information.\n */\nexport interface BrowserClientOptions extends ClientOptions<BrowserTransportOptions>, BaseBrowserOptions {}\n\n/**\n * The Sentry Browser SDK Client.\n *\n * @see BrowserOptions for documentation on configuration options.\n * @see SentryClient for usage documentation.\n */\nexport class BrowserClient extends BaseClient<BrowserClientOptions> {\n  /**\n   * Creates a new Browser SDK instance.\n   *\n   * @param options Configuration options for this SDK.\n   */\n  public constructor(options: BrowserClientOptions) {\n    options._metadata = options._metadata || {};\n    options._metadata.sdk = options._metadata.sdk || {\n      name: 'sentry.javascript.browser',\n      packages: [\n        {\n          name: 'npm:@sentry/browser',\n          version: SDK_VERSION,\n        },\n      ],\n      version: SDK_VERSION,\n    };\n\n    super(options);\n\n    if (options.sendClientReports && globalObject.document) {\n      globalObject.document.addEventListener('visibilitychange', () => {\n        if (globalObject.document.visibilityState === 'hidden') {\n          this._flushOutcomes();\n        }\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromException(exception: unknown, hint?: EventHint): PromiseLike<Event> {\n    return eventFromException(this._options.stackParser, exception, hint, this._options.attachStacktrace);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromMessage(\n    message: string,\n    // eslint-disable-next-line deprecation/deprecation\n    level: Severity | SeverityLevel = 'info',\n    hint?: EventHint,\n  ): PromiseLike<Event> {\n    return eventFromMessage(this._options.stackParser, message, level, hint, this._options.attachStacktrace);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(event: Event, hint?: EventHint): void {\n    // We only want to add the sentry event breadcrumb when the user has the breadcrumb integration installed and\n    // activated its `sentry` option.\n    // We also do not want to use the `Breadcrumbs` class here directly, because we do not want it to be included in\n    // bundles, if it is not used by the SDK.\n    // This all sadly is a bit ugly, but we currently don't have a \"pre-send\" hook on the integrations so we do it this\n    // way for now.\n    const breadcrumbIntegration = this.getIntegrationById(BREADCRUMB_INTEGRATION_ID) as Breadcrumbs | null;\n    if (\n      breadcrumbIntegration &&\n      // We check for definedness of `options`, even though it is not strictly necessary, because that access to\n      // `.sentry` below does not throw, in case users provided their own integration with id \"Breadcrumbs\" that does\n      // not have an`options` field\n      breadcrumbIntegration.options &&\n      breadcrumbIntegration.options.sentry\n    ) {\n      getCurrentHub().addBreadcrumb(\n        {\n          category: `sentry.${event.type === 'transaction' ? 'transaction' : 'event'}`,\n          event_id: event.event_id,\n          level: event.level,\n          message: getEventDescription(event),\n        },\n        {\n          event,\n        },\n      );\n    }\n\n    super.sendEvent(event, hint);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected _prepareEvent(event: Event, hint: EventHint, scope?: Scope): PromiseLike<Event | null> {\n    event.platform = event.platform || 'javascript';\n    return super._prepareEvent(event, hint, scope);\n  }\n\n  /**\n   * Sends client reports as an envelope.\n   */\n  private _flushOutcomes(): void {\n    const outcomes = this._clearOutcomes();\n\n    if (outcomes.length === 0) {\n      __DEBUG_BUILD__ && logger.log('No outcomes to send');\n      return;\n    }\n\n    if (!this._dsn) {\n      __DEBUG_BUILD__ && logger.log('No dsn provided, will not send outcomes');\n      return;\n    }\n\n    __DEBUG_BUILD__ && logger.log('Sending outcomes:', outcomes);\n\n    const url = getEnvelopeEndpointWithUrlEncodedAuth(this._dsn, this._options);\n    const envelope = createClientReportEnvelope(outcomes, this._options.tunnel && dsnToString(this._dsn));\n\n    try {\n      sendReport(url, serializeEnvelope(envelope));\n    } catch (e) {\n      __DEBUG_BUILD__ && logger.error(e);\n    }\n  }\n}\n","import { ClientReport, ClientReportEnvelope, ClientReportItem } from '@sentry/types';\n\nimport { createEnvelope } from './envelope';\nimport { dateTimestampInSeconds } from './time';\n\n/**\n * Creates client report envelope\n * @param discarded_events An array of discard events\n * @param dsn A DSN that can be set on the header. Optional.\n */\nexport function createClientReportEnvelope(\n  discarded_events: ClientReport['discarded_events'],\n  dsn?: string,\n  timestamp?: number,\n): ClientReportEnvelope {\n  const clientReportItem: ClientReportItem = [\n    { type: 'client_report' },\n    {\n      timestamp: timestamp || dateTimestampInSeconds(),\n      discarded_events,\n    },\n  ];\n  return createEnvelope<ClientReportEnvelope>(dsn ? { dsn } : {}, [clientReportItem]);\n}\n","import { createTransport } from '@sentry/core';\nimport { Transport, TransportMakeRequestResponse, TransportRequest } from '@sentry/types';\n\nimport { BrowserTransportOptions } from './types';\nimport { FetchImpl, getNativeFetchImplementation } from './utils';\n\n/**\n * Creates a Transport that uses the Fetch API to send events to Sentry.\n */\nexport function makeFetchTransport(\n  options: BrowserTransportOptions,\n  nativeFetch: FetchImpl = getNativeFetchImplementation(),\n): Transport {\n  function makeRequest(request: TransportRequest): PromiseLike<TransportMakeRequestResponse> {\n    const requestOptions: RequestInit = {\n      body: request.body,\n      method: 'POST',\n      referrerPolicy: 'origin',\n      headers: options.headers,\n      ...options.fetchOptions,\n    };\n\n    return nativeFetch(options.url, requestOptions).then(response => ({\n      statusCode: response.status,\n      headers: {\n        'x-sentry-rate-limits': response.headers.get('X-Sentry-Rate-Limits'),\n        'retry-after': response.headers.get('Retry-After'),\n      },\n    }));\n  }\n\n  return createTransport(options, makeRequest);\n}\n","import { createTransport } from '@sentry/core';\nimport { Transport, TransportMakeRequestResponse, TransportRequest } from '@sentry/types';\nimport { SyncPromise } from '@sentry/utils';\n\nimport { BrowserTransportOptions } from './types';\n\n/**\n * The DONE ready state for XmlHttpRequest\n *\n * Defining it here as a constant b/c XMLHttpRequest.DONE is not always defined\n * (e.g. during testing, it is `undefined`)\n *\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/readyState}\n */\nconst XHR_READYSTATE_DONE = 4;\n\n/**\n * Creates a Transport that uses the XMLHttpRequest API to send events to Sentry.\n */\nexport function makeXHRTransport(options: BrowserTransportOptions): Transport {\n  function makeRequest(request: TransportRequest): PromiseLike<TransportMakeRequestResponse> {\n    return new SyncPromise((resolve, reject) => {\n      const xhr = new XMLHttpRequest();\n\n      xhr.onerror = reject;\n\n      xhr.onreadystatechange = (): void => {\n        if (xhr.readyState === XHR_READYSTATE_DONE) {\n          resolve({\n            statusCode: xhr.status,\n            headers: {\n              'x-sentry-rate-limits': xhr.getResponseHeader('X-Sentry-Rate-Limits'),\n              'retry-after': xhr.getResponseHeader('Retry-After'),\n            },\n          });\n        }\n      };\n\n      xhr.open('POST', options.url);\n\n      for (const header in options.headers) {\n        if (Object.prototype.hasOwnProperty.call(options.headers, header)) {\n          xhr.setRequestHeader(header, options.headers[header]);\n        }\n      }\n\n      xhr.send(request.body);\n    });\n  }\n\n  return createTransport(options, makeRequest);\n}\n","import { StackFrame, StackLineParser, StackLineParserFn } from '@sentry/types';\nimport { createStackParser } from '@sentry/utils';\n\n// global reference to slice\nconst UNKNOWN_FUNCTION = '?';\n\nconst OPERA10_PRIORITY = 10;\nconst OPERA11_PRIORITY = 20;\nconst CHROME_PRIORITY = 30;\nconst WINJS_PRIORITY = 40;\nconst GECKO_PRIORITY = 50;\n\nfunction createFrame(filename: string, func: string, lineno?: number, colno?: number): StackFrame {\n  const frame: StackFrame = {\n    filename,\n    function: func,\n    // All browser frames are considered in_app\n    in_app: true,\n  };\n\n  if (lineno !== undefined) {\n    frame.lineno = lineno;\n  }\n\n  if (colno !== undefined) {\n    frame.colno = colno;\n  }\n\n  return frame;\n}\n\n// Chromium based browsers: Chrome, Brave, new Opera, new Edge\nconst chromeRegex =\n  /^\\s*at (?:(.*?) ?\\((?:address at )?)?((?:file|https?|blob|chrome-extension|address|native|eval|webpack|<anonymous>|[-a-z]+:|.*bundle|\\/).*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i;\nconst chromeEvalRegex = /\\((\\S*)(?::(\\d+))(?::(\\d+))\\)/;\n\nconst chrome: StackLineParserFn = line => {\n  const parts = chromeRegex.exec(line);\n\n  if (parts) {\n    const isEval = parts[2] && parts[2].indexOf('eval') === 0; // start of line\n\n    if (isEval) {\n      const subMatch = chromeEvalRegex.exec(parts[2]);\n\n      if (subMatch) {\n        // throw out eval line/column and use top-most line/column number\n        parts[2] = subMatch[1]; // url\n        parts[3] = subMatch[2]; // line\n        parts[4] = subMatch[3]; // column\n      }\n    }\n\n    // Kamil: One more hack won't hurt us right? Understanding and adding more rules on top of these regexps right now\n    // would be way too time consuming. (TODO: Rewrite whole RegExp to be more readable)\n    const [func, filename] = extractSafariExtensionDetails(parts[1] || UNKNOWN_FUNCTION, parts[2]);\n\n    return createFrame(filename, func, parts[3] ? +parts[3] : undefined, parts[4] ? +parts[4] : undefined);\n  }\n\n  return;\n};\n\nexport const chromeStackLineParser: StackLineParser = [CHROME_PRIORITY, chrome];\n\n// gecko regex: `(?:bundle|\\d+\\.js)`: `bundle` is for react native, `\\d+\\.js` also but specifically for ram bundles because it\n// generates filenames without a prefix like `file://` the filenames in the stacktrace are just 42.js\n// We need this specific case for now because we want no other regex to match.\nconst geckoREgex =\n  /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)?((?:file|https?|blob|chrome|webpack|resource|moz-extension|capacitor).*?:\\/.*?|\\[native code\\]|[^@]*(?:bundle|\\d+\\.js)|\\/[\\w\\-. /=]+)(?::(\\d+))?(?::(\\d+))?\\s*$/i;\nconst geckoEvalRegex = /(\\S+) line (\\d+)(?: > eval line \\d+)* > eval/i;\n\nconst gecko: StackLineParserFn = line => {\n  const parts = geckoREgex.exec(line);\n\n  if (parts) {\n    const isEval = parts[3] && parts[3].indexOf(' > eval') > -1;\n    if (isEval) {\n      const subMatch = geckoEvalRegex.exec(parts[3]);\n\n      if (subMatch) {\n        // throw out eval line/column and use top-most line number\n        parts[1] = parts[1] || 'eval';\n        parts[3] = subMatch[1];\n        parts[4] = subMatch[2];\n        parts[5] = ''; // no column when eval\n      }\n    }\n\n    let filename = parts[3];\n    let func = parts[1] || UNKNOWN_FUNCTION;\n    [func, filename] = extractSafariExtensionDetails(func, filename);\n\n    return createFrame(filename, func, parts[4] ? +parts[4] : undefined, parts[5] ? +parts[5] : undefined);\n  }\n\n  return;\n};\n\nexport const geckoStackLineParser: StackLineParser = [GECKO_PRIORITY, gecko];\n\nconst winjsRegex =\n  /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i;\n\nconst winjs: StackLineParserFn = line => {\n  const parts = winjsRegex.exec(line);\n\n  return parts\n    ? createFrame(parts[2], parts[1] || UNKNOWN_FUNCTION, +parts[3], parts[4] ? +parts[4] : undefined)\n    : undefined;\n};\n\nexport const winjsStackLineParser: StackLineParser = [WINJS_PRIORITY, winjs];\n\nconst opera10Regex = / line (\\d+).*script (?:in )?(\\S+)(?:: in function (\\S+))?$/i;\n\nconst opera10: StackLineParserFn = line => {\n  const parts = opera10Regex.exec(line);\n  return parts ? createFrame(parts[2], parts[3] || UNKNOWN_FUNCTION, +parts[1]) : undefined;\n};\n\nexport const opera10StackLineParser: StackLineParser = [OPERA10_PRIORITY, opera10];\n\nconst opera11Regex =\n  / line (\\d+), column (\\d+)\\s*(?:in (?:<anonymous function: ([^>]+)>|([^)]+))\\(.*\\))? in (.*):\\s*$/i;\n\nconst opera11: StackLineParserFn = line => {\n  const parts = opera11Regex.exec(line);\n  return parts ? createFrame(parts[5], parts[3] || parts[4] || UNKNOWN_FUNCTION, +parts[1], +parts[2]) : undefined;\n};\n\nexport const opera11StackLineParser: StackLineParser = [OPERA11_PRIORITY, opera11];\n\nexport const defaultStackLineParsers = [chromeStackLineParser, geckoStackLineParser, winjsStackLineParser];\n\nexport const defaultStackParser = createStackParser(...defaultStackLineParsers);\n\n/**\n * Safari web extensions, starting version unknown, can produce \"frames-only\" stacktraces.\n * What it means, is that instead of format like:\n *\n * Error: wat\n *   at function@url:row:col\n *   at function@url:row:col\n *   at function@url:row:col\n *\n * it produces something like:\n *\n *   function@url:row:col\n *   function@url:row:col\n *   function@url:row:col\n *\n * Because of that, it won't be captured by `chrome` RegExp and will fall into `Gecko` branch.\n * This function is extracted so that we can use it in both places without duplicating the logic.\n * Unfortunately \"just\" changing RegExp is too complicated now and making it pass all tests\n * and fix this case seems like an impossible, or at least way too time-consuming task.\n */\nconst extractSafariExtensionDetails = (func: string, filename: string): [string, string] => {\n  const isSafariExtension = func.indexOf('safari-extension') !== -1;\n  const isSafariWebExtension = func.indexOf('safari-web-extension') !== -1;\n\n  return isSafariExtension || isSafariWebExtension\n    ? [\n        func.indexOf('@') !== -1 ? func.split('@')[0] : UNKNOWN_FUNCTION,\n        isSafariExtension ? `safari-extension:${filename}` : `safari-web-extension:${filename}`,\n      ]\n    : [func, filename];\n};\n","import { captureException, withScope } from '@sentry/core';\nimport { DsnLike, Event as SentryEvent, Mechanism, Scope, WrappedFunction } from '@sentry/types';\nimport {\n  addExceptionMechanism,\n  addExceptionTypeValue,\n  addNonEnumerableProperty,\n  getOriginalFunction,\n  markFunctionWrapped,\n} from '@sentry/utils';\n\nlet ignoreOnError: number = 0;\n\n/**\n * @hidden\n */\nexport function shouldIgnoreOnError(): boolean {\n  return ignoreOnError > 0;\n}\n\n/**\n * @hidden\n */\nexport function ignoreNextOnError(): void {\n  // onerror should trigger before setTimeout\n  ignoreOnError += 1;\n  setTimeout(() => {\n    ignoreOnError -= 1;\n  });\n}\n\n/**\n * Instruments the given function and sends an event to Sentry every time the\n * function throws an exception.\n *\n * @param fn A function to wrap. It is generally safe to pass an unbound function, because the returned wrapper always\n * has a correct `this` context.\n * @returns The wrapped function.\n * @hidden\n */\nexport function wrap(\n  fn: WrappedFunction,\n  options: {\n    mechanism?: Mechanism;\n  } = {},\n  before?: WrappedFunction,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n): any {\n  // for future readers what this does is wrap a function and then create\n  // a bi-directional wrapping between them.\n  //\n  // example: wrapped = wrap(original);\n  //  original.__sentry_wrapped__ -> wrapped\n  //  wrapped.__sentry_original__ -> original\n\n  if (typeof fn !== 'function') {\n    return fn;\n  }\n\n  try {\n    // if we're dealing with a function that was previously wrapped, return\n    // the original wrapper.\n    const wrapper = fn.__sentry_wrapped__;\n    if (wrapper) {\n      return wrapper;\n    }\n\n    // We don't wanna wrap it twice\n    if (getOriginalFunction(fn)) {\n      return fn;\n    }\n  } catch (e) {\n    // Just accessing custom props in some Selenium environments\n    // can cause a \"Permission denied\" exception (see raven-js#495).\n    // Bail on wrapping and return the function as-is (defers to window.onerror).\n    return fn;\n  }\n\n  /* eslint-disable prefer-rest-params */\n  // It is important that `sentryWrapped` is not an arrow function to preserve the context of `this`\n  const sentryWrapped: WrappedFunction = function (this: unknown): void {\n    const args = Array.prototype.slice.call(arguments);\n\n    try {\n      if (before && typeof before === 'function') {\n        before.apply(this, arguments);\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access\n      const wrappedArguments = args.map((arg: any) => wrap(arg, options));\n\n      // Attempt to invoke user-land function\n      // NOTE: If you are a Sentry user, and you are seeing this stack frame, it\n      //       means the sentry.javascript SDK caught an error invoking your application code. This\n      //       is expected behavior and NOT indicative of a bug with sentry.javascript.\n      return fn.apply(this, wrappedArguments);\n    } catch (ex) {\n      ignoreNextOnError();\n\n      withScope((scope: Scope) => {\n        scope.addEventProcessor((event: SentryEvent) => {\n          if (options.mechanism) {\n            addExceptionTypeValue(event, undefined, undefined);\n            addExceptionMechanism(event, options.mechanism);\n          }\n\n          event.extra = {\n            ...event.extra,\n            arguments: args,\n          };\n\n          return event;\n        });\n\n        captureException(ex);\n      });\n\n      throw ex;\n    }\n  };\n  /* eslint-enable prefer-rest-params */\n\n  // Accessing some objects may throw\n  // ref: https://github.com/getsentry/sentry-javascript/issues/1168\n  try {\n    for (const property in fn) {\n      if (Object.prototype.hasOwnProperty.call(fn, property)) {\n        sentryWrapped[property] = fn[property];\n      }\n    }\n  } catch (_oO) {} // eslint-disable-line no-empty\n\n  // Signal that this function has been wrapped/filled already\n  // for both debugging and to prevent it to being wrapped/filled twice\n  markFunctionWrapped(sentryWrapped, fn);\n\n  addNonEnumerableProperty(fn, '__sentry_wrapped__', sentryWrapped);\n\n  // Restore original function name (not all browsers allow that)\n  try {\n    const descriptor = Object.getOwnPropertyDescriptor(sentryWrapped, 'name') as PropertyDescriptor;\n    if (descriptor.configurable) {\n      Object.defineProperty(sentryWrapped, 'name', {\n        get(): string {\n          return fn.name;\n        },\n      });\n    }\n    // eslint-disable-next-line no-empty\n  } catch (_oO) {}\n\n  return sentryWrapped;\n}\n\n/**\n * All properties the report dialog supports\n */\nexport interface ReportDialogOptions {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [key: string]: any;\n  eventId?: string;\n  dsn?: DsnLike;\n  user?: {\n    email?: string;\n    name?: string;\n  };\n  lang?: string;\n  title?: string;\n  subtitle?: string;\n  subtitle2?: string;\n  labelName?: string;\n  labelEmail?: string;\n  labelComments?: string;\n  labelClose?: string;\n  labelSubmit?: string;\n  errorGeneric?: string;\n  errorFormEntry?: string;\n  successMessage?: string;\n  /** Callback after reportDialog showed up */\n  onLoad?(): void;\n}\n","/* eslint-disable @typescript-eslint/no-unsafe-member-access */\nimport { getCurrentHub } from '@sentry/core';\nimport { Event, EventHint, Hub, Integration, Primitive, StackParser } from '@sentry/types';\nimport {\n  addExceptionMechanism,\n  addInstrumentationHandler,\n  getLocationHref,\n  isErrorEvent,\n  isPrimitive,\n  isString,\n  logger,\n} from '@sentry/utils';\n\nimport { BrowserClient } from '../client';\nimport { eventFromUnknownInput } from '../eventbuilder';\nimport { shouldIgnoreOnError } from '../helpers';\n\ntype GlobalHandlersIntegrationsOptionKeys = 'onerror' | 'onunhandledrejection';\n\n/** JSDoc */\ntype GlobalHandlersIntegrations = Record<GlobalHandlersIntegrationsOptionKeys, boolean>;\n\n/** Global handlers */\nexport class GlobalHandlers implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'GlobalHandlers';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = GlobalHandlers.id;\n\n  /** JSDoc */\n  private readonly _options: GlobalHandlersIntegrations;\n\n  /**\n   * Stores references functions to installing handlers. Will set to undefined\n   * after they have been run so that they are not used twice.\n   */\n  private _installFunc: Record<GlobalHandlersIntegrationsOptionKeys, (() => void) | undefined> = {\n    onerror: _installGlobalOnErrorHandler,\n    onunhandledrejection: _installGlobalOnUnhandledRejectionHandler,\n  };\n\n  /** JSDoc */\n  public constructor(options?: GlobalHandlersIntegrations) {\n    this._options = {\n      onerror: true,\n      onunhandledrejection: true,\n      ...options,\n    };\n  }\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    Error.stackTraceLimit = 50;\n    const options = this._options;\n\n    // We can disable guard-for-in as we construct the options object above + do checks against\n    // `this._installFunc` for the property.\n    // eslint-disable-next-line guard-for-in\n    for (const key in options) {\n      const installFunc = this._installFunc[key as GlobalHandlersIntegrationsOptionKeys];\n      if (installFunc && options[key as GlobalHandlersIntegrationsOptionKeys]) {\n        globalHandlerLog(key);\n        installFunc();\n        this._installFunc[key as GlobalHandlersIntegrationsOptionKeys] = undefined;\n      }\n    }\n  }\n}\n\n/** JSDoc */\nfunction _installGlobalOnErrorHandler(): void {\n  addInstrumentationHandler(\n    'error',\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (data: { msg: any; url: any; line: any; column: any; error: any }) => {\n      const [hub, stackParser, attachStacktrace] = getHubAndOptions();\n      if (!hub.getIntegration(GlobalHandlers)) {\n        return;\n      }\n      const { msg, url, line, column, error } = data;\n      if (shouldIgnoreOnError() || (error && error.__sentry_own_request__)) {\n        return;\n      }\n\n      const event =\n        error === undefined && isString(msg)\n          ? _eventFromIncompleteOnError(msg, url, line, column)\n          : _enhanceEventWithInitialFrame(\n              eventFromUnknownInput(stackParser, error || msg, undefined, attachStacktrace, false),\n              url,\n              line,\n              column,\n            );\n\n      event.level = 'error';\n\n      addMechanismAndCapture(hub, error, event, 'onerror');\n    },\n  );\n}\n\n/** JSDoc */\nfunction _installGlobalOnUnhandledRejectionHandler(): void {\n  addInstrumentationHandler(\n    'unhandledrejection',\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (e: any) => {\n      const [hub, stackParser, attachStacktrace] = getHubAndOptions();\n      if (!hub.getIntegration(GlobalHandlers)) {\n        return;\n      }\n      let error = e;\n\n      // dig the object of the rejection out of known event types\n      try {\n        // PromiseRejectionEvents store the object of the rejection under 'reason'\n        // see https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent\n        if ('reason' in e) {\n          error = e.reason;\n        }\n        // something, somewhere, (likely a browser extension) effectively casts PromiseRejectionEvents\n        // to CustomEvents, moving the `promise` and `reason` attributes of the PRE into\n        // the CustomEvent's `detail` attribute, since they're not part of CustomEvent's spec\n        // see https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent and\n        // https://github.com/getsentry/sentry-javascript/issues/2380\n        else if ('detail' in e && 'reason' in e.detail) {\n          error = e.detail.reason;\n        }\n      } catch (_oO) {\n        // no-empty\n      }\n\n      if (shouldIgnoreOnError() || (error && error.__sentry_own_request__)) {\n        return true;\n      }\n\n      const event = isPrimitive(error)\n        ? _eventFromRejectionWithPrimitive(error)\n        : eventFromUnknownInput(stackParser, error, undefined, attachStacktrace, true);\n\n      event.level = 'error';\n\n      addMechanismAndCapture(hub, error, event, 'onunhandledrejection');\n      return;\n    },\n  );\n}\n\n/**\n * Create an event from a promise rejection where the `reason` is a primitive.\n *\n * @param reason: The `reason` property of the promise rejection\n * @returns An Event object with an appropriate `exception` value\n */\nfunction _eventFromRejectionWithPrimitive(reason: Primitive): Event {\n  return {\n    exception: {\n      values: [\n        {\n          type: 'UnhandledRejection',\n          // String() is needed because the Primitive type includes symbols (which can't be automatically stringified)\n          value: `Non-Error promise rejection captured with value: ${String(reason)}`,\n        },\n      ],\n    },\n  };\n}\n\n/**\n * This function creates a stack from an old, error-less onerror handler.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _eventFromIncompleteOnError(msg: any, url: any, line: any, column: any): Event {\n  const ERROR_TYPES_RE =\n    /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/i;\n\n  // If 'message' is ErrorEvent, get real message from inside\n  let message = isErrorEvent(msg) ? msg.message : msg;\n  let name = 'Error';\n\n  const groups = message.match(ERROR_TYPES_RE);\n  if (groups) {\n    name = groups[1];\n    message = groups[2];\n  }\n\n  const event = {\n    exception: {\n      values: [\n        {\n          type: name,\n          value: message,\n        },\n      ],\n    },\n  };\n\n  return _enhanceEventWithInitialFrame(event, url, line, column);\n}\n\n/** JSDoc */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _enhanceEventWithInitialFrame(event: Event, url: any, line: any, column: any): Event {\n  // event.exception\n  const e = (event.exception = event.exception || {});\n  // event.exception.values\n  const ev = (e.values = e.values || []);\n  // event.exception.values[0]\n  const ev0 = (ev[0] = ev[0] || {});\n  // event.exception.values[0].stacktrace\n  const ev0s = (ev0.stacktrace = ev0.stacktrace || {});\n  // event.exception.values[0].stacktrace.frames\n  const ev0sf = (ev0s.frames = ev0s.frames || []);\n\n  const colno = isNaN(parseInt(column, 10)) ? undefined : column;\n  const lineno = isNaN(parseInt(line, 10)) ? undefined : line;\n  const filename = isString(url) && url.length > 0 ? url : getLocationHref();\n\n  // event.exception.values[0].stacktrace.frames\n  if (ev0sf.length === 0) {\n    ev0sf.push({\n      colno,\n      filename,\n      function: '?',\n      in_app: true,\n      lineno,\n    });\n  }\n\n  return event;\n}\n\nfunction globalHandlerLog(type: string): void {\n  __DEBUG_BUILD__ && logger.log(`Global Handler attached: ${type}`);\n}\n\nfunction addMechanismAndCapture(hub: Hub, error: EventHint['originalException'], event: Event, type: string): void {\n  addExceptionMechanism(event, {\n    handled: false,\n    type,\n  });\n  hub.captureEvent(event, {\n    originalException: error,\n  });\n}\n\nfunction getHubAndOptions(): [Hub, StackParser, boolean | undefined] {\n  const hub = getCurrentHub();\n  const client = hub.getClient<BrowserClient>();\n  const options = (client && client.getOptions()) || {\n    stackParser: () => [],\n    attachStacktrace: false,\n  };\n  return [hub, options.stackParser, options.attachStacktrace];\n}\n","import { Integration, WrappedFunction } from '@sentry/types';\nimport { fill, getFunctionName, getGlobalObject, getOriginalFunction } from '@sentry/utils';\n\nimport { wrap } from '../helpers';\n\nconst DEFAULT_EVENT_TARGET = [\n  'EventTarget',\n  'Window',\n  'Node',\n  'ApplicationCache',\n  'AudioTrackList',\n  'ChannelMergerNode',\n  'CryptoOperation',\n  'EventSource',\n  'FileReader',\n  'HTMLUnknownElement',\n  'IDBDatabase',\n  'IDBRequest',\n  'IDBTransaction',\n  'KeyOperation',\n  'MediaController',\n  'MessagePort',\n  'ModalWindow',\n  'Notification',\n  'SVGElementInstance',\n  'Screen',\n  'TextTrack',\n  'TextTrackCue',\n  'TextTrackList',\n  'WebSocket',\n  'WebSocketWorker',\n  'Worker',\n  'XMLHttpRequest',\n  'XMLHttpRequestEventTarget',\n  'XMLHttpRequestUpload',\n];\n\ntype XMLHttpRequestProp = 'onload' | 'onerror' | 'onprogress' | 'onreadystatechange';\n\n/** JSDoc */\ninterface TryCatchOptions {\n  setTimeout: boolean;\n  setInterval: boolean;\n  requestAnimationFrame: boolean;\n  XMLHttpRequest: boolean;\n  eventTarget: boolean | string[];\n}\n\n/** Wrap timer functions and event targets to catch errors and provide better meta data */\nexport class TryCatch implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'TryCatch';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = TryCatch.id;\n\n  /** JSDoc */\n  private readonly _options: TryCatchOptions;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options?: Partial<TryCatchOptions>) {\n    this._options = {\n      XMLHttpRequest: true,\n      eventTarget: true,\n      requestAnimationFrame: true,\n      setInterval: true,\n      setTimeout: true,\n      ...options,\n    };\n  }\n\n  /**\n   * Wrap timer functions and event targets to catch errors\n   * and provide better metadata.\n   */\n  public setupOnce(): void {\n    const global = getGlobalObject();\n\n    if (this._options.setTimeout) {\n      fill(global, 'setTimeout', _wrapTimeFunction);\n    }\n\n    if (this._options.setInterval) {\n      fill(global, 'setInterval', _wrapTimeFunction);\n    }\n\n    if (this._options.requestAnimationFrame) {\n      fill(global, 'requestAnimationFrame', _wrapRAF);\n    }\n\n    if (this._options.XMLHttpRequest && 'XMLHttpRequest' in global) {\n      fill(XMLHttpRequest.prototype, 'send', _wrapXHR);\n    }\n\n    const eventTargetOption = this._options.eventTarget;\n    if (eventTargetOption) {\n      const eventTarget = Array.isArray(eventTargetOption) ? eventTargetOption : DEFAULT_EVENT_TARGET;\n      eventTarget.forEach(_wrapEventTarget);\n    }\n  }\n}\n\n/** JSDoc */\nfunction _wrapTimeFunction(original: () => void): () => number {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return function (this: any, ...args: any[]): number {\n    const originalCallback = args[0];\n    args[0] = wrap(originalCallback, {\n      mechanism: {\n        data: { function: getFunctionName(original) },\n        handled: true,\n        type: 'instrument',\n      },\n    });\n    return original.apply(this, args);\n  };\n}\n\n/** JSDoc */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _wrapRAF(original: any): (callback: () => void) => any {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return function (this: any, callback: () => void): () => void {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    return original.apply(this, [\n      wrap(callback, {\n        mechanism: {\n          data: {\n            function: 'requestAnimationFrame',\n            handler: getFunctionName(original),\n          },\n          handled: true,\n          type: 'instrument',\n        },\n      }),\n    ]);\n  };\n}\n\n/** JSDoc */\nfunction _wrapXHR(originalSend: () => void): () => void {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return function (this: XMLHttpRequest, ...args: any[]): void {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const xhr = this;\n    const xmlHttpRequestProps: XMLHttpRequestProp[] = ['onload', 'onerror', 'onprogress', 'onreadystatechange'];\n\n    xmlHttpRequestProps.forEach(prop => {\n      if (prop in xhr && typeof xhr[prop] === 'function') {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        fill(xhr, prop, function (original: WrappedFunction): () => any {\n          const wrapOptions = {\n            mechanism: {\n              data: {\n                function: prop,\n                handler: getFunctionName(original),\n              },\n              handled: true,\n              type: 'instrument',\n            },\n          };\n\n          // If Instrument integration has been called before TryCatch, get the name of original function\n          const originalFunction = getOriginalFunction(original);\n          if (originalFunction) {\n            wrapOptions.mechanism.data.handler = getFunctionName(originalFunction);\n          }\n\n          // Otherwise wrap directly\n          return wrap(original, wrapOptions);\n        });\n      }\n    });\n\n    return originalSend.apply(this, args);\n  };\n}\n\n/** JSDoc */\nfunction _wrapEventTarget(target: string): void {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const global = getGlobalObject() as { [key: string]: any };\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  const proto = global[target] && global[target].prototype;\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, no-prototype-builtins\n  if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty('addEventListener')) {\n    return;\n  }\n\n  fill(proto, 'addEventListener', function (original: () => void): (\n    eventName: string,\n    fn: EventListenerObject,\n    options?: boolean | AddEventListenerOptions,\n  ) => void {\n    return function (\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this: any,\n      eventName: string,\n      fn: EventListenerObject,\n      options?: boolean | AddEventListenerOptions,\n    ): (eventName: string, fn: EventListenerObject, capture?: boolean, secure?: boolean) => void {\n      try {\n        if (typeof fn.handleEvent === 'function') {\n          // ESlint disable explanation:\n          //  First, it is generally safe to call `wrap` with an unbound function. Furthermore, using `.bind()` would\n          //  introduce a bug here, because bind returns a new function that doesn't have our\n          //  flags(like __sentry_original__) attached. `wrap` checks for those flags to avoid unnecessary wrapping.\n          //  Without those flags, every call to addEventListener wraps the function again, causing a memory leak.\n          // eslint-disable-next-line @typescript-eslint/unbound-method\n          fn.handleEvent = wrap(fn.handleEvent, {\n            mechanism: {\n              data: {\n                function: 'handleEvent',\n                handler: getFunctionName(fn),\n                target,\n              },\n              handled: true,\n              type: 'instrument',\n            },\n          });\n        }\n      } catch (err) {\n        // can sometimes get 'Permission denied to access property \"handle Event'\n      }\n\n      return original.apply(this, [\n        eventName,\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        wrap(fn as any as WrappedFunction, {\n          mechanism: {\n            data: {\n              function: 'addEventListener',\n              handler: getFunctionName(fn),\n              target,\n            },\n            handled: true,\n            type: 'instrument',\n          },\n        }),\n        options,\n      ]);\n    };\n  });\n\n  fill(\n    proto,\n    'removeEventListener',\n    function (\n      originalRemoveEventListener: () => void,\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ): (this: any, eventName: string, fn: EventListenerObject, options?: boolean | EventListenerOptions) => () => void {\n      return function (\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this: any,\n        eventName: string,\n        fn: EventListenerObject,\n        options?: boolean | EventListenerOptions,\n      ): () => void {\n        /**\n         * There are 2 possible scenarios here:\n         *\n         * 1. Someone passes a callback, which was attached prior to Sentry initialization, or by using unmodified\n         * method, eg. `document.addEventListener.call(el, name, handler). In this case, we treat this function\n         * as a pass-through, and call original `removeEventListener` with it.\n         *\n         * 2. Someone passes a callback, which was attached after Sentry was initialized, which means that it was using\n         * our wrapped version of `addEventListener`, which internally calls `wrap` helper.\n         * This helper \"wraps\" whole callback inside a try/catch statement, and attached appropriate metadata to it,\n         * in order for us to make a distinction between wrapped/non-wrapped functions possible.\n         * If a function was wrapped, it has additional property of `__sentry_wrapped__`, holding the handler.\n         *\n         * When someone adds a handler prior to initialization, and then do it again, but after,\n         * then we have to detach both of them. Otherwise, if we'd detach only wrapped one, it'd be impossible\n         * to get rid of the initial handler and it'd stick there forever.\n         */\n        const wrappedEventHandler = fn as unknown as WrappedFunction;\n        try {\n          const originalEventHandler = wrappedEventHandler && wrappedEventHandler.__sentry_wrapped__;\n          if (originalEventHandler) {\n            originalRemoveEventListener.call(this, eventName, originalEventHandler, options);\n          }\n        } catch (e) {\n          // ignore, accessing __sentry_wrapped__ will throw in some Selenium environments\n        }\n        return originalRemoveEventListener.call(this, eventName, wrappedEventHandler, options);\n      };\n    },\n  );\n}\n","import { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport { Event, EventHint, Exception, ExtendedError, Integration, StackParser } from '@sentry/types';\nimport { isInstanceOf } from '@sentry/utils';\n\nimport { BrowserClient } from '../client';\nimport { exceptionFromError } from '../eventbuilder';\n\nconst DEFAULT_KEY = 'cause';\nconst DEFAULT_LIMIT = 5;\n\ninterface LinkedErrorsOptions {\n  key: string;\n  limit: number;\n}\n\n/** Adds SDK info to an event. */\nexport class LinkedErrors implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'LinkedErrors';\n\n  /**\n   * @inheritDoc\n   */\n  public readonly name: string = LinkedErrors.id;\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _key: LinkedErrorsOptions['key'];\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _limit: LinkedErrorsOptions['limit'];\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: Partial<LinkedErrorsOptions> = {}) {\n    this._key = options.key || DEFAULT_KEY;\n    this._limit = options.limit || DEFAULT_LIMIT;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    const client = getCurrentHub().getClient<BrowserClient>();\n    if (!client) {\n      return;\n    }\n    addGlobalEventProcessor((event: Event, hint?: EventHint) => {\n      const self = getCurrentHub().getIntegration(LinkedErrors);\n      return self ? _handler(client.getOptions().stackParser, self._key, self._limit, event, hint) : event;\n    });\n  }\n}\n\n/**\n * @inheritDoc\n */\nexport function _handler(\n  parser: StackParser,\n  key: string,\n  limit: number,\n  event: Event,\n  hint?: EventHint,\n): Event | null {\n  if (!event.exception || !event.exception.values || !hint || !isInstanceOf(hint.originalException, Error)) {\n    return event;\n  }\n  const linkedErrors = _walkErrorTree(parser, limit, hint.originalException as ExtendedError, key);\n  event.exception.values = [...linkedErrors, ...event.exception.values];\n  return event;\n}\n\n/**\n * JSDOC\n */\nexport function _walkErrorTree(\n  parser: StackParser,\n  limit: number,\n  error: ExtendedError,\n  key: string,\n  stack: Exception[] = [],\n): Exception[] {\n  if (!isInstanceOf(error[key], Error) || stack.length + 1 >= limit) {\n    return stack;\n  }\n  const exception = exceptionFromError(parser, error[key]);\n  return _walkErrorTree(parser, limit, error[key], key, [exception, ...stack]);\n}\n","import { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport { Event, Integration } from '@sentry/types';\nimport { getGlobalObject } from '@sentry/utils';\n\nconst global = getGlobalObject<Window>();\n\n/** HttpContext integration collects information about HTTP request headers */\nexport class HttpContext implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'HttpContext';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = HttpContext.id;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    addGlobalEventProcessor((event: Event) => {\n      if (getCurrentHub().getIntegration(HttpContext)) {\n        // if none of the information we want exists, don't bother\n        if (!global.navigator && !global.location && !global.document) {\n          return event;\n        }\n\n        // grab as much info as exists and add it to the event\n        const url = (event.request && event.request.url) || (global.location && global.location.href);\n        const { referrer } = global.document || {};\n        const { userAgent } = global.navigator || {};\n\n        const headers = {\n          ...(event.request && event.request.headers),\n          ...(referrer && { Referer: referrer }),\n          ...(userAgent && { 'User-Agent': userAgent }),\n        };\n        const request = { ...(url && { url }), headers };\n\n        return { ...event, request };\n      }\n      return event;\n    });\n  }\n}\n","import { Event, EventProcessor, Exception, Hub, Integration, StackFrame } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\n/** Deduplication filter */\nexport class Dedupe implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Dedupe';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Dedupe.id;\n\n  /**\n   * @inheritDoc\n   */\n  private _previousEvent?: Event;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(addGlobalEventProcessor: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    const eventProcessor: EventProcessor = currentEvent => {\n      const self = getCurrentHub().getIntegration(Dedupe);\n      if (self) {\n        // Juuust in case something goes wrong\n        try {\n          if (_shouldDropEvent(currentEvent, self._previousEvent)) {\n            __DEBUG_BUILD__ && logger.warn('Event dropped due to being a duplicate of previously captured event.');\n            return null;\n          }\n        } catch (_oO) {\n          return (self._previousEvent = currentEvent);\n        }\n\n        return (self._previousEvent = currentEvent);\n      }\n      return currentEvent;\n    };\n\n    eventProcessor.id = this.name;\n    addGlobalEventProcessor(eventProcessor);\n  }\n}\n\n/** JSDoc */\nfunction _shouldDropEvent(currentEvent: Event, previousEvent?: Event): boolean {\n  if (!previousEvent) {\n    return false;\n  }\n\n  if (_isSameMessageEvent(currentEvent, previousEvent)) {\n    return true;\n  }\n\n  if (_isSameExceptionEvent(currentEvent, previousEvent)) {\n    return true;\n  }\n\n  return false;\n}\n\n/** JSDoc */\nfunction _isSameMessageEvent(currentEvent: Event, previousEvent: Event): boolean {\n  const currentMessage = currentEvent.message;\n  const previousMessage = previousEvent.message;\n\n  // If neither event has a message property, they were both exceptions, so bail out\n  if (!currentMessage && !previousMessage) {\n    return false;\n  }\n\n  // If only one event has a stacktrace, but not the other one, they are not the same\n  if ((currentMessage && !previousMessage) || (!currentMessage && previousMessage)) {\n    return false;\n  }\n\n  if (currentMessage !== previousMessage) {\n    return false;\n  }\n\n  if (!_isSameFingerprint(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  if (!_isSameStacktrace(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  return true;\n}\n\n/** JSDoc */\nfunction _isSameExceptionEvent(currentEvent: Event, previousEvent: Event): boolean {\n  const previousException = _getExceptionFromEvent(previousEvent);\n  const currentException = _getExceptionFromEvent(currentEvent);\n\n  if (!previousException || !currentException) {\n    return false;\n  }\n\n  if (previousException.type !== currentException.type || previousException.value !== currentException.value) {\n    return false;\n  }\n\n  if (!_isSameFingerprint(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  if (!_isSameStacktrace(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  return true;\n}\n\n/** JSDoc */\nfunction _isSameStacktrace(currentEvent: Event, previousEvent: Event): boolean {\n  let currentFrames = _getFramesFromEvent(currentEvent);\n  let previousFrames = _getFramesFromEvent(previousEvent);\n\n  // If neither event has a stacktrace, they are assumed to be the same\n  if (!currentFrames && !previousFrames) {\n    return true;\n  }\n\n  // If only one event has a stacktrace, but not the other one, they are not the same\n  if ((currentFrames && !previousFrames) || (!currentFrames && previousFrames)) {\n    return false;\n  }\n\n  currentFrames = currentFrames as StackFrame[];\n  previousFrames = previousFrames as StackFrame[];\n\n  // If number of frames differ, they are not the same\n  if (previousFrames.length !== currentFrames.length) {\n    return false;\n  }\n\n  // Otherwise, compare the two\n  for (let i = 0; i < previousFrames.length; i++) {\n    const frameA = previousFrames[i];\n    const frameB = currentFrames[i];\n\n    if (\n      frameA.filename !== frameB.filename ||\n      frameA.lineno !== frameB.lineno ||\n      frameA.colno !== frameB.colno ||\n      frameA.function !== frameB.function\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/** JSDoc */\nfunction _isSameFingerprint(currentEvent: Event, previousEvent: Event): boolean {\n  let currentFingerprint = currentEvent.fingerprint;\n  let previousFingerprint = previousEvent.fingerprint;\n\n  // If neither event has a fingerprint, they are assumed to be the same\n  if (!currentFingerprint && !previousFingerprint) {\n    return true;\n  }\n\n  // If only one event has a fingerprint, but not the other one, they are not the same\n  if ((currentFingerprint && !previousFingerprint) || (!currentFingerprint && previousFingerprint)) {\n    return false;\n  }\n\n  currentFingerprint = currentFingerprint as string[];\n  previousFingerprint = previousFingerprint as string[];\n\n  // Otherwise, compare the two\n  try {\n    return !!(currentFingerprint.join('') === previousFingerprint.join(''));\n  } catch (_oO) {\n    return false;\n  }\n}\n\n/** JSDoc */\nfunction _getExceptionFromEvent(event: Event): Exception | undefined {\n  return event.exception && event.exception.values && event.exception.values[0];\n}\n\n/** JSDoc */\nfunction _getFramesFromEvent(event: Event): StackFrame[] | undefined {\n  const exception = event.exception;\n\n  if (exception) {\n    try {\n      // @ts-ignore Object could be undefined\n      return exception.values[0].stacktrace.frames;\n    } catch (_oO) {\n      return undefined;\n    }\n  }\n  return undefined;\n}\n","import {\n  getCurrentHub,\n  getIntegrationsToSetup,\n  getReportDialogEndpoint,\n  Hub,\n  initAndBind,\n  Integrations as CoreIntegrations,\n} from '@sentry/core';\nimport {\n  addInstrumentationHandler,\n  getGlobalObject,\n  logger,\n  resolvedSyncPromise,\n  stackParserFromStackParserOptions,\n  supportsFetch,\n} from '@sentry/utils';\n\nimport { BrowserClient, BrowserClientOptions, BrowserOptions } from './client';\nimport { ReportDialogOptions, wrap as internalWrap } from './helpers';\nimport { Breadcrumbs, Dedupe, GlobalHandlers, HttpContext, LinkedErrors, TryCatch } from './integrations';\nimport { defaultStackParser } from './stack-parsers';\nimport { makeFetchTransport, makeXHRTransport } from './transports';\n\nexport const defaultIntegrations = [\n  new CoreIntegrations.InboundFilters(),\n  new CoreIntegrations.FunctionToString(),\n  new TryCatch(),\n  new Breadcrumbs(),\n  new GlobalHandlers(),\n  new LinkedErrors(),\n  new Dedupe(),\n  new HttpContext(),\n];\n\n/**\n * The Sentry Browser SDK Client.\n *\n * To use this SDK, call the {@link init} function as early as possible when\n * loading the web page. To set context information or send manual events, use\n * the provided methods.\n *\n * @example\n *\n * ```\n *\n * import { init } from '@sentry/browser';\n *\n * init({\n *   dsn: '__DSN__',\n *   // ...\n * });\n * ```\n *\n * @example\n * ```\n *\n * import { configureScope } from '@sentry/browser';\n * configureScope((scope: Scope) => {\n *   scope.setExtra({ battery: 0.7 });\n *   scope.setTag({ user_mode: 'admin' });\n *   scope.setUser({ id: '4711' });\n * });\n * ```\n *\n * @example\n * ```\n *\n * import { addBreadcrumb } from '@sentry/browser';\n * addBreadcrumb({\n *   message: 'My Breadcrumb',\n *   // ...\n * });\n * ```\n *\n * @example\n *\n * ```\n *\n * import * as Sentry from '@sentry/browser';\n * Sentry.captureMessage('Hello, world!');\n * Sentry.captureException(new Error('Good bye'));\n * Sentry.captureEvent({\n *   message: 'Manual',\n *   stacktrace: [\n *     // ...\n *   ],\n * });\n * ```\n *\n * @see {@link BrowserOptions} for documentation on configuration options.\n */\nexport function init(options: BrowserOptions = {}): void {\n  if (options.defaultIntegrations === undefined) {\n    options.defaultIntegrations = defaultIntegrations;\n  }\n  if (options.release === undefined) {\n    const window = getGlobalObject<Window>();\n    // This supports the variable that sentry-webpack-plugin injects\n    if (window.SENTRY_RELEASE && window.SENTRY_RELEASE.id) {\n      options.release = window.SENTRY_RELEASE.id;\n    }\n  }\n  if (options.autoSessionTracking === undefined) {\n    options.autoSessionTracking = true;\n  }\n  if (options.sendClientReports === undefined) {\n    options.sendClientReports = true;\n  }\n\n  const clientOptions: BrowserClientOptions = {\n    ...options,\n    stackParser: stackParserFromStackParserOptions(options.stackParser || defaultStackParser),\n    integrations: getIntegrationsToSetup(options),\n    transport: options.transport || (supportsFetch() ? makeFetchTransport : makeXHRTransport),\n  };\n\n  initAndBind(BrowserClient, clientOptions);\n\n  if (options.autoSessionTracking) {\n    startSessionTracking();\n  }\n}\n\n/**\n * Present the user with a report dialog.\n *\n * @param options Everything is optional, we try to fetch all info need from the global scope.\n */\nexport function showReportDialog(options: ReportDialogOptions = {}, hub: Hub = getCurrentHub()): void {\n  // doesn't work without a document (React Native)\n  const global = getGlobalObject<Window>();\n  if (!global.document) {\n    __DEBUG_BUILD__ && logger.error('Global document not defined in showReportDialog call');\n    return;\n  }\n\n  const { client, scope } = hub.getStackTop();\n  const dsn = options.dsn || (client && client.getDsn());\n  if (!dsn) {\n    __DEBUG_BUILD__ && logger.error('DSN not configured for showReportDialog call');\n    return;\n  }\n\n  if (scope) {\n    options.user = {\n      ...scope.getUser(),\n      ...options.user,\n    };\n  }\n\n  if (!options.eventId) {\n    options.eventId = hub.lastEventId();\n  }\n\n  const script = global.document.createElement('script');\n  script.async = true;\n  script.src = getReportDialogEndpoint(dsn, options);\n\n  if (options.onLoad) {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    script.onload = options.onLoad;\n  }\n\n  const injectionPoint = global.document.head || global.document.body;\n  if (injectionPoint) {\n    injectionPoint.appendChild(script);\n  } else {\n    __DEBUG_BUILD__ && logger.error('Not injecting report dialog. No injection point found in HTML');\n  }\n}\n\n/**\n * This is the getter for lastEventId.\n *\n * @returns The last event id of a captured event.\n */\nexport function lastEventId(): string | undefined {\n  return getCurrentHub().lastEventId();\n}\n\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\nexport function forceLoad(): void {\n  // Noop\n}\n\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\nexport function onLoad(callback: () => void): void {\n  callback();\n}\n\n/**\n * Call `flush()` on the current client, if there is one. See {@link Client.flush}.\n *\n * @param timeout Maximum time in ms the client should wait to flush its event queue. Omitting this parameter will cause\n * the client to wait until all events are sent before resolving the promise.\n * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it\n * doesn't (or if there's no client defined).\n */\nexport function flush(timeout?: number): PromiseLike<boolean> {\n  const client = getCurrentHub().getClient<BrowserClient>();\n  if (client) {\n    return client.flush(timeout);\n  }\n  __DEBUG_BUILD__ && logger.warn('Cannot flush events. No client defined.');\n  return resolvedSyncPromise(false);\n}\n\n/**\n * Call `close()` on the current client, if there is one. See {@link Client.close}.\n *\n * @param timeout Maximum time in ms the client should wait to flush its event queue before shutting down. Omitting this\n * parameter will cause the client to wait until all events are sent before disabling itself.\n * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it\n * doesn't (or if there's no client defined).\n */\nexport function close(timeout?: number): PromiseLike<boolean> {\n  const client = getCurrentHub().getClient<BrowserClient>();\n  if (client) {\n    return client.close(timeout);\n  }\n  __DEBUG_BUILD__ && logger.warn('Cannot flush events and disable SDK. No client defined.');\n  return resolvedSyncPromise(false);\n}\n\n/**\n * Wrap code within a try/catch block so the SDK is able to capture errors.\n *\n * @param fn A function to wrap.\n *\n * @returns The result of wrapped function call.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function wrap(fn: (...args: any) => any): any {\n  return internalWrap(fn)();\n}\n\nfunction startSessionOnHub(hub: Hub): void {\n  hub.startSession({ ignoreDuration: true });\n  hub.captureSession();\n}\n\n/**\n * Enable automatic Session Tracking for the initial page load.\n */\nfunction startSessionTracking(): void {\n  const window = getGlobalObject<Window>();\n  const document = window.document;\n\n  if (typeof document === 'undefined') {\n    __DEBUG_BUILD__ &&\n      logger.warn('Session tracking in non-browser environment with @sentry/browser is not supported.');\n    return;\n  }\n\n  const hub = getCurrentHub();\n\n  // The only way for this to be false is for there to be a version mismatch between @sentry/browser (>= 6.0.0) and\n  // @sentry/hub (< 5.27.0). In the simple case, there won't ever be such a mismatch, because the two packages are\n  // pinned at the same version in package.json, but there are edge cases where it's possible. See\n  // https://github.com/getsentry/sentry-javascript/issues/3207 and\n  // https://github.com/getsentry/sentry-javascript/issues/3234 and\n  // https://github.com/getsentry/sentry-javascript/issues/3278.\n  if (!hub.captureSession) {\n    return;\n  }\n\n  // The session duration for browser sessions does not track a meaningful\n  // concept that can be used as a metric.\n  // Automatically captured sessions are akin to page views, and thus we\n  // discard their duration.\n  startSessionOnHub(hub);\n\n  // We want to create a session for every navigation as well\n  addInstrumentationHandler('history', ({ from, to }) => {\n    // Don't create an additional session for the initial route or if the location did not change\n    if (!(from === undefined || from === to)) {\n      startSessionOnHub(getCurrentHub());\n    }\n  });\n}\n","export * from './exports';\n\nimport { Integrations as CoreIntegrations } from '@sentry/core';\nimport { getGlobalObject } from '@sentry/utils';\n\nimport * as BrowserIntegrations from './integrations';\n\nlet windowIntegrations = {};\n\n// This block is needed to add compatibility with the integrations packages when used with a CDN\nconst _window = getGlobalObject<Window>();\nif (_window.Sentry && _window.Sentry.Integrations) {\n  windowIntegrations = _window.Sentry.Integrations;\n}\n\nconst INTEGRATIONS = {\n  ...windowIntegrations,\n  ...CoreIntegrations,\n  ...BrowserIntegrations,\n};\n\nexport { INTEGRATIONS as Integrations };\n","import { getCurrentHub, Hub } from '@sentry/hub';\nimport { Options, Transaction } from '@sentry/types';\n\n/**\n * The `extractTraceparentData` function and `TRACEPARENT_REGEXP` constant used\n * to be declared in this file. It was later moved into `@sentry/utils` as part of a\n * move to remove `@sentry/tracing` dependencies from `@sentry/node` (`extractTraceparentData`\n * is the only tracing function used by `@sentry/node`).\n *\n * These exports are kept here for backwards compatability's sake.\n *\n * TODO(v7): Reorganize these exports\n *\n * See https://github.com/getsentry/sentry-javascript/issues/4642 for more details.\n */\nexport { TRACEPARENT_REGEXP, extractTraceparentData } from '@sentry/utils';\n\n/**\n * Determines if tracing is currently enabled.\n *\n * Tracing is enabled when at least one of `tracesSampleRate` and `tracesSampler` is defined in the SDK config.\n */\nexport function hasTracingEnabled(\n  maybeOptions?: Pick<Options, 'tracesSampleRate' | 'tracesSampler'> | undefined,\n): boolean {\n  const client = getCurrentHub().getClient();\n  const options = maybeOptions || (client && client.getOptions());\n  return !!options && ('tracesSampleRate' in options || 'tracesSampler' in options);\n}\n\n/** Grabs active transaction off scope, if any */\nexport function getActiveTransaction<T extends Transaction>(maybeHub?: Hub): T | undefined {\n  const hub = maybeHub || getCurrentHub();\n  const scope = hub.getScope();\n  return scope && (scope.getTransaction() as T | undefined);\n}\n\n/**\n * Converts from milliseconds to seconds\n * @param time time in ms\n */\nexport function msToSec(time: number): number {\n  return time / 1000;\n}\n\n/**\n * Converts from seconds to milliseconds\n * @param time time in seconds\n */\nexport function secToMs(time: number): number {\n  return time * 1000;\n}\n\n// so it can be used in manual instrumentation without necessitating a hard dependency on @sentry/utils\nexport { stripUrlQueryAndFragment } from '@sentry/utils';\n","import { addInstrumentationHandler, logger } from '@sentry/utils';\n\nimport { SpanStatusType } from './span';\nimport { getActiveTransaction } from './utils';\n\n/**\n * Configures global error listeners\n */\nexport function registerErrorInstrumentation(): void {\n  addInstrumentationHandler('error', errorCallback);\n  addInstrumentationHandler('unhandledrejection', errorCallback);\n}\n\n/**\n * If an error or unhandled promise occurs, we mark the active transaction as failed\n */\nfunction errorCallback(): void {\n  const activeTransaction = getActiveTransaction();\n  if (activeTransaction) {\n    const status: SpanStatusType = 'internal_error';\n    __DEBUG_BUILD__ && logger.log(`[Tracing] Transaction: ${status} -> Global error occured`);\n    activeTransaction.setStatus(status);\n  }\n}\n","/* eslint-disable max-lines */\nimport { Primitive, Span as SpanInterface, SpanContext, Transaction } from '@sentry/types';\nimport { dropUndefinedKeys, timestampWithMs, uuid4 } from '@sentry/utils';\n\n/**\n * Keeps track of finished spans for a given transaction\n * @internal\n * @hideconstructor\n * @hidden\n */\nexport class SpanRecorder {\n  public spans: Span[] = [];\n\n  private readonly _maxlen: number;\n\n  public constructor(maxlen: number = 1000) {\n    this._maxlen = maxlen;\n  }\n\n  /**\n   * This is just so that we don't run out of memory while recording a lot\n   * of spans. At some point we just stop and flush out the start of the\n   * trace tree (i.e.the first n spans with the smallest\n   * start_timestamp).\n   */\n  public add(span: Span): void {\n    if (this.spans.length > this._maxlen) {\n      span.spanRecorder = undefined;\n    } else {\n      this.spans.push(span);\n    }\n  }\n}\n\n/**\n * Span contains all data about a span\n */\nexport class Span implements SpanInterface {\n  /**\n   * @inheritDoc\n   */\n  public traceId: string = uuid4();\n\n  /**\n   * @inheritDoc\n   */\n  public spanId: string = uuid4().substring(16);\n\n  /**\n   * @inheritDoc\n   */\n  public parentSpanId?: string;\n\n  /**\n   * Internal keeper of the status\n   */\n  public status?: SpanStatusType | string;\n\n  /**\n   * @inheritDoc\n   */\n  public sampled?: boolean;\n\n  /**\n   * Timestamp in seconds when the span was created.\n   */\n  public startTimestamp: number = timestampWithMs();\n\n  /**\n   * Timestamp in seconds when the span ended.\n   */\n  public endTimestamp?: number;\n\n  /**\n   * @inheritDoc\n   */\n  public op?: string;\n\n  /**\n   * @inheritDoc\n   */\n  public description?: string;\n\n  /**\n   * @inheritDoc\n   */\n  public tags: { [key: string]: Primitive } = {};\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public data: { [key: string]: any } = {};\n\n  /**\n   * List of spans that were finalized\n   */\n  public spanRecorder?: SpanRecorder;\n\n  /**\n   * @inheritDoc\n   */\n  public transaction?: Transaction;\n\n  /**\n   * You should never call the constructor manually, always use `Sentry.startTransaction()`\n   * or call `startChild()` on an existing span.\n   * @internal\n   * @hideconstructor\n   * @hidden\n   */\n  public constructor(spanContext?: SpanContext) {\n    if (!spanContext) {\n      return this;\n    }\n    if (spanContext.traceId) {\n      this.traceId = spanContext.traceId;\n    }\n    if (spanContext.spanId) {\n      this.spanId = spanContext.spanId;\n    }\n    if (spanContext.parentSpanId) {\n      this.parentSpanId = spanContext.parentSpanId;\n    }\n    // We want to include booleans as well here\n    if ('sampled' in spanContext) {\n      this.sampled = spanContext.sampled;\n    }\n    if (spanContext.op) {\n      this.op = spanContext.op;\n    }\n    if (spanContext.description) {\n      this.description = spanContext.description;\n    }\n    if (spanContext.data) {\n      this.data = spanContext.data;\n    }\n    if (spanContext.tags) {\n      this.tags = spanContext.tags;\n    }\n    if (spanContext.status) {\n      this.status = spanContext.status;\n    }\n    if (spanContext.startTimestamp) {\n      this.startTimestamp = spanContext.startTimestamp;\n    }\n    if (spanContext.endTimestamp) {\n      this.endTimestamp = spanContext.endTimestamp;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public startChild(\n    spanContext?: Pick<SpanContext, Exclude<keyof SpanContext, 'spanId' | 'sampled' | 'traceId' | 'parentSpanId'>>,\n  ): Span {\n    const childSpan = new Span({\n      ...spanContext,\n      parentSpanId: this.spanId,\n      sampled: this.sampled,\n      traceId: this.traceId,\n    });\n\n    childSpan.spanRecorder = this.spanRecorder;\n    if (childSpan.spanRecorder) {\n      childSpan.spanRecorder.add(childSpan);\n    }\n\n    childSpan.transaction = this.transaction;\n\n    return childSpan;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTag(key: string, value: Primitive): this {\n    this.tags = { ...this.tags, [key]: value };\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  public setData(key: string, value: any): this {\n    this.data = { ...this.data, [key]: value };\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setStatus(value: SpanStatusType): this {\n    this.status = value;\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setHttpStatus(httpStatus: number): this {\n    this.setTag('http.status_code', String(httpStatus));\n    const spanStatus = spanStatusfromHttpCode(httpStatus);\n    if (spanStatus !== 'unknown_error') {\n      this.setStatus(spanStatus);\n    }\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public isSuccess(): boolean {\n    return this.status === 'ok';\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public finish(endTimestamp?: number): void {\n    this.endTimestamp = typeof endTimestamp === 'number' ? endTimestamp : timestampWithMs();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public toTraceparent(): string {\n    let sampledString = '';\n    if (this.sampled !== undefined) {\n      sampledString = this.sampled ? '-1' : '-0';\n    }\n    return `${this.traceId}-${this.spanId}${sampledString}`;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public toContext(): SpanContext {\n    return dropUndefinedKeys({\n      data: this.data,\n      description: this.description,\n      endTimestamp: this.endTimestamp,\n      op: this.op,\n      parentSpanId: this.parentSpanId,\n      sampled: this.sampled,\n      spanId: this.spanId,\n      startTimestamp: this.startTimestamp,\n      status: this.status,\n      tags: this.tags,\n      traceId: this.traceId,\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public updateWithContext(spanContext: SpanContext): this {\n    this.data = spanContext.data ?? {};\n    this.description = spanContext.description;\n    this.endTimestamp = spanContext.endTimestamp;\n    this.op = spanContext.op;\n    this.parentSpanId = spanContext.parentSpanId;\n    this.sampled = spanContext.sampled;\n    this.spanId = spanContext.spanId ?? this.spanId;\n    this.startTimestamp = spanContext.startTimestamp ?? this.startTimestamp;\n    this.status = spanContext.status;\n    this.tags = spanContext.tags ?? {};\n    this.traceId = spanContext.traceId ?? this.traceId;\n\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getTraceContext(): {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    data?: { [key: string]: any };\n    description?: string;\n    op?: string;\n    parent_span_id?: string;\n    span_id: string;\n    status?: string;\n    tags?: { [key: string]: Primitive };\n    trace_id: string;\n  } {\n    return dropUndefinedKeys({\n      data: Object.keys(this.data).length > 0 ? this.data : undefined,\n      description: this.description,\n      op: this.op,\n      parent_span_id: this.parentSpanId,\n      span_id: this.spanId,\n      status: this.status,\n      tags: Object.keys(this.tags).length > 0 ? this.tags : undefined,\n      trace_id: this.traceId,\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public toJSON(): {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    data?: { [key: string]: any };\n    description?: string;\n    op?: string;\n    parent_span_id?: string;\n    span_id: string;\n    start_timestamp: number;\n    status?: string;\n    tags?: { [key: string]: Primitive };\n    timestamp?: number;\n    trace_id: string;\n  } {\n    return dropUndefinedKeys({\n      data: Object.keys(this.data).length > 0 ? this.data : undefined,\n      description: this.description,\n      op: this.op,\n      parent_span_id: this.parentSpanId,\n      span_id: this.spanId,\n      start_timestamp: this.startTimestamp,\n      status: this.status,\n      tags: Object.keys(this.tags).length > 0 ? this.tags : undefined,\n      timestamp: this.endTimestamp,\n      trace_id: this.traceId,\n    });\n  }\n}\n\nexport type SpanStatusType =\n  /** The operation completed successfully. */\n  | 'ok'\n  /** Deadline expired before operation could complete. */\n  | 'deadline_exceeded'\n  /** 401 Unauthorized (actually does mean unauthenticated according to RFC 7235) */\n  | 'unauthenticated'\n  /** 403 Forbidden */\n  | 'permission_denied'\n  /** 404 Not Found. Some requested entity (file or directory) was not found. */\n  | 'not_found'\n  /** 429 Too Many Requests */\n  | 'resource_exhausted'\n  /** Client specified an invalid argument. 4xx. */\n  | 'invalid_argument'\n  /** 501 Not Implemented */\n  | 'unimplemented'\n  /** 503 Service Unavailable */\n  | 'unavailable'\n  /** Other/generic 5xx. */\n  | 'internal_error'\n  /** Unknown. Any non-standard HTTP status code. */\n  | 'unknown_error'\n  /** The operation was cancelled (typically by the user). */\n  | 'cancelled'\n  /** Already exists (409) */\n  | 'already_exists'\n  /** Operation was rejected because the system is not in a state required for the operation's */\n  | 'failed_precondition'\n  /** The operation was aborted, typically due to a concurrency issue. */\n  | 'aborted'\n  /** Operation was attempted past the valid range. */\n  | 'out_of_range'\n  /** Unrecoverable data loss or corruption */\n  | 'data_loss';\n\n/**\n * Converts a HTTP status code into a {@link SpanStatusType}.\n *\n * @param httpStatus The HTTP response status code.\n * @returns The span status or unknown_error.\n */\nexport function spanStatusfromHttpCode(httpStatus: number): SpanStatusType {\n  if (httpStatus < 400 && httpStatus >= 100) {\n    return 'ok';\n  }\n\n  if (httpStatus >= 400 && httpStatus < 500) {\n    switch (httpStatus) {\n      case 401:\n        return 'unauthenticated';\n      case 403:\n        return 'permission_denied';\n      case 404:\n        return 'not_found';\n      case 409:\n        return 'already_exists';\n      case 413:\n        return 'failed_precondition';\n      case 429:\n        return 'resource_exhausted';\n      default:\n        return 'invalid_argument';\n    }\n  }\n\n  if (httpStatus >= 500 && httpStatus < 600) {\n    switch (httpStatus) {\n      case 501:\n        return 'unimplemented';\n      case 503:\n        return 'unavailable';\n      case 504:\n        return 'deadline_exceeded';\n      default:\n        return 'internal_error';\n    }\n  }\n\n  return 'unknown_error';\n}\n","import { getCurrentHub, Hub } from '@sentry/hub';\nimport {\n  Baggage,\n  BaggageObj,\n  Event,\n  Measurements,\n  MeasurementUnit,\n  Transaction as TransactionInterface,\n  TransactionContext,\n  TransactionMetadata,\n} from '@sentry/types';\nimport { createBaggage, dropUndefinedKeys, getSentryBaggageItems, isBaggageMutable, logger } from '@sentry/utils';\n\nimport { Span as SpanClass, SpanRecorder } from './span';\n\n/** JSDoc */\nexport class Transaction extends SpanClass implements TransactionInterface {\n  public metadata: TransactionMetadata;\n\n  /**\n   * The reference to the current hub.\n   */\n  public readonly _hub: Hub;\n\n  private _name: string;\n\n  private _measurements: Measurements = {};\n\n  private _trimEnd?: boolean;\n\n  /**\n   * This constructor should never be called manually. Those instrumenting tracing should use\n   * `Sentry.startTransaction()`, and internal methods should use `hub.startTransaction()`.\n   * @internal\n   * @hideconstructor\n   * @hidden\n   */\n  public constructor(transactionContext: TransactionContext, hub?: Hub) {\n    super(transactionContext);\n\n    this._hub = hub || getCurrentHub();\n\n    this._name = transactionContext.name || '';\n\n    this.metadata = transactionContext.metadata || {};\n    this._trimEnd = transactionContext.trimEnd;\n\n    // this is because transactions are also spans, and spans have a transaction pointer\n    this.transaction = this;\n  }\n\n  /** Getter for `name` property */\n  public get name(): string {\n    return this._name;\n  }\n\n  /** Setter for `name` property, which also sets `source` */\n  public set name(newName: string) {\n    this._name = newName;\n    this.metadata.source = 'custom';\n  }\n\n  /**\n   * JSDoc\n   */\n  public setName(name: string, source: TransactionMetadata['source'] = 'custom'): void {\n    this.name = name;\n    this.metadata.source = source;\n  }\n\n  /**\n   * Attaches SpanRecorder to the span itself\n   * @param maxlen maximum number of spans that can be recorded\n   */\n  public initSpanRecorder(maxlen: number = 1000): void {\n    if (!this.spanRecorder) {\n      this.spanRecorder = new SpanRecorder(maxlen);\n    }\n    this.spanRecorder.add(this);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setMeasurement(name: string, value: number, unit: MeasurementUnit = ''): void {\n    this._measurements[name] = { value, unit };\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setMetadata(newMetadata: TransactionMetadata): void {\n    this.metadata = { ...this.metadata, ...newMetadata };\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public finish(endTimestamp?: number): string | undefined {\n    // This transaction is already finished, so we should not flush it again.\n    if (this.endTimestamp !== undefined) {\n      return undefined;\n    }\n\n    if (!this.name) {\n      __DEBUG_BUILD__ && logger.warn('Transaction has no name, falling back to `<unlabeled transaction>`.');\n      this.name = '<unlabeled transaction>';\n    }\n\n    // just sets the end timestamp\n    super.finish(endTimestamp);\n\n    if (this.sampled !== true) {\n      // At this point if `sampled !== true` we want to discard the transaction.\n      __DEBUG_BUILD__ && logger.log('[Tracing] Discarding transaction because its trace was not chosen to be sampled.');\n\n      const client = this._hub.getClient();\n      if (client) {\n        client.recordDroppedEvent('sample_rate', 'transaction');\n      }\n\n      return undefined;\n    }\n\n    const finishedSpans = this.spanRecorder ? this.spanRecorder.spans.filter(s => s !== this && s.endTimestamp) : [];\n\n    if (this._trimEnd && finishedSpans.length > 0) {\n      this.endTimestamp = finishedSpans.reduce((prev: SpanClass, current: SpanClass) => {\n        if (prev.endTimestamp && current.endTimestamp) {\n          return prev.endTimestamp > current.endTimestamp ? prev : current;\n        }\n        return prev;\n      }).endTimestamp;\n    }\n\n    const metadata = this.metadata;\n\n    const transaction: Event = {\n      contexts: {\n        trace: this.getTraceContext(),\n      },\n      spans: finishedSpans,\n      start_timestamp: this.startTimestamp,\n      tags: this.tags,\n      timestamp: this.endTimestamp,\n      transaction: this.name,\n      type: 'transaction',\n      sdkProcessingMetadata: {\n        ...metadata,\n        baggage: this.getBaggage(),\n      },\n      ...(metadata.source && {\n        transaction_info: {\n          source: metadata.source,\n        },\n      }),\n    };\n\n    const hasMeasurements = Object.keys(this._measurements).length > 0;\n\n    if (hasMeasurements) {\n      __DEBUG_BUILD__ &&\n        logger.log(\n          '[Measurements] Adding measurements to transaction',\n          JSON.stringify(this._measurements, undefined, 2),\n        );\n      transaction.measurements = this._measurements;\n    }\n\n    __DEBUG_BUILD__ && logger.log(`[Tracing] Finishing ${this.op} transaction: ${this.name}.`);\n\n    return this._hub.captureEvent(transaction);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public toContext(): TransactionContext {\n    const spanContext = super.toContext();\n\n    return dropUndefinedKeys({\n      ...spanContext,\n      name: this.name,\n      trimEnd: this._trimEnd,\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public updateWithContext(transactionContext: TransactionContext): this {\n    super.updateWithContext(transactionContext);\n\n    this.name = transactionContext.name ?? '';\n\n    this._trimEnd = transactionContext.trimEnd;\n\n    return this;\n  }\n\n  /**\n   * @inheritdoc\n   *\n   * @experimental\n   */\n  public getBaggage(): Baggage {\n    const existingBaggage = this.metadata.baggage;\n\n    // Only add Sentry baggage items to baggage, if baggage does not exist yet or it is still\n    // empty and mutable\n    const finalBaggage =\n      !existingBaggage || isBaggageMutable(existingBaggage)\n        ? this._populateBaggageWithSentryValues(existingBaggage)\n        : existingBaggage;\n\n    // Update the baggage stored on the transaction.\n    this.metadata.baggage = finalBaggage;\n\n    return finalBaggage;\n  }\n\n  /**\n   * Collects and adds data to the passed baggage object.\n   *\n   * Note: This function does not explicitly check if the passed baggage object is allowed\n   * to be modified. Implicitly, `setBaggageValue` will not make modification to the object\n   * if it was already set immutable.\n   *\n   * After adding the data, the baggage object is set immutable to prevent further modifications.\n   *\n   * @param baggage\n   *\n   * @returns modified and immutable baggage object\n   */\n  private _populateBaggageWithSentryValues(baggage: Baggage = createBaggage({})): Baggage {\n    const hub: Hub = this._hub || getCurrentHub();\n    const client = hub && hub.getClient();\n\n    if (!client) return baggage;\n\n    const { environment, release } = client.getOptions() || {};\n    const { publicKey: public_key } = client.getDsn() || {};\n\n    const rate = this.metadata && this.metadata.transactionSampling && this.metadata.transactionSampling.rate;\n    const sample_rate =\n      rate !== undefined\n        ? rate.toLocaleString('fullwide', { useGrouping: false, maximumFractionDigits: 16 })\n        : undefined;\n\n    const scope = hub.getScope();\n    const { segment: user_segment } = (scope && scope.getUser()) || {};\n\n    const source = this.metadata.source;\n    const transaction = source && source !== 'url' ? this.name : undefined;\n\n    return createBaggage(\n      dropUndefinedKeys({\n        environment,\n        release,\n        transaction,\n        user_segment,\n        public_key,\n        trace_id: this.traceId,\n        sample_rate,\n        ...getSentryBaggageItems(baggage), // keep user-added values\n      } as BaggageObj),\n      '',\n      false, // set baggage immutable\n    );\n  }\n}\n","/* eslint-disable max-lines */\nimport { Hub } from '@sentry/hub';\nimport { TransactionContext } from '@sentry/types';\nimport { logger, timestampWithMs } from '@sentry/utils';\n\nimport { Span, SpanRecorder } from './span';\nimport { Transaction } from './transaction';\n\nexport const DEFAULT_IDLE_TIMEOUT = 1000;\nexport const DEFAULT_FINAL_TIMEOUT = 30000;\nexport const HEARTBEAT_INTERVAL = 5000;\n\n/**\n * @inheritDoc\n */\nexport class IdleTransactionSpanRecorder extends SpanRecorder {\n  public constructor(\n    private readonly _pushActivity: (id: string) => void,\n    private readonly _popActivity: (id: string) => void,\n    public transactionSpanId: string,\n    maxlen?: number,\n  ) {\n    super(maxlen);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public add(span: Span): void {\n    // We should make sure we do not push and pop activities for\n    // the transaction that this span recorder belongs to.\n    if (span.spanId !== this.transactionSpanId) {\n      // We patch span.finish() to pop an activity after setting an endTimestamp.\n      span.finish = (endTimestamp?: number) => {\n        span.endTimestamp = typeof endTimestamp === 'number' ? endTimestamp : timestampWithMs();\n        this._popActivity(span.spanId);\n      };\n\n      // We should only push new activities if the span does not have an end timestamp.\n      if (span.endTimestamp === undefined) {\n        this._pushActivity(span.spanId);\n      }\n    }\n\n    super.add(span);\n  }\n}\n\nexport type BeforeFinishCallback = (transactionSpan: IdleTransaction, endTimestamp: number) => void;\n\n/**\n * An IdleTransaction is a transaction that automatically finishes. It does this by tracking child spans as activities.\n * You can have multiple IdleTransactions active, but if the `onScope` option is specified, the idle transaction will\n * put itself on the scope on creation.\n */\nexport class IdleTransaction extends Transaction {\n  // Activities store a list of active spans\n  public activities: Record<string, boolean> = {};\n\n  // Track state of activities in previous heartbeat\n  private _prevHeartbeatString: string | undefined;\n\n  // Amount of times heartbeat has counted. Will cause transaction to finish after 3 beats.\n  private _heartbeatCounter: number = 0;\n\n  // We should not use heartbeat if we finished a transaction\n  private _finished: boolean = false;\n\n  private readonly _beforeFinishCallbacks: BeforeFinishCallback[] = [];\n\n  /**\n   * Timer that tracks Transaction idleTimeout\n   */\n  private _idleTimeoutID: ReturnType<typeof setTimeout> | undefined;\n\n  public constructor(\n    transactionContext: TransactionContext,\n    private readonly _idleHub: Hub,\n    /**\n     * The time to wait in ms until the idle transaction will be finished. This timer is started each time\n     * there are no active spans on this transaction.\n     */\n    private readonly _idleTimeout: number = DEFAULT_IDLE_TIMEOUT,\n    /**\n     * The final value in ms that a transaction cannot exceed\n     */\n    private readonly _finalTimeout: number = DEFAULT_FINAL_TIMEOUT,\n    // Whether or not the transaction should put itself on the scope when it starts and pop itself off when it ends\n    private readonly _onScope: boolean = false,\n  ) {\n    super(transactionContext, _idleHub);\n\n    if (_onScope) {\n      // There should only be one active transaction on the scope\n      clearActiveTransaction(_idleHub);\n\n      // We set the transaction here on the scope so error events pick up the trace\n      // context and attach it to the error.\n      __DEBUG_BUILD__ && logger.log(`Setting idle transaction on scope. Span ID: ${this.spanId}`);\n      _idleHub.configureScope(scope => scope.setSpan(this));\n    }\n\n    this._startIdleTimeout();\n    setTimeout(() => {\n      if (!this._finished) {\n        this.setStatus('deadline_exceeded');\n        this.finish();\n      }\n    }, this._finalTimeout);\n  }\n\n  /** {@inheritDoc} */\n  public finish(endTimestamp: number = timestampWithMs()): string | undefined {\n    this._finished = true;\n    this.activities = {};\n\n    if (this.spanRecorder) {\n      __DEBUG_BUILD__ &&\n        logger.log('[Tracing] finishing IdleTransaction', new Date(endTimestamp * 1000).toISOString(), this.op);\n\n      for (const callback of this._beforeFinishCallbacks) {\n        callback(this, endTimestamp);\n      }\n\n      this.spanRecorder.spans = this.spanRecorder.spans.filter((span: Span) => {\n        // If we are dealing with the transaction itself, we just return it\n        if (span.spanId === this.spanId) {\n          return true;\n        }\n\n        // We cancel all pending spans with status \"cancelled\" to indicate the idle transaction was finished early\n        if (!span.endTimestamp) {\n          span.endTimestamp = endTimestamp;\n          span.setStatus('cancelled');\n          __DEBUG_BUILD__ &&\n            logger.log('[Tracing] cancelling span since transaction ended early', JSON.stringify(span, undefined, 2));\n        }\n\n        const keepSpan = span.startTimestamp < endTimestamp;\n        if (!keepSpan) {\n          __DEBUG_BUILD__ &&\n            logger.log(\n              '[Tracing] discarding Span since it happened after Transaction was finished',\n              JSON.stringify(span, undefined, 2),\n            );\n        }\n        return keepSpan;\n      });\n\n      __DEBUG_BUILD__ && logger.log('[Tracing] flushing IdleTransaction');\n    } else {\n      __DEBUG_BUILD__ && logger.log('[Tracing] No active IdleTransaction');\n    }\n\n    // if `this._onScope` is `true`, the transaction put itself on the scope when it started\n    if (this._onScope) {\n      clearActiveTransaction(this._idleHub);\n    }\n\n    return super.finish(endTimestamp);\n  }\n\n  /**\n   * Register a callback function that gets excecuted before the transaction finishes.\n   * Useful for cleanup or if you want to add any additional spans based on current context.\n   *\n   * This is exposed because users have no other way of running something before an idle transaction\n   * finishes.\n   */\n  public registerBeforeFinishCallback(callback: BeforeFinishCallback): void {\n    this._beforeFinishCallbacks.push(callback);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public initSpanRecorder(maxlen?: number): void {\n    if (!this.spanRecorder) {\n      const pushActivity = (id: string): void => {\n        if (this._finished) {\n          return;\n        }\n        this._pushActivity(id);\n      };\n      const popActivity = (id: string): void => {\n        if (this._finished) {\n          return;\n        }\n        this._popActivity(id);\n      };\n\n      this.spanRecorder = new IdleTransactionSpanRecorder(pushActivity, popActivity, this.spanId, maxlen);\n\n      // Start heartbeat so that transactions do not run forever.\n      __DEBUG_BUILD__ && logger.log('Starting heartbeat');\n      this._pingHeartbeat();\n    }\n    this.spanRecorder.add(this);\n  }\n\n  /**\n   * Cancels the existing idletimeout, if there is one\n   */\n  private _cancelIdleTimeout(): void {\n    if (this._idleTimeoutID) {\n      clearTimeout(this._idleTimeoutID);\n      this._idleTimeoutID = undefined;\n    }\n  }\n\n  /**\n   * Creates an idletimeout\n   */\n  private _startIdleTimeout(endTimestamp?: Parameters<IdleTransaction['finish']>[0]): void {\n    this._cancelIdleTimeout();\n    this._idleTimeoutID = setTimeout(() => {\n      if (!this._finished && Object.keys(this.activities).length === 0) {\n        this.finish(endTimestamp);\n      }\n    }, this._idleTimeout);\n  }\n\n  /**\n   * Start tracking a specific activity.\n   * @param spanId The span id that represents the activity\n   */\n  private _pushActivity(spanId: string): void {\n    this._cancelIdleTimeout();\n    __DEBUG_BUILD__ && logger.log(`[Tracing] pushActivity: ${spanId}`);\n    this.activities[spanId] = true;\n    __DEBUG_BUILD__ && logger.log('[Tracing] new activities count', Object.keys(this.activities).length);\n  }\n\n  /**\n   * Remove an activity from usage\n   * @param spanId The span id that represents the activity\n   */\n  private _popActivity(spanId: string): void {\n    if (this.activities[spanId]) {\n      __DEBUG_BUILD__ && logger.log(`[Tracing] popActivity ${spanId}`);\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this.activities[spanId];\n      __DEBUG_BUILD__ && logger.log('[Tracing] new activities count', Object.keys(this.activities).length);\n    }\n\n    if (Object.keys(this.activities).length === 0) {\n      // We need to add the timeout here to have the real endtimestamp of the transaction\n      // Remember timestampWithMs is in seconds, timeout is in ms\n      const endTimestamp = timestampWithMs() + this._idleTimeout / 1000;\n      this._startIdleTimeout(endTimestamp);\n    }\n  }\n\n  /**\n   * Checks when entries of this.activities are not changing for 3 beats.\n   * If this occurs we finish the transaction.\n   */\n  private _beat(): void {\n    // We should not be running heartbeat if the idle transaction is finished.\n    if (this._finished) {\n      return;\n    }\n\n    const heartbeatString = Object.keys(this.activities).join('');\n\n    if (heartbeatString === this._prevHeartbeatString) {\n      this._heartbeatCounter += 1;\n    } else {\n      this._heartbeatCounter = 1;\n    }\n\n    this._prevHeartbeatString = heartbeatString;\n\n    if (this._heartbeatCounter >= 3) {\n      __DEBUG_BUILD__ && logger.log('[Tracing] Transaction finished because of no change for 3 heart beats');\n      this.setStatus('deadline_exceeded');\n      this.finish();\n    } else {\n      this._pingHeartbeat();\n    }\n  }\n\n  /**\n   * Pings the heartbeat\n   */\n  private _pingHeartbeat(): void {\n    __DEBUG_BUILD__ && logger.log(`pinging Heartbeat -> current counter: ${this._heartbeatCounter}`);\n    setTimeout(() => {\n      this._beat();\n    }, HEARTBEAT_INTERVAL);\n  }\n}\n\n/**\n * Reset transaction on scope to `undefined`\n */\nfunction clearActiveTransaction(hub: Hub): void {\n  const scope = hub.getScope();\n  if (scope) {\n    const transaction = scope.getTransaction();\n    if (transaction) {\n      scope.setSpan(undefined);\n    }\n  }\n}\n","import { getMainCarrier, Hub } from '@sentry/hub';\nimport {\n  ClientOptions,\n  CustomSamplingContext,\n  Integration,\n  IntegrationClass,\n  Options,\n  SamplingContext,\n  TransactionContext,\n} from '@sentry/types';\nimport { dynamicRequire, isNaN, isNodeEnv, loadModule, logger } from '@sentry/utils';\n\nimport { registerErrorInstrumentation } from './errors';\nimport { IdleTransaction } from './idletransaction';\nimport { Transaction } from './transaction';\nimport { hasTracingEnabled } from './utils';\n\n/** Returns all trace headers that are currently on the top scope. */\nfunction traceHeaders(this: Hub): { [key: string]: string } {\n  const scope = this.getScope();\n  if (scope) {\n    const span = scope.getSpan();\n    if (span) {\n      return {\n        'sentry-trace': span.toTraceparent(),\n      };\n    }\n  }\n  return {};\n}\n\n/**\n * Makes a sampling decision for the given transaction and stores it on the transaction.\n *\n * Called every time a transaction is created. Only transactions which emerge with a `sampled` value of `true` will be\n * sent to Sentry.\n *\n * @param transaction: The transaction needing a sampling decision\n * @param options: The current client's options, so we can access `tracesSampleRate` and/or `tracesSampler`\n * @param samplingContext: Default and user-provided data which may be used to help make the decision\n *\n * @returns The given transaction with its `sampled` value set\n */\nfunction sample<T extends Transaction>(\n  transaction: T,\n  options: Pick<Options, 'tracesSampleRate' | 'tracesSampler'>,\n  samplingContext: SamplingContext,\n): T {\n  // nothing to do if tracing is not enabled\n  if (!hasTracingEnabled(options)) {\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // if the user has forced a sampling decision by passing a `sampled` value in their transaction context, go with that\n  if (transaction.sampled !== undefined) {\n    transaction.setMetadata({\n      transactionSampling: { method: 'explicitly_set' },\n    });\n    return transaction;\n  }\n\n  // we would have bailed already if neither `tracesSampler` nor `tracesSampleRate` were defined, so one of these should\n  // work; prefer the hook if so\n  let sampleRate;\n  if (typeof options.tracesSampler === 'function') {\n    sampleRate = options.tracesSampler(samplingContext);\n    transaction.setMetadata({\n      transactionSampling: {\n        method: 'client_sampler',\n        // cast to number in case it's a boolean\n        rate: Number(sampleRate),\n      },\n    });\n  } else if (samplingContext.parentSampled !== undefined) {\n    sampleRate = samplingContext.parentSampled;\n    transaction.setMetadata({\n      transactionSampling: { method: 'inheritance' },\n    });\n  } else {\n    sampleRate = options.tracesSampleRate;\n    transaction.setMetadata({\n      transactionSampling: {\n        method: 'client_rate',\n        // cast to number in case it's a boolean\n        rate: Number(sampleRate),\n      },\n    });\n  }\n\n  // Since this is coming from the user (or from a function provided by the user), who knows what we might get. (The\n  // only valid values are booleans or numbers between 0 and 1.)\n  if (!isValidSampleRate(sampleRate)) {\n    __DEBUG_BUILD__ && logger.warn('[Tracing] Discarding transaction because of invalid sample rate.');\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // if the function returned 0 (or false), or if `tracesSampleRate` is 0, it's a sign the transaction should be dropped\n  if (!sampleRate) {\n    __DEBUG_BUILD__ &&\n      logger.log(\n        `[Tracing] Discarding transaction because ${\n          typeof options.tracesSampler === 'function'\n            ? 'tracesSampler returned 0 or false'\n            : 'a negative sampling decision was inherited or tracesSampleRate is set to 0'\n        }`,\n      );\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // Now we roll the dice. Math.random is inclusive of 0, but not of 1, so strict < is safe here. In case sampleRate is\n  // a boolean, the < comparison will cause it to be automatically cast to 1 if it's true and 0 if it's false.\n  transaction.sampled = Math.random() < (sampleRate as number | boolean);\n\n  // if we're not going to keep it, we're done\n  if (!transaction.sampled) {\n    __DEBUG_BUILD__ &&\n      logger.log(\n        `[Tracing] Discarding transaction because it's not included in the random sample (sampling rate = ${Number(\n          sampleRate,\n        )})`,\n      );\n    return transaction;\n  }\n\n  __DEBUG_BUILD__ && logger.log(`[Tracing] starting ${transaction.op} transaction - ${transaction.name}`);\n  return transaction;\n}\n\n/**\n * Checks the given sample rate to make sure it is valid type and value (a boolean, or a number between 0 and 1).\n */\nfunction isValidSampleRate(rate: unknown): boolean {\n  // we need to check NaN explicitly because it's of type 'number' and therefore wouldn't get caught by this typecheck\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if (isNaN(rate) || !(typeof rate === 'number' || typeof rate === 'boolean')) {\n    __DEBUG_BUILD__ &&\n      logger.warn(\n        `[Tracing] Given sample rate is invalid. Sample rate must be a boolean or a number between 0 and 1. Got ${JSON.stringify(\n          rate,\n        )} of type ${JSON.stringify(typeof rate)}.`,\n      );\n    return false;\n  }\n\n  // in case sampleRate is a boolean, it will get automatically cast to 1 if it's true and 0 if it's false\n  if (rate < 0 || rate > 1) {\n    __DEBUG_BUILD__ &&\n      logger.warn(`[Tracing] Given sample rate is invalid. Sample rate must be between 0 and 1. Got ${rate}.`);\n    return false;\n  }\n  return true;\n}\n\n/**\n * Creates a new transaction and adds a sampling decision if it doesn't yet have one.\n *\n * The Hub.startTransaction method delegates to this method to do its work, passing the Hub instance in as `this`, as if\n * it had been called on the hub directly. Exists as a separate function so that it can be injected into the class as an\n * \"extension method.\"\n *\n * @param this: The Hub starting the transaction\n * @param transactionContext: Data used to configure the transaction\n * @param CustomSamplingContext: Optional data to be provided to the `tracesSampler` function (if any)\n *\n * @returns The new transaction\n *\n * @see {@link Hub.startTransaction}\n */\nfunction _startTransaction(\n  this: Hub,\n  transactionContext: TransactionContext,\n  customSamplingContext?: CustomSamplingContext,\n): Transaction {\n  const client = this.getClient();\n  const options: Partial<ClientOptions> = (client && client.getOptions()) || {};\n\n  let transaction = new Transaction(transactionContext, this);\n  transaction = sample(transaction, options, {\n    parentSampled: transactionContext.parentSampled,\n    transactionContext,\n    ...customSamplingContext,\n  });\n  if (transaction.sampled) {\n    transaction.initSpanRecorder(options._experiments && (options._experiments.maxSpans as number));\n  }\n  return transaction;\n}\n\n/**\n * Create new idle transaction.\n */\nexport function startIdleTransaction(\n  hub: Hub,\n  transactionContext: TransactionContext,\n  idleTimeout: number,\n  finalTimeout: number,\n  onScope?: boolean,\n  customSamplingContext?: CustomSamplingContext,\n): IdleTransaction {\n  const client = hub.getClient();\n  const options: Partial<ClientOptions> = (client && client.getOptions()) || {};\n\n  let transaction = new IdleTransaction(transactionContext, hub, idleTimeout, finalTimeout, onScope);\n  transaction = sample(transaction, options, {\n    parentSampled: transactionContext.parentSampled,\n    transactionContext,\n    ...customSamplingContext,\n  });\n  if (transaction.sampled) {\n    transaction.initSpanRecorder(options._experiments && (options._experiments.maxSpans as number));\n  }\n  return transaction;\n}\n\n/**\n * @private\n */\nexport function _addTracingExtensions(): void {\n  const carrier = getMainCarrier();\n  if (!carrier.__SENTRY__) {\n    return;\n  }\n  carrier.__SENTRY__.extensions = carrier.__SENTRY__.extensions || {};\n  if (!carrier.__SENTRY__.extensions.startTransaction) {\n    carrier.__SENTRY__.extensions.startTransaction = _startTransaction;\n  }\n  if (!carrier.__SENTRY__.extensions.traceHeaders) {\n    carrier.__SENTRY__.extensions.traceHeaders = traceHeaders;\n  }\n}\n\n/**\n * @private\n */\nfunction _autoloadDatabaseIntegrations(): void {\n  const carrier = getMainCarrier();\n  if (!carrier.__SENTRY__) {\n    return;\n  }\n\n  const packageToIntegrationMapping: Record<string, () => Integration> = {\n    mongodb() {\n      const integration = dynamicRequire(module, './integrations/node/mongo') as {\n        Mongo: IntegrationClass<Integration>;\n      };\n      return new integration.Mongo();\n    },\n    mongoose() {\n      const integration = dynamicRequire(module, './integrations/node/mongo') as {\n        Mongo: IntegrationClass<Integration>;\n      };\n      return new integration.Mongo({ mongoose: true });\n    },\n    mysql() {\n      const integration = dynamicRequire(module, './integrations/node/mysql') as {\n        Mysql: IntegrationClass<Integration>;\n      };\n      return new integration.Mysql();\n    },\n    pg() {\n      const integration = dynamicRequire(module, './integrations/node/postgres') as {\n        Postgres: IntegrationClass<Integration>;\n      };\n      return new integration.Postgres();\n    },\n  };\n\n  const mappedPackages = Object.keys(packageToIntegrationMapping)\n    .filter(moduleName => !!loadModule(moduleName))\n    .map(pkg => {\n      try {\n        return packageToIntegrationMapping[pkg]();\n      } catch (e) {\n        return undefined;\n      }\n    })\n    .filter(p => p) as Integration[];\n\n  if (mappedPackages.length > 0) {\n    carrier.__SENTRY__.integrations = [...(carrier.__SENTRY__.integrations || []), ...mappedPackages];\n  }\n}\n\n/**\n * This patches the global object and injects the Tracing extensions methods\n */\nexport function addExtensionMethods(): void {\n  _addTracingExtensions();\n\n  // Detect and automatically load specified integrations.\n  if (isNodeEnv()) {\n    _autoloadDatabaseIntegrations();\n  }\n\n  // If an error happens globally, we should make sure transaction status is set to error.\n  registerErrorInstrumentation();\n}\n","import { getGlobalObject, logger } from '@sentry/utils';\n\nimport { IdleTransaction } from '../idletransaction';\nimport { SpanStatusType } from '../span';\nimport { getActiveTransaction } from '../utils';\n\nconst global = getGlobalObject<Window>();\n\n/**\n * Add a listener that cancels and finishes a transaction when the global\n * document is hidden.\n */\nexport function registerBackgroundTabDetection(): void {\n  if (global && global.document) {\n    global.document.addEventListener('visibilitychange', () => {\n      const activeTransaction = getActiveTransaction() as IdleTransaction;\n      if (global.document.hidden && activeTransaction) {\n        const statusType: SpanStatusType = 'cancelled';\n\n        __DEBUG_BUILD__ &&\n          logger.log(\n            `[Tracing] Transaction: ${statusType} -> since tab moved to the background, op: ${activeTransaction.op}`,\n          );\n        // We should not set status if it is already set, this prevent important statuses like\n        // error or data loss from being overwritten on transaction.\n        if (!activeTransaction.status) {\n          activeTransaction.setStatus(statusType);\n        }\n        activeTransaction.setTag('visibilitychange', 'document.hidden');\n        activeTransaction.finish();\n      }\n    });\n  } else {\n    __DEBUG_BUILD__ &&\n      logger.warn('[Tracing] Could not set up background tab detection due to lack of global document');\n  }\n}\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Metric, ReportHandler } from '../types';\n\nexport const bindReporter = (\n  callback: ReportHandler,\n  metric: Metric,\n  reportAllChanges?: boolean,\n): ((forceReport?: boolean) => void) => {\n  let prevValue: number;\n  return (forceReport?: boolean) => {\n    if (metric.value >= 0) {\n      if (forceReport || reportAllChanges) {\n        metric.delta = metric.value - (prevValue || 0);\n\n        // Report the metric if there's a non-zero delta or if no previous\n        // value exists (which can happen in the case of the document becoming\n        // hidden when the metric value is 0).\n        // See: https://github.com/GoogleChrome/web-vitals/issues/14\n        if (metric.delta || prevValue === undefined) {\n          prevValue = metric.value;\n          callback(metric);\n        }\n      }\n    }\n  };\n};\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Metric } from '../types';\nimport { generateUniqueID } from './generateUniqueID';\n\nexport const initMetric = (name: Metric['name'], value?: number): Metric => {\n  return {\n    name,\n    value: value ?? -1,\n    delta: 0,\n    entries: [],\n    id: generateUniqueID(),\n  };\n};\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Performantly generate a unique, 30-char string by combining a version\n * number, the current timestamp with a 13-digit number integer.\n * @return {string}\n */\nexport const generateUniqueID = (): string => {\n  return `v2-${Date.now()}-${Math.floor(Math.random() * (9e12 - 1)) + 1e12}`;\n};\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface PerformanceEntryHandler {\n  (entry: PerformanceEntry): void;\n}\n\n/**\n * Takes a performance entry type and a callback function, and creates a\n * `PerformanceObserver` instance that will observe the specified entry type\n * with buffering enabled and call the callback _for each entry_.\n *\n * This function also feature-detects entry support and wraps the logic in a\n * try/catch to avoid errors in unsupporting browsers.\n */\nexport const observe = (type: string, callback: PerformanceEntryHandler): PerformanceObserver | undefined => {\n  try {\n    if (PerformanceObserver.supportedEntryTypes.includes(type)) {\n      // More extensive feature detect needed for Firefox due to:\n      // https://github.com/GoogleChrome/web-vitals/issues/142\n      if (type === 'first-input' && !('PerformanceEventTiming' in self)) {\n        return;\n      }\n\n      const po: PerformanceObserver = new PerformanceObserver(l => l.getEntries().map(callback));\n\n      po.observe({ type, buffered: true });\n      return po;\n    }\n  } catch (e) {\n    // Do nothing.\n  }\n  return;\n};\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getGlobalObject } from '@sentry/utils';\n\nexport interface OnHiddenCallback {\n  (event: Event): void;\n}\n\nexport const onHidden = (cb: OnHiddenCallback, once?: boolean): void => {\n  const onHiddenOrPageHide = (event: Event): void => {\n    if (event.type === 'pagehide' || getGlobalObject<Window>().document.visibilityState === 'hidden') {\n      cb(event);\n      if (once) {\n        removeEventListener('visibilitychange', onHiddenOrPageHide, true);\n        removeEventListener('pagehide', onHiddenOrPageHide, true);\n      }\n    }\n  };\n  addEventListener('visibilitychange', onHiddenOrPageHide, true);\n  // Some browsers have buggy implementations of visibilitychange,\n  // so we use pagehide in addition, just to be safe.\n  addEventListener('pagehide', onHiddenOrPageHide, true);\n};\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getGlobalObject } from '@sentry/utils';\n\nimport { onHidden } from './onHidden';\n\nlet firstHiddenTime = -1;\n\nconst initHiddenTime = (): number => {\n  return getGlobalObject<Window>().document.visibilityState === 'hidden' ? 0 : Infinity;\n};\n\nconst trackChanges = (): void => {\n  // Update the time if/when the document becomes hidden.\n  onHidden(({ timeStamp }) => {\n    firstHiddenTime = timeStamp;\n  }, true);\n};\n\nexport const getVisibilityWatcher = (): {\n  readonly firstHiddenTime: number;\n} => {\n  if (firstHiddenTime < 0) {\n    // If the document is hidden when this code runs, assume it was hidden\n    // since navigation start. This isn't a perfect heuristic, but it's the\n    // best we can do until an API is available to support querying past\n    // visibilityState.\n    firstHiddenTime = initHiddenTime();\n    trackChanges();\n  }\n  return {\n    get firstHiddenTime() {\n      return firstHiddenTime;\n    },\n  };\n};\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bindReporter } from './lib/bindReporter';\nimport { getVisibilityWatcher } from './lib/getVisibilityWatcher';\nimport { initMetric } from './lib/initMetric';\nimport { observe, PerformanceEntryHandler } from './lib/observe';\nimport { onHidden } from './lib/onHidden';\nimport { ReportHandler } from './types';\n\n// https://wicg.github.io/largest-contentful-paint/#sec-largest-contentful-paint-interface\nexport interface LargestContentfulPaint extends PerformanceEntry {\n  renderTime: DOMHighResTimeStamp;\n  loadTime: DOMHighResTimeStamp;\n  size: number;\n  id: string;\n  url: string;\n  element?: Element;\n  toJSON(): Record<string, string>;\n}\n\nconst reportedMetricIDs: Record<string, boolean> = {};\n\nexport const getLCP = (onReport: ReportHandler, reportAllChanges?: boolean): void => {\n  const visibilityWatcher = getVisibilityWatcher();\n  const metric = initMetric('LCP');\n  let report: ReturnType<typeof bindReporter>;\n\n  const entryHandler = (entry: PerformanceEntry): void => {\n    // The startTime attribute returns the value of the renderTime if it is not 0,\n    // and the value of the loadTime otherwise.\n    const value = entry.startTime;\n\n    // If the page was hidden prior to paint time of the entry,\n    // ignore it and mark the metric as final, otherwise add the entry.\n    if (value < visibilityWatcher.firstHiddenTime) {\n      metric.value = value;\n      metric.entries.push(entry);\n    }\n\n    if (report) {\n      report();\n    }\n  };\n\n  const po = observe('largest-contentful-paint', entryHandler);\n\n  if (po) {\n    report = bindReporter(onReport, metric, reportAllChanges);\n\n    const stopListening = (): void => {\n      if (!reportedMetricIDs[metric.id]) {\n        po.takeRecords().map(entryHandler as PerformanceEntryHandler);\n        po.disconnect();\n        reportedMetricIDs[metric.id] = true;\n        report(true);\n      }\n    };\n\n    // Stop listening after input. Note: while scrolling is an input that\n    // stop LCP observation, it's unreliable since it can be programmatically\n    // generated. See: https://github.com/GoogleChrome/web-vitals/issues/75\n    ['keydown', 'click'].forEach(type => {\n      addEventListener(type, stopListening, { once: true, capture: true });\n    });\n\n    onHidden(stopListening, true);\n  }\n};\n","import { Span, SpanContext } from '@sentry/types';\n\nimport { Transaction } from '../../transaction';\n\n/**\n * Checks if a given value is a valid measurement value.\n */\nexport function isMeasurementValue(value: unknown): value is number {\n  return typeof value === 'number' && isFinite(value);\n}\n\n/**\n * Helper function to start child on transactions. This function will make sure that the transaction will\n * use the start timestamp of the created child span if it is earlier than the transactions actual\n * start timestamp.\n */\nexport function _startChild(transaction: Transaction, { startTimestamp, ...ctx }: SpanContext): Span {\n  if (startTimestamp && transaction.startTimestamp > startTimestamp) {\n    transaction.startTimestamp = startTimestamp;\n  }\n\n  return transaction.startChild({\n    startTimestamp,\n    ...ctx,\n  });\n}\n","/* eslint-disable max-lines */\nimport { Measurements } from '@sentry/types';\nimport { browserPerformanceTimeOrigin, getGlobalObject, htmlTreeAsString, logger } from '@sentry/utils';\n\nimport { Transaction } from '../../transaction';\nimport { msToSec } from '../../utils';\nimport { getCLS, LayoutShift } from '../web-vitals/getCLS';\nimport { getFID } from '../web-vitals/getFID';\nimport { getLCP, LargestContentfulPaint } from '../web-vitals/getLCP';\nimport { getVisibilityWatcher } from '../web-vitals/lib/getVisibilityWatcher';\nimport { NavigatorDeviceMemory, NavigatorNetworkInformation } from '../web-vitals/types';\nimport { _startChild, isMeasurementValue } from './utils';\n\nconst global = getGlobalObject<Window>();\n\nfunction getBrowserPerformanceAPI(): Performance | undefined {\n  return global && global.addEventListener && global.performance;\n}\n\nlet _performanceCursor: number = 0;\n\nlet _measurements: Measurements = {};\nlet _lcpEntry: LargestContentfulPaint | undefined;\nlet _clsEntry: LayoutShift | undefined;\n\n/**\n * Start tracking web vitals\n */\nexport function startTrackingWebVitals(reportAllChanges: boolean = false): void {\n  const performance = getBrowserPerformanceAPI();\n  if (performance && browserPerformanceTimeOrigin) {\n    if (performance.mark) {\n      global.performance.mark('sentry-tracing-init');\n    }\n    _trackCLS();\n    _trackLCP(reportAllChanges);\n    _trackFID();\n  }\n}\n\n/** Starts tracking the Cumulative Layout Shift on the current page. */\nfunction _trackCLS(): void {\n  // See:\n  // https://web.dev/evolving-cls/\n  // https://web.dev/cls-web-tooling/\n  getCLS(metric => {\n    const entry = metric.entries.pop();\n    if (!entry) {\n      return;\n    }\n\n    __DEBUG_BUILD__ && logger.log('[Measurements] Adding CLS');\n    _measurements['cls'] = { value: metric.value, unit: '' };\n    _clsEntry = entry as LayoutShift;\n  });\n}\n\n/** Starts tracking the Largest Contentful Paint on the current page. */\nfunction _trackLCP(reportAllChanges: boolean): void {\n  getLCP(metric => {\n    const entry = metric.entries.pop();\n    if (!entry) {\n      return;\n    }\n\n    const timeOrigin = msToSec(browserPerformanceTimeOrigin as number);\n    const startTime = msToSec(entry.startTime);\n    __DEBUG_BUILD__ && logger.log('[Measurements] Adding LCP');\n    _measurements['lcp'] = { value: metric.value, unit: 'millisecond' };\n    _measurements['mark.lcp'] = { value: timeOrigin + startTime, unit: 'second' };\n    _lcpEntry = entry as LargestContentfulPaint;\n  }, reportAllChanges);\n}\n\n/** Starts tracking the First Input Delay on the current page. */\nfunction _trackFID(): void {\n  getFID(metric => {\n    const entry = metric.entries.pop();\n    if (!entry) {\n      return;\n    }\n\n    const timeOrigin = msToSec(browserPerformanceTimeOrigin as number);\n    const startTime = msToSec(entry.startTime);\n    __DEBUG_BUILD__ && logger.log('[Measurements] Adding FID');\n    _measurements['fid'] = { value: metric.value, unit: 'millisecond' };\n    _measurements['mark.fid'] = { value: timeOrigin + startTime, unit: 'second' };\n  });\n}\n\n/** Add performance related spans to a transaction */\nexport function addPerformanceEntries(transaction: Transaction): void {\n  const performance = getBrowserPerformanceAPI();\n  if (!performance || !global.performance.getEntries || !browserPerformanceTimeOrigin) {\n    // Gatekeeper if performance API not available\n    return;\n  }\n\n  __DEBUG_BUILD__ && logger.log('[Tracing] Adding & adjusting spans using Performance API');\n  const timeOrigin = msToSec(browserPerformanceTimeOrigin);\n\n  const performanceEntries = performance.getEntries();\n\n  let responseStartTimestamp: number | undefined;\n  let requestStartTimestamp: number | undefined;\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  performanceEntries.slice(_performanceCursor).forEach((entry: Record<string, any>) => {\n    const startTime = msToSec(entry.startTime);\n    const duration = msToSec(entry.duration);\n\n    if (transaction.op === 'navigation' && timeOrigin + startTime < transaction.startTimestamp) {\n      return;\n    }\n\n    switch (entry.entryType) {\n      case 'navigation': {\n        _addNavigationSpans(transaction, entry, timeOrigin);\n        responseStartTimestamp = timeOrigin + msToSec(entry.responseStart);\n        requestStartTimestamp = timeOrigin + msToSec(entry.requestStart);\n        break;\n      }\n      case 'mark':\n      case 'paint':\n      case 'measure': {\n        const startTimestamp = _addMeasureSpans(transaction, entry, startTime, duration, timeOrigin);\n\n        // capture web vitals\n        const firstHidden = getVisibilityWatcher();\n        // Only report if the page wasn't hidden prior to the web vital.\n        const shouldRecord = entry.startTime < firstHidden.firstHiddenTime;\n\n        if (entry.name === 'first-paint' && shouldRecord) {\n          __DEBUG_BUILD__ && logger.log('[Measurements] Adding FP');\n          _measurements['fp'] = { value: entry.startTime, unit: 'millisecond' };\n          _measurements['mark.fp'] = { value: startTimestamp, unit: 'second' };\n        }\n        if (entry.name === 'first-contentful-paint' && shouldRecord) {\n          __DEBUG_BUILD__ && logger.log('[Measurements] Adding FCP');\n          _measurements['fcp'] = { value: entry.startTime, unit: 'millisecond' };\n          _measurements['mark.fcp'] = { value: startTimestamp, unit: 'second' };\n        }\n        break;\n      }\n      case 'resource': {\n        const resourceName = (entry.name as string).replace(global.location.origin, '');\n        _addResourceSpans(transaction, entry, resourceName, startTime, duration, timeOrigin);\n        break;\n      }\n      default:\n      // Ignore other entry types.\n    }\n  });\n\n  _performanceCursor = Math.max(performanceEntries.length - 1, 0);\n\n  _trackNavigator(transaction);\n\n  // Measurements are only available for pageload transactions\n  if (transaction.op === 'pageload') {\n    // Generate TTFB (Time to First Byte), which measured as the time between the beginning of the transaction and the\n    // start of the response in milliseconds\n    if (typeof responseStartTimestamp === 'number') {\n      __DEBUG_BUILD__ && logger.log('[Measurements] Adding TTFB');\n      _measurements['ttfb'] = {\n        value: (responseStartTimestamp - transaction.startTimestamp) * 1000,\n        unit: 'millisecond',\n      };\n\n      if (typeof requestStartTimestamp === 'number' && requestStartTimestamp <= responseStartTimestamp) {\n        // Capture the time spent making the request and receiving the first byte of the response.\n        // This is the time between the start of the request and the start of the response in milliseconds.\n        _measurements['ttfb.requestTime'] = {\n          value: (responseStartTimestamp - requestStartTimestamp) * 1000,\n          unit: 'millisecond',\n        };\n      }\n    }\n\n    ['fcp', 'fp', 'lcp'].forEach(name => {\n      if (!_measurements[name] || timeOrigin >= transaction.startTimestamp) {\n        return;\n      }\n      // The web vitals, fcp, fp, lcp, and ttfb, all measure relative to timeOrigin.\n      // Unfortunately, timeOrigin is not captured within the transaction span data, so these web vitals will need\n      // to be adjusted to be relative to transaction.startTimestamp.\n      const oldValue = _measurements[name].value;\n      const measurementTimestamp = timeOrigin + msToSec(oldValue);\n\n      // normalizedValue should be in milliseconds\n      const normalizedValue = Math.abs((measurementTimestamp - transaction.startTimestamp) * 1000);\n      const delta = normalizedValue - oldValue;\n\n      __DEBUG_BUILD__ &&\n        logger.log(`[Measurements] Normalized ${name} from ${oldValue} to ${normalizedValue} (${delta})`);\n      _measurements[name].value = normalizedValue;\n    });\n\n    if (_measurements['mark.fid'] && _measurements['fid']) {\n      // create span for FID\n      _startChild(transaction, {\n        description: 'first input delay',\n        endTimestamp: _measurements['mark.fid'].value + msToSec(_measurements['fid'].value),\n        op: 'web.vitals',\n        startTimestamp: _measurements['mark.fid'].value,\n      });\n    }\n\n    // If FCP is not recorded we should not record the cls value\n    // according to the new definition of CLS.\n    if (!('fcp' in _measurements)) {\n      delete _measurements.cls;\n    }\n\n    Object.keys(_measurements).forEach(measurementName => {\n      transaction.setMeasurement(\n        measurementName,\n        _measurements[measurementName].value,\n        _measurements[measurementName].unit,\n      );\n    });\n\n    _tagMetricInfo(transaction);\n  }\n\n  _lcpEntry = undefined;\n  _clsEntry = undefined;\n  _measurements = {};\n}\n\n/** Create measure related spans */\nexport function _addMeasureSpans(\n  transaction: Transaction,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  entry: Record<string, any>,\n  startTime: number,\n  duration: number,\n  timeOrigin: number,\n): number {\n  const measureStartTimestamp = timeOrigin + startTime;\n  const measureEndTimestamp = measureStartTimestamp + duration;\n\n  _startChild(transaction, {\n    description: entry.name as string,\n    endTimestamp: measureEndTimestamp,\n    op: entry.entryType as string,\n    startTimestamp: measureStartTimestamp,\n  });\n\n  return measureStartTimestamp;\n}\n\n/** Instrument navigation entries */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _addNavigationSpans(transaction: Transaction, entry: Record<string, any>, timeOrigin: number): void {\n  ['unloadEvent', 'redirect', 'domContentLoadedEvent', 'loadEvent', 'connect'].forEach(event => {\n    _addPerformanceNavigationTiming(transaction, entry, event, timeOrigin);\n  });\n  _addPerformanceNavigationTiming(transaction, entry, 'secureConnection', timeOrigin, 'TLS/SSL', 'connectEnd');\n  _addPerformanceNavigationTiming(transaction, entry, 'fetch', timeOrigin, 'cache', 'domainLookupStart');\n  _addPerformanceNavigationTiming(transaction, entry, 'domainLookup', timeOrigin, 'DNS');\n  _addRequest(transaction, entry, timeOrigin);\n}\n\n/** Create performance navigation related spans */\nfunction _addPerformanceNavigationTiming(\n  transaction: Transaction,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  entry: Record<string, any>,\n  event: string,\n  timeOrigin: number,\n  description?: string,\n  eventEnd?: string,\n): void {\n  const end = eventEnd ? (entry[eventEnd] as number | undefined) : (entry[`${event}End`] as number | undefined);\n  const start = entry[`${event}Start`] as number | undefined;\n  if (!start || !end) {\n    return;\n  }\n  _startChild(transaction, {\n    op: 'browser',\n    description: description ?? event,\n    startTimestamp: timeOrigin + msToSec(start),\n    endTimestamp: timeOrigin + msToSec(end),\n  });\n}\n\n/** Create request and response related spans */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _addRequest(transaction: Transaction, entry: Record<string, any>, timeOrigin: number): void {\n  _startChild(transaction, {\n    op: 'browser',\n    description: 'request',\n    startTimestamp: timeOrigin + msToSec(entry.requestStart as number),\n    endTimestamp: timeOrigin + msToSec(entry.responseEnd as number),\n  });\n\n  _startChild(transaction, {\n    op: 'browser',\n    description: 'response',\n    startTimestamp: timeOrigin + msToSec(entry.responseStart as number),\n    endTimestamp: timeOrigin + msToSec(entry.responseEnd as number),\n  });\n}\n\nexport interface ResourceEntry extends Record<string, unknown> {\n  initiatorType?: string;\n  transferSize?: number;\n  encodedBodySize?: number;\n  decodedBodySize?: number;\n}\n\n/** Create resource-related spans */\nexport function _addResourceSpans(\n  transaction: Transaction,\n  entry: ResourceEntry,\n  resourceName: string,\n  startTime: number,\n  duration: number,\n  timeOrigin: number,\n): void {\n  // we already instrument based on fetch and xhr, so we don't need to\n  // duplicate spans here.\n  if (entry.initiatorType === 'xmlhttprequest' || entry.initiatorType === 'fetch') {\n    return;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const data: Record<string, any> = {};\n  if ('transferSize' in entry) {\n    data['Transfer Size'] = entry.transferSize;\n  }\n  if ('encodedBodySize' in entry) {\n    data['Encoded Body Size'] = entry.encodedBodySize;\n  }\n  if ('decodedBodySize' in entry) {\n    data['Decoded Body Size'] = entry.decodedBodySize;\n  }\n\n  const startTimestamp = timeOrigin + startTime;\n  const endTimestamp = startTimestamp + duration;\n\n  _startChild(transaction, {\n    description: resourceName,\n    endTimestamp,\n    op: entry.initiatorType ? `resource.${entry.initiatorType}` : 'resource',\n    startTimestamp,\n    data,\n  });\n}\n\n/**\n * Capture the information of the user agent.\n */\nfunction _trackNavigator(transaction: Transaction): void {\n  const navigator = global.navigator as null | (Navigator & NavigatorNetworkInformation & NavigatorDeviceMemory);\n  if (!navigator) {\n    return;\n  }\n\n  // track network connectivity\n  const connection = navigator.connection;\n  if (connection) {\n    if (connection.effectiveType) {\n      transaction.setTag('effectiveConnectionType', connection.effectiveType);\n    }\n\n    if (connection.type) {\n      transaction.setTag('connectionType', connection.type);\n    }\n\n    if (isMeasurementValue(connection.rtt)) {\n      _measurements['connection.rtt'] = { value: connection.rtt, unit: 'millisecond' };\n    }\n\n    if (isMeasurementValue(connection.downlink)) {\n      _measurements['connection.downlink'] = { value: connection.downlink, unit: '' }; // unit is empty string for now, while relay doesn't support download speed units\n    }\n  }\n\n  if (isMeasurementValue(navigator.deviceMemory)) {\n    transaction.setTag('deviceMemory', `${navigator.deviceMemory} GB`);\n  }\n\n  if (isMeasurementValue(navigator.hardwareConcurrency)) {\n    transaction.setTag('hardwareConcurrency', String(navigator.hardwareConcurrency));\n  }\n}\n\n/** Add LCP / CLS data to transaction to allow debugging */\nfunction _tagMetricInfo(transaction: Transaction): void {\n  if (_lcpEntry) {\n    __DEBUG_BUILD__ && logger.log('[Measurements] Adding LCP Data');\n\n    // Capture Properties of the LCP element that contributes to the LCP.\n\n    if (_lcpEntry.element) {\n      transaction.setTag('lcp.element', htmlTreeAsString(_lcpEntry.element));\n    }\n\n    if (_lcpEntry.id) {\n      transaction.setTag('lcp.id', _lcpEntry.id);\n    }\n\n    if (_lcpEntry.url) {\n      // Trim URL to the first 200 characters.\n      transaction.setTag('lcp.url', _lcpEntry.url.trim().slice(0, 200));\n    }\n\n    transaction.setTag('lcp.size', _lcpEntry.size);\n  }\n\n  // See: https://developer.mozilla.org/en-US/docs/Web/API/LayoutShift\n  if (_clsEntry && _clsEntry.sources) {\n    __DEBUG_BUILD__ && logger.log('[Measurements] Adding CLS Data');\n    _clsEntry.sources.forEach((source, index) =>\n      transaction.setTag(`cls.source.${index + 1}`, htmlTreeAsString(source.node)),\n    );\n  }\n}\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bindReporter } from './lib/bindReporter';\nimport { initMetric } from './lib/initMetric';\nimport { observe, PerformanceEntryHandler } from './lib/observe';\nimport { onHidden } from './lib/onHidden';\nimport { ReportHandler } from './types';\n\n// https://wicg.github.io/layout-instability/#sec-layout-shift\nexport interface LayoutShift extends PerformanceEntry {\n  value: number;\n  hadRecentInput: boolean;\n  sources: Array<LayoutShiftAttribution>;\n  toJSON(): Record<string, unknown>;\n}\n\nexport interface LayoutShiftAttribution {\n  node?: Node;\n  previousRect: DOMRectReadOnly;\n  currentRect: DOMRectReadOnly;\n}\n\nexport const getCLS = (onReport: ReportHandler, reportAllChanges?: boolean): void => {\n  const metric = initMetric('CLS', 0);\n  let report: ReturnType<typeof bindReporter>;\n\n  let sessionValue = 0;\n  let sessionEntries: PerformanceEntry[] = [];\n\n  const entryHandler = (entry: LayoutShift): void => {\n    // Only count layout shifts without recent user input.\n    // TODO: Figure out why entry can be undefined\n    if (entry && !entry.hadRecentInput) {\n      const firstSessionEntry = sessionEntries[0];\n      const lastSessionEntry = sessionEntries[sessionEntries.length - 1];\n\n      // If the entry occurred less than 1 second after the previous entry and\n      // less than 5 seconds after the first entry in the session, include the\n      // entry in the current session. Otherwise, start a new session.\n      if (\n        sessionValue &&\n        sessionEntries.length !== 0 &&\n        entry.startTime - lastSessionEntry.startTime < 1000 &&\n        entry.startTime - firstSessionEntry.startTime < 5000\n      ) {\n        sessionValue += entry.value;\n        sessionEntries.push(entry);\n      } else {\n        sessionValue = entry.value;\n        sessionEntries = [entry];\n      }\n\n      // If the current session value is larger than the current CLS value,\n      // update CLS and the entries contributing to it.\n      if (sessionValue > metric.value) {\n        metric.value = sessionValue;\n        metric.entries = sessionEntries;\n        if (report) {\n          report();\n        }\n      }\n    }\n  };\n\n  const po = observe('layout-shift', entryHandler as PerformanceEntryHandler);\n  if (po) {\n    report = bindReporter(onReport, metric, reportAllChanges);\n\n    onHidden(() => {\n      po.takeRecords().map(entryHandler as PerformanceEntryHandler);\n      report(true);\n    });\n  }\n};\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bindReporter } from './lib/bindReporter';\nimport { getVisibilityWatcher } from './lib/getVisibilityWatcher';\nimport { initMetric } from './lib/initMetric';\nimport { observe, PerformanceEntryHandler } from './lib/observe';\nimport { onHidden } from './lib/onHidden';\nimport { PerformanceEventTiming, ReportHandler } from './types';\n\nexport const getFID = (onReport: ReportHandler, reportAllChanges?: boolean): void => {\n  const visibilityWatcher = getVisibilityWatcher();\n  const metric = initMetric('FID');\n  let report: ReturnType<typeof bindReporter>;\n\n  const entryHandler = (entry: PerformanceEventTiming): void => {\n    // Only report if the page wasn't hidden prior to the first input.\n    if (report && entry.startTime < visibilityWatcher.firstHiddenTime) {\n      metric.value = entry.processingStart - entry.startTime;\n      metric.entries.push(entry);\n      report(true);\n    }\n  };\n\n  const po = observe('first-input', entryHandler as PerformanceEntryHandler);\n  if (po) {\n    report = bindReporter(onReport, metric, reportAllChanges);\n    onHidden(() => {\n      po.takeRecords().map(entryHandler as PerformanceEntryHandler);\n      po.disconnect();\n    }, true);\n  }\n};\n","/* eslint-disable max-lines */\nimport type { Baggage, Span } from '@sentry/types';\nimport {\n  addInstrumentationHandler,\n  BAGGAGE_HEADER_NAME,\n  isInstanceOf,\n  isMatchingPattern,\n  mergeAndSerializeBaggage,\n} from '@sentry/utils';\n\nimport { getActiveTransaction, hasTracingEnabled } from '../utils';\n\nexport const DEFAULT_TRACING_ORIGINS = ['localhost', /^\\//];\n\n/** Options for Request Instrumentation */\nexport interface RequestInstrumentationOptions {\n  /**\n   * List of strings / regex where the integration should create Spans out of. Additionally this will be used\n   * to define which outgoing requests the `sentry-trace` header will be attached to.\n   *\n   * Default: ['localhost', /^\\//] {@see DEFAULT_TRACING_ORIGINS}\n   */\n  tracingOrigins: Array<string | RegExp>;\n\n  /**\n   * Flag to disable patching all together for fetch requests.\n   *\n   * Default: true\n   */\n  traceFetch: boolean;\n\n  /**\n   * Flag to disable patching all together for xhr requests.\n   *\n   * Default: true\n   */\n  traceXHR: boolean;\n\n  /**\n   * This function will be called before creating a span for a request with the given url.\n   * Return false if you don't want a span for the given url.\n   *\n   * By default it uses the `tracingOrigins` options as a url match.\n   */\n  shouldCreateSpanForRequest?(url: string): boolean;\n}\n\n/** Data returned from fetch callback */\nexport interface FetchData {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  args: any[]; // the arguments passed to the fetch call itself\n  fetchData?: {\n    method: string;\n    url: string;\n    // span_id\n    __span?: string;\n  };\n\n  // TODO Should this be unknown instead? If we vendor types, make it a Response\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  response?: any;\n  error?: unknown;\n\n  startTimestamp: number;\n  endTimestamp?: number;\n}\n\n/** Data returned from XHR request */\nexport interface XHRData {\n  xhr?: {\n    __sentry_xhr__?: {\n      method: string;\n      url: string;\n      status_code: number;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      data: Record<string, any>;\n    };\n    __sentry_xhr_span_id__?: string;\n    setRequestHeader?: (key: string, val: string) => void;\n    getRequestHeader?: (key: string) => string;\n    __sentry_own_request__?: boolean;\n  };\n  startTimestamp: number;\n  endTimestamp?: number;\n}\n\ntype PolymorphicRequestHeaders =\n  | Record<string, string>\n  | Array<[string, string]>\n  // the below is not preicsely the Header type used in Request, but it'll pass duck-typing\n  | {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      [key: string]: any;\n      append: (key: string, value: string) => void;\n      get: (key: string) => string;\n    };\n\nexport const defaultRequestInstrumentationOptions: RequestInstrumentationOptions = {\n  traceFetch: true,\n  traceXHR: true,\n  tracingOrigins: DEFAULT_TRACING_ORIGINS,\n};\n\n/** Registers span creators for xhr and fetch requests  */\nexport function instrumentOutgoingRequests(_options?: Partial<RequestInstrumentationOptions>): void {\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  const { traceFetch, traceXHR, tracingOrigins, shouldCreateSpanForRequest } = {\n    ...defaultRequestInstrumentationOptions,\n    ..._options,\n  };\n\n  // We should cache url -> decision so that we don't have to compute\n  // regexp everytime we create a request.\n  const urlMap: Record<string, boolean> = {};\n\n  const defaultShouldCreateSpan = (url: string): boolean => {\n    if (urlMap[url]) {\n      return urlMap[url];\n    }\n    const origins = tracingOrigins;\n    urlMap[url] =\n      origins.some((origin: string | RegExp) => isMatchingPattern(url, origin)) &&\n      !isMatchingPattern(url, 'sentry_key');\n    return urlMap[url];\n  };\n\n  // We want that our users don't have to re-implement shouldCreateSpanForRequest themselves\n  // That's why we filter out already unwanted Spans from tracingOrigins\n  let shouldCreateSpan = defaultShouldCreateSpan;\n  if (typeof shouldCreateSpanForRequest === 'function') {\n    shouldCreateSpan = (url: string) => {\n      return defaultShouldCreateSpan(url) && shouldCreateSpanForRequest(url);\n    };\n  }\n\n  const spans: Record<string, Span> = {};\n\n  if (traceFetch) {\n    addInstrumentationHandler('fetch', (handlerData: FetchData) => {\n      fetchCallback(handlerData, shouldCreateSpan, spans);\n    });\n  }\n\n  if (traceXHR) {\n    addInstrumentationHandler('xhr', (handlerData: XHRData) => {\n      xhrCallback(handlerData, shouldCreateSpan, spans);\n    });\n  }\n}\n\n/**\n * Create and track fetch request spans\n */\nexport function fetchCallback(\n  handlerData: FetchData,\n  shouldCreateSpan: (url: string) => boolean,\n  spans: Record<string, Span>,\n): void {\n  if (!hasTracingEnabled() || !(handlerData.fetchData && shouldCreateSpan(handlerData.fetchData.url))) {\n    return;\n  }\n\n  if (handlerData.endTimestamp) {\n    const spanId = handlerData.fetchData.__span;\n    if (!spanId) return;\n\n    const span = spans[spanId];\n    if (span) {\n      if (handlerData.response) {\n        // TODO (kmclb) remove this once types PR goes through\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        span.setHttpStatus(handlerData.response.status);\n      } else if (handlerData.error) {\n        span.setStatus('internal_error');\n      }\n      span.finish();\n\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete spans[spanId];\n    }\n    return;\n  }\n\n  const activeTransaction = getActiveTransaction();\n  if (activeTransaction) {\n    const span = activeTransaction.startChild({\n      data: {\n        ...handlerData.fetchData,\n        type: 'fetch',\n      },\n      description: `${handlerData.fetchData.method} ${handlerData.fetchData.url}`,\n      op: 'http.client',\n    });\n\n    handlerData.fetchData.__span = span.spanId;\n    spans[span.spanId] = span;\n\n    const request = (handlerData.args[0] = handlerData.args[0] as string | Request);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const options = (handlerData.args[1] = (handlerData.args[1] as { [key: string]: any }) || {});\n    options.headers = addTracingHeaders(request, activeTransaction.getBaggage(), span, options);\n  }\n}\n\nfunction addTracingHeaders(\n  request: string | Request,\n  incomingBaggage: Baggage | undefined,\n  span: Span,\n  options: { [key: string]: any },\n): PolymorphicRequestHeaders {\n  let headers = options.headers;\n\n  if (isInstanceOf(request, Request)) {\n    headers = (request as Request).headers;\n  }\n\n  if (headers) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    if (typeof headers.append === 'function') {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      headers.append('sentry-trace', span.toTraceparent());\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      headers.append(BAGGAGE_HEADER_NAME, mergeAndSerializeBaggage(incomingBaggage, headers.get(BAGGAGE_HEADER_NAME)));\n    } else if (Array.isArray(headers)) {\n      const [, headerBaggageString] = headers.find(([key, _]) => key === BAGGAGE_HEADER_NAME);\n      headers = [\n        ...headers,\n        ['sentry-trace', span.toTraceparent()],\n        [BAGGAGE_HEADER_NAME, mergeAndSerializeBaggage(incomingBaggage, headerBaggageString)],\n      ];\n    } else {\n      headers = {\n        ...headers,\n        'sentry-trace': span.toTraceparent(),\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        baggage: mergeAndSerializeBaggage(incomingBaggage, headers.baggage),\n      };\n    }\n  } else {\n    headers = { 'sentry-trace': span.toTraceparent(), baggage: mergeAndSerializeBaggage(incomingBaggage) };\n  }\n  return headers;\n}\n\n/**\n * Create and track xhr request spans\n */\nexport function xhrCallback(\n  handlerData: XHRData,\n  shouldCreateSpan: (url: string) => boolean,\n  spans: Record<string, Span>,\n): void {\n  if (\n    !hasTracingEnabled() ||\n    (handlerData.xhr && handlerData.xhr.__sentry_own_request__) ||\n    !(handlerData.xhr && handlerData.xhr.__sentry_xhr__ && shouldCreateSpan(handlerData.xhr.__sentry_xhr__.url))\n  ) {\n    return;\n  }\n\n  const xhr = handlerData.xhr.__sentry_xhr__;\n\n  // check first if the request has finished and is tracked by an existing span which should now end\n  if (handlerData.endTimestamp) {\n    const spanId = handlerData.xhr.__sentry_xhr_span_id__;\n    if (!spanId) return;\n\n    const span = spans[spanId];\n    if (span) {\n      span.setHttpStatus(xhr.status_code);\n      span.finish();\n\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete spans[spanId];\n    }\n    return;\n  }\n\n  // if not, create a new span to track it\n  const activeTransaction = getActiveTransaction();\n  if (activeTransaction) {\n    const span = activeTransaction.startChild({\n      data: {\n        ...xhr.data,\n        type: 'xhr',\n        method: xhr.method,\n        url: xhr.url,\n      },\n      description: `${xhr.method} ${xhr.url}`,\n      op: 'http.client',\n    });\n\n    handlerData.xhr.__sentry_xhr_span_id__ = span.spanId;\n    spans[handlerData.xhr.__sentry_xhr_span_id__] = span;\n\n    if (handlerData.xhr.setRequestHeader) {\n      try {\n        handlerData.xhr.setRequestHeader('sentry-trace', span.toTraceparent());\n\n        const headerBaggageString =\n          handlerData.xhr.getRequestHeader && handlerData.xhr.getRequestHeader(BAGGAGE_HEADER_NAME);\n\n        handlerData.xhr.setRequestHeader(\n          BAGGAGE_HEADER_NAME,\n          mergeAndSerializeBaggage(activeTransaction.getBaggage(), headerBaggageString),\n        );\n      } catch (_) {\n        // Error: InvalidStateError: Failed to execute 'setRequestHeader' on 'XMLHttpRequest': The object's state must be OPENED.\n      }\n    }\n  }\n}\n","import { Transaction, TransactionContext } from '@sentry/types';\nimport { addInstrumentationHandler, getGlobalObject, logger } from '@sentry/utils';\n\nconst global = getGlobalObject<Window>();\n\n/**\n * Default function implementing pageload and navigation transactions\n */\nexport function instrumentRoutingWithDefaults<T extends Transaction>(\n  customStartTransaction: (context: TransactionContext) => T | undefined,\n  startTransactionOnPageLoad: boolean = true,\n  startTransactionOnLocationChange: boolean = true,\n): void {\n  if (!global || !global.location) {\n    __DEBUG_BUILD__ && logger.warn('Could not initialize routing instrumentation due to invalid location');\n    return;\n  }\n\n  let startingUrl: string | undefined = global.location.href;\n\n  let activeTransaction: T | undefined;\n  if (startTransactionOnPageLoad) {\n    activeTransaction = customStartTransaction({\n      name: global.location.pathname,\n      op: 'pageload',\n      metadata: { source: 'url' },\n    });\n  }\n\n  if (startTransactionOnLocationChange) {\n    addInstrumentationHandler('history', ({ to, from }: { to: string; from?: string }) => {\n      /**\n       * This early return is there to account for some cases where a navigation transaction starts right after\n       * long-running pageload. We make sure that if `from` is undefined and a valid `startingURL` exists, we don't\n       * create an uneccessary navigation transaction.\n       *\n       * This was hard to duplicate, but this behavior stopped as soon as this fix was applied. This issue might also\n       * only be caused in certain development environments where the usage of a hot module reloader is causing\n       * errors.\n       */\n      if (from === undefined && startingUrl && startingUrl.indexOf(to) !== -1) {\n        startingUrl = undefined;\n        return;\n      }\n\n      if (from !== to) {\n        startingUrl = undefined;\n        if (activeTransaction) {\n          __DEBUG_BUILD__ && logger.log(`[Tracing] Finishing current transaction with op: ${activeTransaction.op}`);\n          // If there's an open transaction on the scope, we need to finish it before creating an new one.\n          activeTransaction.finish();\n        }\n        activeTransaction = customStartTransaction({\n          name: global.location.pathname,\n          op: 'navigation',\n          metadata: { source: 'url' },\n        });\n      }\n    });\n  }\n}\n","import { Hub } from '@sentry/hub';\nimport { EventProcessor, Integration, Transaction, TransactionContext } from '@sentry/types';\nimport { getGlobalObject, logger, parseBaggageSetMutability } from '@sentry/utils';\n\nimport { startIdleTransaction } from '../hubextensions';\nimport { DEFAULT_FINAL_TIMEOUT, DEFAULT_IDLE_TIMEOUT } from '../idletransaction';\nimport { extractTraceparentData } from '../utils';\nimport { registerBackgroundTabDetection } from './backgroundtab';\nimport { addPerformanceEntries, startTrackingWebVitals } from './metrics';\nimport {\n  defaultRequestInstrumentationOptions,\n  instrumentOutgoingRequests,\n  RequestInstrumentationOptions,\n} from './request';\nimport { instrumentRoutingWithDefaults } from './router';\n\nexport const BROWSER_TRACING_INTEGRATION_ID = 'BrowserTracing';\n\n/** Options for Browser Tracing integration */\nexport interface BrowserTracingOptions extends RequestInstrumentationOptions {\n  /**\n   * The time to wait in ms until the transaction will be finished during an idle state. An idle state is defined\n   * by a moment where there are no in-progress spans.\n   *\n   * The transaction will use the end timestamp of the last finished span as the endtime for the transaction.\n   * If there are still active spans when this the `idleTimeout` is set, the `idleTimeout` will get reset.\n   * Time is in ms.\n   *\n   * Default: 1000\n   */\n  idleTimeout: number;\n\n  /**\n   * The max duration for a transaction. If a transaction duration hits the `finalTimeout` value, it\n   * will be finished.\n   * Time is in ms.\n   *\n   * Default: 30000\n   */\n  finalTimeout: number;\n\n  /**\n   * Flag to enable/disable creation of `navigation` transaction on history changes.\n   *\n   * Default: true\n   */\n  startTransactionOnLocationChange: boolean;\n\n  /**\n   * Flag to enable/disable creation of `pageload` transaction on first pageload.\n   *\n   * Default: true\n   */\n  startTransactionOnPageLoad: boolean;\n\n  /**\n   * Flag Transactions where tabs moved to background with \"cancelled\". Browser background tab timing is\n   * not suited towards doing precise measurements of operations. By default, we recommend that this option\n   * be enabled as background transactions can mess up your statistics in nondeterministic ways.\n   *\n   * Default: true\n   */\n  markBackgroundTransactions: boolean;\n\n  /**\n   * _metricOptions allows the user to send options to change how metrics are collected.\n   *\n   * _metricOptions is currently experimental.\n   *\n   * Default: undefined\n   */\n  _metricOptions?: Partial<{ _reportAllChanges: boolean }>;\n\n  /**\n   * beforeNavigate is called before a pageload/navigation transaction is created and allows users to modify transaction\n   * context data, or drop the transaction entirely (by setting `sampled = false` in the context).\n   *\n   * Note: For legacy reasons, transactions can also be dropped by returning `undefined`.\n   *\n   * @param context: The context data which will be passed to `startTransaction` by default\n   *\n   * @returns A (potentially) modified context object, with `sampled = false` if the transaction should be dropped.\n   */\n  beforeNavigate?(context: TransactionContext): TransactionContext | undefined;\n\n  /**\n   * Instrumentation that creates routing change transactions. By default creates\n   * pageload and navigation transactions.\n   */\n  routingInstrumentation<T extends Transaction>(\n    customStartTransaction: (context: TransactionContext) => T | undefined,\n    startTransactionOnPageLoad?: boolean,\n    startTransactionOnLocationChange?: boolean,\n  ): void;\n}\n\nconst DEFAULT_BROWSER_TRACING_OPTIONS = {\n  idleTimeout: DEFAULT_IDLE_TIMEOUT,\n  finalTimeout: DEFAULT_FINAL_TIMEOUT,\n  markBackgroundTransactions: true,\n  routingInstrumentation: instrumentRoutingWithDefaults,\n  startTransactionOnLocationChange: true,\n  startTransactionOnPageLoad: true,\n  ...defaultRequestInstrumentationOptions,\n};\n\n/**\n * The Browser Tracing integration automatically instruments browser pageload/navigation\n * actions as transactions, and captures requests, metrics and errors as spans.\n *\n * The integration can be configured with a variety of options, and can be extended to use\n * any routing library. This integration uses {@see IdleTransaction} to create transactions.\n */\nexport class BrowserTracing implements Integration {\n  // This class currently doesn't have a static `id` field like the other integration classes, because it prevented\n  // @sentry/tracing from being treeshaken. Tree shakers do not like static fields, because they behave like side effects.\n  // TODO: Come up with a better plan, than using static fields on integration classes, and use that plan on all\n  // integrations.\n\n  /** Browser Tracing integration options */\n  public options: BrowserTracingOptions;\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = BROWSER_TRACING_INTEGRATION_ID;\n\n  private _getCurrentHub?: () => Hub;\n\n  private readonly _emitOptionsWarning?: boolean;\n\n  public constructor(_options?: Partial<BrowserTracingOptions>) {\n    let tracingOrigins = defaultRequestInstrumentationOptions.tracingOrigins;\n    // NOTE: Logger doesn't work in constructors, as it's initialized after integrations instances\n    if (_options) {\n      if (_options.tracingOrigins && Array.isArray(_options.tracingOrigins) && _options.tracingOrigins.length !== 0) {\n        tracingOrigins = _options.tracingOrigins;\n      } else {\n        __DEBUG_BUILD__ && (this._emitOptionsWarning = true);\n      }\n    }\n\n    this.options = {\n      ...DEFAULT_BROWSER_TRACING_OPTIONS,\n      ..._options,\n      tracingOrigins,\n    };\n\n    const { _metricOptions } = this.options;\n    startTrackingWebVitals(_metricOptions && _metricOptions._reportAllChanges);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    this._getCurrentHub = getCurrentHub;\n\n    if (this._emitOptionsWarning) {\n      __DEBUG_BUILD__ &&\n        logger.warn(\n          '[Tracing] You need to define `tracingOrigins` in the options. Set an array of urls or patterns to trace.',\n        );\n      __DEBUG_BUILD__ &&\n        logger.warn(\n          `[Tracing] We added a reasonable default for you: ${defaultRequestInstrumentationOptions.tracingOrigins}`,\n        );\n    }\n\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const {\n      routingInstrumentation: instrumentRouting,\n      startTransactionOnLocationChange,\n      startTransactionOnPageLoad,\n      markBackgroundTransactions,\n      traceFetch,\n      traceXHR,\n      tracingOrigins,\n      shouldCreateSpanForRequest,\n    } = this.options;\n\n    instrumentRouting(\n      (context: TransactionContext) => this._createRouteTransaction(context),\n      startTransactionOnPageLoad,\n      startTransactionOnLocationChange,\n    );\n\n    if (markBackgroundTransactions) {\n      registerBackgroundTabDetection();\n    }\n\n    instrumentOutgoingRequests({ traceFetch, traceXHR, tracingOrigins, shouldCreateSpanForRequest });\n  }\n\n  /** Create routing idle transaction. */\n  private _createRouteTransaction(context: TransactionContext): Transaction | undefined {\n    if (!this._getCurrentHub) {\n      __DEBUG_BUILD__ &&\n        logger.warn(`[Tracing] Did not create ${context.op} transaction because _getCurrentHub is invalid.`);\n      return undefined;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const { beforeNavigate, idleTimeout, finalTimeout } = this.options;\n\n    const parentContextFromHeader = context.op === 'pageload' ? extractTraceDataFromMetaTags() : undefined;\n\n    const expandedContext = {\n      ...context,\n      ...parentContextFromHeader,\n      ...(parentContextFromHeader && {\n        metadata: {\n          ...context.metadata,\n          ...parentContextFromHeader.metadata,\n        },\n      }),\n      trimEnd: true,\n    };\n    const modifiedContext = typeof beforeNavigate === 'function' ? beforeNavigate(expandedContext) : expandedContext;\n\n    // For backwards compatibility reasons, beforeNavigate can return undefined to \"drop\" the transaction (prevent it\n    // from being sent to Sentry).\n    const finalContext = modifiedContext === undefined ? { ...expandedContext, sampled: false } : modifiedContext;\n\n    // If `beforeNavigate` set a custom name, record that fact\n    finalContext.metadata =\n      finalContext.name !== expandedContext.name\n        ? { ...finalContext.metadata, source: 'custom' }\n        : finalContext.metadata;\n\n    if (finalContext.sampled === false) {\n      __DEBUG_BUILD__ &&\n        logger.log(`[Tracing] Will not send ${finalContext.op} transaction because of beforeNavigate.`);\n    }\n\n    __DEBUG_BUILD__ && logger.log(`[Tracing] Starting ${finalContext.op} transaction on scope`);\n\n    const hub = this._getCurrentHub();\n    const { location } = getGlobalObject() as WindowOrWorkerGlobalScope & { location: Location };\n\n    const idleTransaction = startIdleTransaction(\n      hub,\n      finalContext,\n      idleTimeout,\n      finalTimeout,\n      true,\n      { location }, // for use in the tracesSampler\n    );\n    idleTransaction.registerBeforeFinishCallback(transaction => {\n      addPerformanceEntries(transaction);\n      transaction.setTag(\n        'sentry_reportAllChanges',\n        Boolean(this.options._metricOptions && this.options._metricOptions._reportAllChanges),\n      );\n    });\n\n    return idleTransaction as Transaction;\n  }\n}\n\n/**\n * Gets transaction context data from `sentry-trace` and `baggage` <meta> tags.\n * @returns Transaction context data or undefined neither tag exists or has valid data\n */\nexport function extractTraceDataFromMetaTags(): Partial<TransactionContext> | undefined {\n  const sentrytraceValue = getMetaContent('sentry-trace');\n  const baggageValue = getMetaContent('baggage');\n\n  const sentrytraceData = sentrytraceValue ? extractTraceparentData(sentrytraceValue) : undefined;\n  const baggage = parseBaggageSetMutability(baggageValue, sentrytraceValue);\n\n  // TODO more extensive checks for baggage validity/emptyness?\n  if (sentrytraceData || baggage) {\n    return {\n      ...(sentrytraceData && sentrytraceData),\n      ...(baggage && { metadata: { baggage } }),\n    };\n  }\n\n  return undefined;\n}\n\n/** Returns the value of a meta tag */\nexport function getMetaContent(metaName: string): string | null {\n  const globalObject = getGlobalObject<Window>();\n\n  // DOM/querySelector is not available in all environments\n  if (globalObject.document && globalObject.document.querySelector) {\n    const el = globalObject.document.querySelector(`meta[name=${metaName}]`);\n    return el ? el.getAttribute('content') : null;\n  } else {\n    return null;\n  }\n}\n","export type {\n  Breadcrumb,\n  Request,\n  SdkInfo,\n  Event,\n  Exception,\n  // eslint-disable-next-line deprecation/deprecation\n  Severity,\n  SeverityLevel,\n  StackFrame,\n  Stacktrace,\n  Thread,\n  User,\n} from '@sentry/types';\n\nexport type { BrowserOptions, ReportDialogOptions } from '@sentry/browser';\n\nexport {\n  addGlobalEventProcessor,\n  addBreadcrumb,\n  captureException,\n  captureEvent,\n  captureMessage,\n  configureScope,\n  getHubFromCarrier,\n  getCurrentHub,\n  Hub,\n  Scope,\n  setContext,\n  setExtra,\n  setExtras,\n  setTag,\n  setTags,\n  setUser,\n  startTransaction,\n  makeFetchTransport,\n  makeXHRTransport,\n  withScope,\n} from '@sentry/browser';\n\nexport { BrowserClient } from '@sentry/browser';\nexport {\n  defaultIntegrations,\n  forceLoad,\n  init,\n  lastEventId,\n  onLoad,\n  showReportDialog,\n  flush,\n  close,\n  wrap,\n} from '@sentry/browser';\nexport { SDK_VERSION } from '@sentry/browser';\n\nimport { Integrations as BrowserIntegrations } from '@sentry/browser';\nimport { getGlobalObject } from '@sentry/utils';\n\nimport { BrowserTracing } from './browser';\nimport { addExtensionMethods } from './hubextensions';\n\nexport { Span } from './span';\n\nlet windowIntegrations = {};\n\n// This block is needed to add compatibility with the integrations packages when used with a CDN\nconst _window = getGlobalObject<Window>();\nif (_window.Sentry && _window.Sentry.Integrations) {\n  windowIntegrations = _window.Sentry.Integrations;\n}\n\nconst INTEGRATIONS = {\n  ...windowIntegrations,\n  ...BrowserIntegrations,\n  BrowserTracing,\n};\n\nexport { INTEGRATIONS as Integrations };\n// Though in this case exporting this separately in addition to exporting it as part of `Sentry.Integrations` doesn't\n// gain us any bundle size advantage (we're making the bundle here, not the user, and we can't leave anything out of\n// ours), it does bring the API for using the integration in line with that recommended for users bundling Sentry\n// themselves.\nexport { BrowserTracing };\n\n// We are patching the global object with our hub extension methods\naddExtensionMethods();\n\nexport { addExtensionMethods };\n","import { getCurrentHub } from '@sentry/hub';\nimport { Client, ClientOptions } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\n/** A class object that can instantiate Client objects. */\nexport type ClientClass<F extends Client, O extends ClientOptions> = new (options: O) => F;\n\n/**\n * Internal function to create a new SDK client instance. The client is\n * installed and then bound to the current scope.\n *\n * @param clientClass The client class to instantiate.\n * @param options Options to pass to the client.\n */\nexport function initAndBind<F extends Client, O extends ClientOptions>(\n  clientClass: ClientClass<F, O>,\n  options: O,\n): void {\n  if (options.debug === true) {\n    if (__DEBUG_BUILD__) {\n      logger.enable();\n    } else {\n      // use `console.warn` rather than `logger.warn` since by non-debug bundles have all `logger.x` statements stripped\n      // eslint-disable-next-line no-console\n      console.warn('[Sentry] Cannot initialize SDK with `debug` option using a non-debug bundle.');\n    }\n  }\n  const hub = getCurrentHub();\n  const scope = hub.getScope();\n  if (scope) {\n    scope.update(options.initialScope);\n  }\n\n  const client = new clientClass(options);\n  hub.bindClient(client);\n}\n"],"names":["fallbackGlobalObject","getGlobalObject","window","self","getGlobalSingleton","name","creator","obj","global","__SENTRY__","objectToString","Object","prototype","toString","isError","wat","call","isInstanceOf","Error","isBuiltin","ty","isErrorEvent","isDOMError","isString","isPrimitive","isPlainObject","isEvent","Event","isThenable","Boolean","then","isNaN","base","_e","htmlTreeAsString","elem","keyAttrs","currentElem","out","height","len","sepLength","length","nextStr","_htmlElementAsString","push","parentNode","reverse","join","_oO","el","className","classes","key","attr","i","tagName","toLowerCase","keyAttrPairs","filter","keyAttr","getAttribute","map","forEach","keyAttrPair","id","split","allowedAttrs","message","_super","_this","_newTarget","constructor","setPrototypeOf","__extends","DSN_REGEX","dsnToString","dsn","withPassword","host","path","pass","port","projectId","dsnFromComponents","components","protocol","publicKey","makeDsn","from","str","match","exec","SentryError","_a","_b","_c","slice","pop","projectMatch","dsnFromString","logger","CONSOLE_LEVELS","truncate","max","substr","safeJoin","input","delimiter","Array","isArray","output","value","String","e","isMatchingPattern","pattern","test","indexOf","fill","source","replacementFactory","original","wrapped","markFunctionWrapped","_Oo","addNonEnumerableProperty","defineProperty","writable","configurable","proto","getOriginalFunction","func","__sentry_original__","convertToPlainObject","stack","getOwnProperties","newObj","type","target","serializeEventTarget","currentTarget","CustomEvent","detail","Element","extractedProps","property","hasOwnProperty","extractExceptionKeysForMessage","exception","maxLength","keys","sort","includedKeys","serialized","dropUndefinedKeys","inputValue","_dropUndefinedKeys","Map","memoizationMap","undefined","memoVal","get","returnValue","set","__values","returnValue_1","item","enable","disable","createStackParser","_i","parsers","sortedParsers","a","b","p","skipFirst","frames","line","sortedParsers_1","frame","parser","stripSentryFramesAndReverse","localStack","firstFrameFunction","function","lastFrameFunction","filename","defaultFunctionName","getFunctionName","fn","supportsFetch","Headers","Request","Response","isNativeFetch","lastHref","handlers","instrumented","instrument","level","console","originalConsoleMethod","args","triggerHandlers","apply","instrumentConsole","triggerDOMHandler","bind","globalDOMEventHandler","makeDOMEventHandler","document","addEventListener","originalAddEventListener","listener","options","this","handlers_1","__sentry_instrumentation_handlers__","handlerForType","refCount","handler","originalRemoveEventListener","handlers_2","instrumentDOM","xhrproto","XMLHttpRequest","originalOpen","xhr","url","xhrInfo","__sentry_xhr__","method","toUpperCase","__sentry_own_request__","onreadystatechangeHandler","readyState","status_code","status","endTimestamp","Date","now","startTimestamp","onreadystatechange","readyStateArgs","originalSend","body","instrumentXHR","fetch","result","doc","createElement","sandbox","hidden","head","appendChild","contentWindow","removeChild","err","supportsNativeFetch","originalFetch","handlerData","fetchData","getFetchMethod","getFetchUrl","response","error","instrumentFetch","chrome","isChromePackagedApp","app","runtime","hasHistoryApi","history","pushState","replaceState","supportsHistory","oldOnPopState","onpopstate","historyReplacementFunction","originalHistoryFunction","to","location","href","instrumentHistory","_oldOnErrorHandler","onerror","msg","column","arguments","_oldOnUnhandledRejectionHandler","onunhandledrejection","addInstrumentationHandler","callback","data","fetchArgs","debounceTimerID","lastCapturedEvent","globalListener","event","isContentEditable","shouldSkipDOMEvent","previous","current","shouldShortcircuitPreviousDebounce","clearTimeout","setTimeout","States","uuid4","crypto","msCrypto","getRandomValues","arr","Uint16Array","pad","num","v","replace","c","r","Math","random","parseUrl","query","fragment","relative","getFirstException","values","getEventDescription","eventId","firstException","addExceptionTypeValue","addExceptionMechanism","newMechanism","currentMechanism","mechanism","handled","mergedData","checkOrSetAlreadyCaught","__sentry_captured__","normalize","depth","maxProperties","Infinity","visit","ERROR","normalizeToSize","object","maxSize","normalized","encodeURI","utf8Length","JSON","stringify","memo","hasWeakSet","inner","WeakSet","has","add","delete","splice","memoize","unmemoize","includes","stringified","_events","getPrototypeOf","stringifyValue","startsWith","valueWithToJSON","toJSON","numAdded","visitable","visitKey","visitValue","resolvedSyncPromise","SyncPromise","resolve","rejectedSyncPromise","reason","_","reject","executor","PENDING","_setResult","RESOLVED","REJECTED","state","_state","_resolve","_reject","_value","_executeHandlers","cachedHandlers","_handlers","onfulfilled","onrejected","val","onfinally","isRejected","makePromiseBuffer","limit","buffer","remove","task","$","taskProducer","drain","timeout","counter","capturedSetTimeout","validSeverityLevels","dateTimestampSource","nowSeconds","platformPerformance","performance","timeOrigin","getBrowserPerformance","timestampSource","dateTimestampInSeconds","timestampInSeconds","timestampWithMs","browserPerformanceTimeOrigin","threshold","performanceNow","dateNow","timeOriginDelta","abs","timeOriginIsReliable","navigationStart","timing","navigationStartDelta","TRACEPARENT_REGEXP","RegExp","createEnvelope","headers","items","addItemToEnvelope","envelope","newItem","forEachEnvelopeItem","envelopeItem","envelopeItemType","encodeUTF8","textEncoder","TextEncoder","encode","serializeEnvelope","envHeaders","parts","append","next","items_1","itemHeaders","payload","Uint8Array","buffers","totalLength","reduce","acc","buf","merged","offset","buffers_1","concatBuffers","createAttachmentEnvelopeItem","attachment","content_type","contentType","attachment_type","attachmentType","ITEM_TYPE_TO_DATA_CATEGORY_MAP","session","sessions","transaction","client_report","user_report","envelopeItemTypeToDataCategory","updateRateLimits","limits","statusCode","updatedRateLimits","rateLimitHeader","retryAfterHeader","_d","trim","_f","retryAfter","categories","headerDelay","parseInt","delay","_g","all","header","headerDate","parse","parseRetryAfterHeader","BAGGAGE_HEADER_NAME","SENTRY_BAGGAGE_KEY_PREFIX_REGEX","createBaggage","initItems","baggageString","mutable","getSentryBaggageItems","baggage","parseBaggageHeader","inputBaggageValue","includeThirdPartyEntries","entry","curr","baggageObj","baggageKey","decodeURIComponent","mergeAndSerializeBaggage","incomingBaggage","thirdPartyBaggageHeader","headerBaggage","thirdPartyHeaderBaggage","prev","baggageEntry","encodeURIComponent","newVal","serializeBaggage","parseBaggageSetMutability","rawBaggageValue","sentryTraceHeader","isSentryBaggageEmpty","setBaggageImmutable","makeSession","context","startingTime","sid","init","timestamp","started","duration","errors","ignoreDuration","toISOString","did","attrs","release","environment","ip_address","ipAddress","user_agent","userAgent","sessionToJSON","updateSession","user","email","username","_notifyingListeners","_scopeListeners","_eventProcessors","_breadcrumbs","_attachments","_user","_tags","_extra","_contexts","_sdkProcessingMetadata","Scope","scope","newScope","_level","_span","_session","_transactionName","_fingerprint","_requestSession","_notifyScopeListeners","requestSession","tags","extras","extra","fingerprint","span","getSpan","captureContext","updatedScope","contexts","breadcrumb","maxBreadcrumbs","maxCrumbs","min","mergedBreadcrumb","__spread","hint","trace","getTraceContext","transactionName","_applyFingerprint","breadcrumbs","sdkProcessingMetadata","_notifyEventProcessors","getGlobalEventProcessors","newData","processors","index","processor","final","concat","addGlobalEventProcessor","client","_version","getStackTop","bindClient","Hub","version","setupIntegrations","clone","getScope","getStack","getClient","pushScope","popScope","_stack","_lastEventId","event_id","syntheticException","_withClient","captureException","originalException","captureMessage","captureEvent","beforeBreadcrumb","finalBreadcrumb","originalConsole","wrappedLevels","originalWrappedFunc","consoleSandbox","addBreadcrumb","setUser","setTags","setExtras","setTag","setExtra","setContext","oldHub","makeMain","integration","getIntegration","customSamplingContext","_callExtensionMethod","endSession","_sendSessionUpdate","layer","getSession","closeSession","setSession","getUser","currentSession","getOptions","sendDefaultPii","captureSession","carrier","getMainCarrier","sentry","extensions","hub","registry","getHubFromCarrier","setHubOnCarrier","getCurrentHub","isOlderThan","withScope","getBaseApiEndpoint","_encodedAuth","sdkInfo","sentry_key","sentry_version","sentry_client","getEnvelopeEndpointWithUrlEncodedAuth","tunnelOrOptions","tunnel","_metadata","sdk","_getIngestEndpoint","getSdkMetadataForEnvelopeHeader","metadata","createEventEnvelope","eventType","samplingMethod","sampleRate","integrations","packages","enhanceEventWithSdkInfo","envelopeHeaders","dynamicSamplingContext","sent_at","createEventEnvelopeHeaders","sample_rates","rate","installedIntegrations","filterDuplicates","every","accIntegration","getIntegrationsToSetup","defaultIntegrations","userIntegrations","userIntegration","integrationsNames","alwaysLastToRun","_options","_dsn","_transport","transport","recordDroppedEvent","transportOptions","BaseClient","_process","eventFromException","_captureEvent","promisedEvent","eventFromMessage","_isEnabled","sendSession","_isClientDoneProcessing","clientFinished","flush","transportFlushed","enabled","integrationIndex","_integrationsInitialized","_integrations","setupOnce","integrationId","env","attachments","_sendEnvelope","createSessionEnvelope","category","sendClientReports","_outcomes","crashed","errored","exceptions","exceptions_1","sessionNonTerminal","Number","ticked","interval","setInterval","_numProcessing","clearInterval","normalizeDepth","normalizeMaxBreadth","prepared","_applyClientOptions","_applyIntegrationsMetadata","finalScope","update","getAttachments","applyToEvent","evt","_normalizeEvent","maxBreadth","spans","dist","maxValueLength","request","integrationsArray","_processEvent","finalEvent","beforeSend","isTransaction","_prepareEvent","__sentry__","rv","nullErr","_ensureBeforeSendRv","processedEvent","_updateSessionFromEvent","sendEvent","promise","send","outcomes","quantity","createTransport","makeRequest","bufferSize","rateLimits","filteredEnvelopeItems","envelopeItemDataCategory","disabledUntil","filteredEnvelope","recordEnvelopeLoss","originalFunctionToString","SDK_VERSION","FunctionToString","Function","DEFAULT_IGNORE_ERRORS","InboundFilters","eventProcess","self_1","clientOptions","internalOptions","allowUrls","denyUrls","ignoreErrors","ignoreInternal","_mergeOptions","_isSentryError","oO","_getPossibleEventMessages","some","_isIgnoredError","_getEventFilterUrl","_isDeniedUrl","_isAllowedUrl","_shouldDropEvent","frames_1","stacktrace","_getLastValidUrl","exceptionFromError","stackParser","ex","parseStackFrames","extractMessage","eventFromError","popSize","framesToPop","reactMinifiedRegexp","getPopSize","eventFromUnknownInput","attachStacktrace","isUnhandledRejection","domException","name_1","eventFromString","code","__serialized__","eventFromPlainObject","synthetic","frames_2","BREADCRUMB_INTEGRATION_ID","Breadcrumbs","dom","_consoleBreadcrumb","_innerDomBreadcrumb","serializeAttribute","_domBreadcrumb","_xhrBreadcrumb","_fetchBreadcrumb","_historyBreadcrumb","parsedLoc","parsedFrom","parsedTo","cachedFetchImpl","getNativeFetchImplementation","fetchImpl","globalObject","visibilityState","_flushOutcomes","BrowserClient","breadcrumbIntegration","getIntegrationById","platform","_clearOutcomes","discarded_events","navigator","sendBeacon","fetch_1","credentials","keepalive","sendReport","makeFetchTransport","nativeFetch","requestOptions","referrerPolicy","fetchOptions","makeXHRTransport","getResponseHeader","open","setRequestHeader","UNKNOWN_FUNCTION","createFrame","lineno","colno","in_app","chromeRegex","chromeEvalRegex","geckoREgex","geckoEvalRegex","winjsRegex","defaultStackLineParsers","subMatch","defaultStackParser","extractSafariExtensionDetails","isSafariExtension","isSafariWebExtension","ignoreOnError","shouldIgnoreOnError","ignoreNextOnError","wrap","before","wrapper","__sentry_wrapped__","sentryWrapped","wrappedArguments","arg","addEventProcessor","getOwnPropertyDescriptor","GlobalHandlers","_installGlobalOnErrorHandler","_installGlobalOnUnhandledRejectionHandler","stackTraceLimit","installFunc","_installFunc","ERROR_TYPES_RE","groups","_enhanceEventWithInitialFrame","_eventFromIncompleteOnError","addMechanismAndCapture","ev","ev0","ev0s","ev0sf","getLocationHref","getHubAndOptions","DEFAULT_EVENT_TARGET","TryCatch","eventTarget","requestAnimationFrame","_wrapTimeFunction","_wrapRAF","_wrapXHR","eventTargetOption","_wrapEventTarget","originalCallback","xmlHttpRequestProps","prop","wrapOptions","originalFunction","eventName","handleEvent","wrappedEventHandler","originalEventHandler","LinkedErrors","_key","_limit","linkedErrors","_walkErrorTree","_handler","HttpContext","referrer","Referer","Dedupe","eventProcessor","currentEvent","previousEvent","currentMessage","previousMessage","_isSameFingerprint","_isSameStacktrace","_isSameMessageEvent","previousException","_getExceptionFromEvent","currentException","_isSameExceptionEvent","_previousEvent","currentFrames","_getFramesFromEvent","previousFrames","frameA","frameB","currentFingerprint","previousFingerprint","CoreIntegrations.InboundFilters","CoreIntegrations.FunctionToString","startSessionOnHub","startSession","windowIntegrations","_window","Sentry","Integrations","INTEGRATIONS","CoreIntegrations","BrowserIntegrations","hasTracingEnabled","maybeOptions","getActiveTransaction","maybeHub","getTransaction","msToSec","time","errorCallback","activeTransaction","setStatus","maxlen","_maxlen","SpanRecorder","spanRecorder","spanContext","substring","traceId","spanId","parentSpanId","sampled","op","description","Span","childSpan","httpStatus","spanStatus","spanStatusfromHttpCode","sampledString","parent_span_id","span_id","trace_id","start_timestamp","transactionContext","_hub","_name","_trimEnd","trimEnd","Transaction","newName","unit","_measurements","newMetadata","finish","finishedSpans","s","getBaggage","transaction_info","measurements","toContext","updateWithContext","existingBaggage","finalBaggage","_populateBaggageWithSentryValues","public_key","transactionSampling","sample_rate","toLocaleString","useGrouping","maximumFractionDigits","user_segment","__assign","SpanClass","_pushActivity","_popActivity","transactionSpanId","IdleTransactionSpanRecorder","_idleHub","_idleTimeout","_finalTimeout","_onScope","clearActiveTransaction","configureScope","setSpan","_startIdleTimeout","_finished","IdleTransaction","activities","_beforeFinishCallbacks","_pingHeartbeat","_idleTimeoutID","_cancelIdleTimeout","heartbeatString","_prevHeartbeatString","_heartbeatCounter","_beat","traceHeaders","toTraceparent","sample","samplingContext","setMetadata","tracesSampler","parentSampled","tracesSampleRate","isValidSampleRate","_startTransaction","initSpanRecorder","_experiments","maxSpans","addExtensionMethods","startTransaction","bindReporter","metric","reportAllChanges","prevValue","forceReport","delta","initMetric","entries","floor","observe","PerformanceObserver","supportedEntryTypes","po","l","getEntries","buffered","onHidden","cb","once","onHiddenOrPageHide","removeEventListener","firstHiddenTime","getVisibilityWatcher","timeStamp","reportedMetricIDs","isMeasurementValue","isFinite","_startChild","ctx","startChild","getBrowserPerformanceAPI","_lcpEntry","_clsEntry","_performanceCursor","startTrackingWebVitals","mark","onReport","report","sessionValue","sessionEntries","entryHandler","hadRecentInput","firstSessionEntry","lastSessionEntry","startTime","takeRecords","getCLS","visibilityWatcher","stopListening_1","disconnect","capture","getLCP","_trackLCP","processingStart","getFID","addPerformanceEntries","responseStartTimestamp","requestStartTimestamp","performanceEntries","entryType","_addPerformanceNavigationTiming","requestStart","responseEnd","responseStart","_addRequest","_addNavigationSpans","measureStartTimestamp","measureEndTimestamp","_addMeasureSpans","firstHidden","shouldRecord","resourceName","origin","initiatorType","transferSize","encodedBodySize","decodedBodySize","_addResourceSpans","connection","effectiveType","rtt","downlink","deviceMemory","hardwareConcurrency","_trackNavigator","oldValue","measurementTimestamp","normalizedValue","cls","measurementName","setMeasurement","element","size","sources","node","_tagMetricInfo","eventEnd","end","start","defaultRequestInstrumentationOptions","traceFetch","traceXHR","tracingOrigins","instrumentOutgoingRequests","shouldCreateSpanForRequest","urlMap","defaultShouldCreateSpan","origins","shouldCreateSpan","__span","setHttpStatus","headerBaggageString","addTracingHeaders","fetchCallback","__sentry_xhr_span_id__","getRequestHeader","xhrCallback","DEFAULT_BROWSER_TRACING_OPTIONS","idleTimeout","finalTimeout","markBackgroundTransactions","routingInstrumentation","customStartTransaction","startTransactionOnPageLoad","startTransactionOnLocationChange","startingUrl","pathname","_metricOptions","_reportAllChanges","BrowserTracing","_getCurrentHub","instrumentRouting","_createRouteTransaction","beforeNavigate","parentContextFromHeader","sentrytraceValue","getMetaContent","baggageValue","sentrytraceData","traceparent","matches","extractTraceparentData","extractTraceDataFromMetaTags","expandedContext","modifiedContext","finalContext","idleTransaction","onScope","startIdleTransaction","registerBeforeFinishCallback","metaName","querySelector","close","window_1","SENTRY_RELEASE","autoSessionTracking","clientClass","debug","warn","initialScope","initAndBind","startSessionTracking","lastEventId","getDsn","script","async","src","dsnLike","dialogOptions","endpoint","encodedOptions","getReportDialogEndpoint","onLoad","onload","injectionPoint","internalWrap"],"mappings":"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"}