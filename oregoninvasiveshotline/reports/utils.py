import logging
import os

from itertools import product

from django.conf import settings

from PIL import Image, ImageDraw, ImageFilter

from oregoninvasiveshotline.species.models import Category, Severity


log = logging.getLogger(__name__)


def generate_icon(output_path,
                  inner_icon_path=None,
                  color=None,
                  generated_icon_size=(30, 45),
                  square_coords=((0, 0), (30, 30)),
                  triangle_coords=((10, 30), (15, 45), (20, 30)),
                  icon_offset=(0, -10),
                  transparent=(0, 0, 0, 0),
                  outline_color=(10, 10, 10, 255)):
    """Generate a map-style icon.

    The icons generated by this function are shown on the map to
    indicate report locations, in report lists for reports that don't
    have any other images associated, and on help pages.

    If the default styles are changed, the ``generateIcon`` function in
    ``static/js/main.js`` will need to be updated also.

    If an ``inner_icon`` is specified, it will be placed in the center
    of the main icon.

    Icons look something like this, where $$ represents the inner icon::

         ____
        |    |
        | $$ |
        |_  _|
          \/

    They are constructed in the following way:

    - A transparent canvas is created to hold the icon
    - A square is placed in the canvas so that it's aligned with the top
    - An inverted triangle is placed directly under the square to
      complete the background
    - The outline of the two shapes is extracted and converted to the
      correct color
    - The inner icon image is pasted in the center of a transparent
      canvas (assuming ``inner_icon`` was passed)
    - The canvas is pasted in the middle of the background
    - Finally, the outline is merged on top of the background

    """
    color = color or settings.ICON_DEFAULT_COLOR

    # Define the color mode (because the mode has to be the same in
    # order to merge images).
    mode = 'RGBA'

    # Create a new, transparent image as a canvas.
    icon = Image.new(mode, generated_icon_size, transparent)

    # Draw the background onto the canvas.
    background = ImageDraw.Draw(icon)
    background.rectangle(square_coords, fill=color)
    background.polygon(triangle_coords, fill=color)

    # Filter out the edges of the background and add a nice dark outline
    # to it by traversing pixel by pixel.
    outline = icon.filter(ImageFilter.FIND_EDGES)
    outline_width, outline_height = outline.size
    outline_pixels = outline.load()
    for i in range(outline_width):
        for j in range(outline_height):
            if outline_pixels[i, j] != transparent:
                # Since our canvas is transparent, any pixel that isn't
                # transparent is guaranteed to be an edge and should
                # have its color changed to the outline color.
                outline_pixels[i, j] = outline_color

    if inner_icon_path:
        # Before we can use the inner icon, it needs to be pasted into
        # an image with the same properties as the background image.
        # Otherwise, transparency will not be preserved. To do this, we
        # simply create a new image with the same properties as the
        # canvas, and paste the icon into it.
        inner_icon = Image.open(inner_icon_path)
        inner_icon_canvas = Image.new(mode, generated_icon_size)
        inner_icon_canvas.paste(inner_icon, icon_offset)

        # Alpha composite merge is used to ensure transparency is
        # preserved while moving the icon onto the canvas.
        icon = Image.alpha_composite(icon, inner_icon_canvas)

    # Now merge the image with the outline.
    icon = Image.alpha_composite(icon, outline)

    icon.save(output_path)
    return icon


def icon_file_name(inner_icon, color):
    """Get base file name for inner icon and color.

    This is used in a few places to ensure generated icon file names are
    consistent.

    ``inner_icon`` can be an absolute path or an object (typically an
    ``ImageField`` instance) that has a ``path`` attribute. It can also
    be ``None`` to indicate that there's no inner icon.

    The generated name will be::

        {base name of innner icon w/o extension}-{color}.png

    or, if there's no inner icon, just::

        {color}.png

    """
    if not inner_icon:
        inner_icon_path = None
    elif isinstance(inner_icon, str):
        inner_icon_path = inner_icon
    else:
        # Assume ImageField
        inner_icon_path = inner_icon and inner_icon.path
    name_parts = []
    if inner_icon_path:
        icon_name = os.path.basename(inner_icon_path)
        icon_name, _ = os.path.splitext(icon_name)
        name_parts.append(icon_name)
    color = color.lstrip('#').lower()
    name_parts.append(color)
    name = '-'.join(name_parts)
    file_name = '{name}.{type}'.format(name=name, type=settings.ICON_TYPE)
    return file_name


def generate_icons(force=False):
    """Generate map-style icons:

    - One for each (category icon, severity color) pair
    - One for each severity color
    - One for the default icon color

    If an icon already exists on disk, it won't be re-created. Pass
    ``force=True`` to force the re-creation of existing icons.

    """
    media_root = os.path.normpath(settings.MEDIA_ROOT)
    icon_dir = os.path.normpath(os.path.join(media_root, settings.ICON_DIR))

    inner_icon_paths = (
        Category.objects
            .filter(icon__isnull=False)
            .order_by('icon')
            .distinct()
            .values_list('icon', flat=True)
    )
    inner_icon_paths = (os.path.join(media_root, p) for p in inner_icon_paths)

    colors = (
        Severity.objects
            .order_by('color')
            .distinct()
            .values_list('color', flat=True)
    )

    # Icons for all (category icon, severity color) pairs
    pairs = set(product(inner_icon_paths, colors))
    # Icons for severity colors
    pairs.update(product([None], colors))
    # Icon for default color
    pairs.add((None, settings.ICON_DEFAULT_COLOR))

    generated_icons = []
    for icon_path, color in pairs:
        file_name = icon_file_name(icon_path, color)
        output_path = os.path.join(icon_dir, file_name)
        if force or not os.path.exists(output_path):
            generated_icon = generate_icon(output_path, icon_path, color)
            generated_icons.append(generated_icon)

    return generated_icons


def clean_icons():
    icon_dir = os.path.join(settings.MEDIA_ROOT, settings.ICON_DIR)
    icons = os.listdir(icon_dir)
    icons = [p for p in icons if p.endswith(settings.ICON_TYPE)]
    icons = [os.path.join(icon_dir, p) for p in icons]
    removed_icons = []
    for icon_path in icons:
        try:
            os.remove(icon_path)
        except FileNotFoundError:
            log.error('Icon disappeared before it could be removed: %s', icon_path)
        else:
            removed_icons.append(icon_path)
    return removed_icons
